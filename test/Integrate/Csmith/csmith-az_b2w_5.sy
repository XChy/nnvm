/*
 * This is a RANDOMLY GENERATED PROGRAM.
 *
 * Generator: csmith 2.4.0
 * Git version: 0ec6f1b
 * Options:   --no-pointers --quiet --no-structs --no-unions --no--pointers --no-const-pointers --no-builtins --no-jumps --no-bitfields --no-argc --no-structs --output /dev/stdout --no-intint --no-uint8 --no-math64 --no-comma-operators --no-bitfields --no-s --max-funcs 1
 * Seed:      8049317331812755326
 */




/*
 * Reference: https://github.com/dtcxzyw/cmmc/blob/main/tests/csmith/csmith_header.h
 * Provide safe calculations for the random test cases generated my csmith.
 * All the ternary operators in original version were substituted with if-else statements for the compatibility of SysY grammar.
 */

int crc32_tab[256];
int crc32_context = 0xFFFFFFFF;

void crc32_gentab() {
  int crc;
  int poly = 0xEDB88320;
  int i, j;

  for (i = 0; i < 256; i++) {
    crc = i;
    for (j = 8; j > 0; j--) {
      if (crc & 1) {
        crc = (crc >> 1) ^ poly;
      }
      else {
        crc >>= 1;
      }
    }
    crc32_tab[i] = crc;
  }
}

float fabsf(float x) {
  if (x < 0) {
    return -x;
  }
  return x;
}

void crc32_byte(int b) {
  crc32_context = ((crc32_context >> 8) & 0x00FFFFFF) ^
    crc32_tab[(crc32_context ^ b) & 0xFF];
}

void crc32_4bytes(int val) {
  crc32_byte((val >> 0) & 0xff);
  crc32_byte((val >> 8) & 0xff);
  crc32_byte((val >> 16) & 0xff);
  crc32_byte((val >> 24) & 0xff);
}

void print_hash(int hash) {
  putch(32);
  putint(hash);
  putch(10);
}

void transparent_crc(int val, int flag) {
  crc32_4bytes(val);
  if (flag) {
    print_hash(crc32_context ^ 0xFFFFFFFF);
  }
}

void transparent_crc_bytes(int flag) {
  // int i;
  // for(i = 0; i < nbytes; i++) {
  //     crc32_byte(ptr[i]);
  // }
  if (flag) {
    print_hash(crc32_context ^ 0xFFFFFFFF);
  }
}

void platform_main_begin() {}
void platform_main_end(int x, int flag) {
  if (flag) {
    print_hash(x);
  }
}

void putdim(int x) {
  putint(x);
  putch(10);
}

void putdim2(int x, int y) {
  putint(x);
  putch(32);
  putint(y);
  putch(10);
}

void putdim3(int x, int y, int z) {
  putint(x);
  putch(32);
  putint(y);
  putch(32);
  putint(z);
  putch(10);
}

/*****************************************************************************/

int safe_unary_minus_func_int_s(int si) {
  if ((si == (-2147483647 - 1))) {
    return ((si));
  }
  return -si;
}
int safe_add_func_int_s_s(int si1, int si2) {
  if ((((si1 > 0) && (si2 > 0) && (si1 > ((2147483647) - si2))) ||
    ((si1 < 0) && (si2 < 0) && (si1 < ((-2147483647 - 1) - si2))))) {
    return ((si1));
  }
  return (si1 + si2);
}
int safe_sub_func_int_s_s(int si1, int si2) {
  if ((((si1 ^ si2) & (((si1 ^ ((si1 ^ si2) & (~(2147483647)))) - si2) ^ si2)) <
    0)) {
    return ((si1));
  }
  return (si1 - si2);
}
int safe_mul_func_int_s_s(int si1, int si2) {
  if ((((si1 > 0) && (si2 > 0) && (si1 > ((2147483647) / si2))) ||
    ((si1 > 0) && (si2 <= 0) && (si2 < ((-2147483647 - 1) / si1))) ||
    ((si1 <= 0) && (si2 > 0) && (si1 < ((-2147483647 - 1) / si2))) ||
    ((si1 <= 0) && (si2 <= 0) && (si1 != 0) &&
      (si2 < ((2147483647) / si1))))) {
    return ((si1));
  }
  return si1 * si2;
}
int safe_mod_func_int_s_s(int si1, int si2) {
  if (((si2 == 0) || ((si1 == (-2147483647 - 1)) && (si2 == (-1))))) {
    return ((si1));
  }
  return (si1 % si2);
}
int safe_div_func_int_s_s(int si1, int si2) {
  if (((si2 == 0) || ((si1 == (-2147483647 - 1)) && (si2 == (-1))))) {
    return ((si1));
  }
  return (si1 / si2);
}
int safe_lshift_func_int_s_s(int left, int right) {
  if (((left < 0) || ((right) < 0) || ((right) >= 32) ||
    (left > ((2147483647) >> (right))))) {
    return ((left));
  }
  return (left << (right));
}
int safe_lshift_func_int_s_u(int left, int right) {
  if (((left < 0) || ((right) >= 32) || (left > ((2147483647) >> (right))))) {
    return ((left));
  }
  return (left << (right));
}
int safe_rshift_func_int_s_s(int left, int right) {
  if (((left < 0) || ((right) < 0) || ((right) >= 32))) {
    return ((left));
  }
  return (left >> (right));
}
int safe_rshift_func_int_s_u(int left, int right) {
  if (((left < 0) || ((right) >= 32))) {
    return ((left));
  }
  return (left >> (right));
}

int safe_unary_minus_func_int_u(int ui) { return -ui; }
int safe_add_func_int_u_u(int ui1, int ui2) {

  return ui1 + ui2;
}
int safe_sub_func_int_u_u(int ui1, int ui2) {

  return ui1 - ui2;
}
int safe_mul_func_int_u_u(int ui1, int ui2) {

  return (ui1) * (ui2);
}
int safe_mod_func_int_u_u(int ui1, int ui2) {
  if ((ui2 == 0)) {
    return ((ui1));
  }
  return (ui1 % ui2);
}
int safe_div_func_int_u_u(int ui1, int ui2) {
  if ((ui2 == 0)) {
    return ((ui1));
  }
  return (ui1 / ui2);
}
int safe_lshift_func_int_u_s(int left, int right) {
  if ((((right) < 0) || ((right) >= 32) ||
    (left > ((4294967295) >> (right))))) {
    return ((left));
  }
  return (left << (right));
}
int safe_lshift_func_int_u_u(int left, int right) {
  if ((((right) >= 32) || (left > ((4294967295) >> (right))))) {
    return ((left));
  }
  return (left << (right));
}
int safe_rshift_func_int_u_s(int left, int right) {
  if ((((right) < 0) || ((right) >= 32))) {
    return ((left));
  }
  return (left >> (right));
}
int safe_rshift_func_int_u_u(int left, int right) {
  if (((right) >= 32)) {
    return ((left));
  }
  return (left >> (right));
}

float safe_add_func_float_f_f(float sf1, float sf2) {
  if ((fabsf((0.5f * sf1) + (0.5f * sf2)) >
    (0.5f * 3.40282346638528859811704183484516925e+38F))) {
    return (sf1);
  }
  return (sf1 + sf2);
}
float safe_sub_func_float_f_f(float sf1, float sf2) {
  if ((fabsf((0.5f * sf1) - (0.5f * sf2)) >
    (0.5f * 3.40282346638528859811704183484516925e+38F))) {
    return (sf1);
  }
  return (sf1 - sf2);
}
float safe_mul_func_float_f_f(float sf1, float sf2) {
  if ((fabsf((0x1.0p-100f * sf1) * (0x1.0p-28f * sf2)) >
    (0x1.0p-100f *
      (0x1.0p-28f * 3.40282346638528859811704183484516925e+38F)))) {
    return (sf1);
  }
  return (sf1 * sf2);
}
float safe_div_func_float_f_f(float sf1, float sf2) {
  if (((fabsf(sf2) < 1.0f) &&
    (((sf2 == 0.0f) ||
      (fabsf((0x1.0p-49f * sf1) / (0x1.0p100f * sf2))) >
      (0x1.0p-100f *
        (0x1.0p-49f * 3.40282346638528859811704183484516925e+38F)))))) {
    return (sf1);
  }
  return (sf1 / sf2);
}
int safe_convert_func_float_to_int(float sf1) {
  if (((sf1 <= (-2147483647 - 1)) || (sf1 >= (2147483647)))) {
    return ((2147483647));
  }
  return ((sf1));
}

/*
double safe_add_func_double_f_f(double sf1, double sf2) {
  if ((fabs((0.5 * sf1) + (0.5 * sf2)) > (0.5 *
((double)1.79769313486231570814527423731704357e+308)))) { return (sf1);
  }
  return (sf1 + sf2);
}
double safe_sub_func_double_f_f(double sf1, double sf2) {
  if ((fabs((0.5 * sf1) - (0.5 * sf2)) > (0.5 *
((double)1.79769313486231570814527423731704357e+308)))) { return (sf1);
  }
  return (sf1 - sf2);
}
double safe_mul_func_double_f_f(double sf1, double sf2) {
  if ((fabs((0x1.0p-100 * sf1) * (0x1.0p-924 * sf2)) > (0x1.0p-100 * (0x1.0p-924
* ((double)1.79769313486231570814527423731704357e+308))))) { return (sf1);
  }
  return (sf1 * sf2);
}
double safe_div_func_double_f_f(double sf1, double sf2) {
  if (((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((0x1.0p-974 * sf1) /
(0x1.0p100 * sf2))) > (0x1.0p-100 * (0x1.0p-974 *
((double)1.79769313486231570814527423731704357e+308))))))) { return (sf1);
  }
  return (sf1 / sf2);
}
*/



int __undefined;



int g_2[3][4][3] = {{{0xDB3AE355,0xDB3AE355,0xDB3AE355},{0x4CD45360,0x4CD45360,0x4CD45360},{0xDB3AE355,0xDB3AE355,0xDB3AE355},{0x4CD45360,0x4CD45360,0x4CD45360}},{{0xDB3AE355,0xDB3AE355,0xDB3AE355},{0x4CD45360,0x4CD45360,0x4CD45360},{0xDB3AE355,0xDB3AE355,0xDB3AE355},{0x4CD45360,0x4CD45360,0x4CD45360}},{{0xDB3AE355,0xDB3AE355,0xDB3AE355},{0x4CD45360,0x4CD45360,0x4CD45360},{0xDB3AE355,0xDB3AE355,0xDB3AE355},{0x4CD45360,0x4CD45360,0x4CD45360}}};
int g_11 = (-1);
int g_12 = (-8);
int g_13 = 65527;
int g_40 = 1;
int g_43 = 0x46F9;
int g_44 = 0x78;
int g_56 = 0xB2C9D536;



int  func_1();





int  func_1()
{ 
    int l_22 = 0x79AE4F78;
    int l_29 = (-2);
    for (g_2[2][1][2] = (-21); (g_2[2][1][2] > 29); ++g_2[2][1][2])
    { 
        int l_16[4];
        int l_45 = 1;
        int l_46 = 5;
        int i;
        for (i = 0; i < 4; i++)
            l_16[i] = 0xA8BC07C2;
        if (((-5) | (safe_rshift_func_int_s_s(((safe_div_func_int_u_u(((safe_lshift_func_int_u_s(((((++g_13) > ((((l_16[2] >= ((safe_add_func_int_s_s((safe_add_func_int_s_s(g_12, ((~l_22) > g_2[2][2][1]))), (safe_div_func_int_s_s((4294967293 & l_16[2]), (4294967292 | ((safe_mul_func_int_s_s((l_29 |= (((((safe_rshift_func_int_s_u(g_2[2][1][2], l_22)) < (-1)) ^ 0x53FD) & l_22) <= g_2[2][1][2])), g_2[0][2][1])) | l_22)))))) && g_12)) | g_2[2][1][2]) == g_2[2][1][2]) == l_16[1])) & l_22) < l_16[1]), 2)) & l_22), l_22)) & g_2[2][3][2]), g_2[2][1][2]))))
        { 
            int l_32 = 0xA7054F86;
            int l_33[4] = {0x4648A574,0x4648A574,0x4648A574,0x4648A574};
            int i;
            g_11 = (safe_add_func_int_u_u(g_2[0][2][0], (l_33[3] = l_32)));
            return g_13;
        }
        else
        { 
            int l_38[5] = {4294967295,4294967295,4294967295,4294967295,4294967295};
            int l_39 = 0xC3978D11;
            int i;
            l_29 = (g_13 > (l_46 = (((((g_40 &= (g_12 | (safe_div_func_int_s_s(g_2[2][1][2], (l_39 |= (g_11 |= l_38[4])))))) | (((((((g_12 && (l_29 ^ g_13)) || (g_44 = ((g_43 ^= (safe_mod_func_int_u_u((l_16[2] >= (g_13 && 0x67E6007B)), 0xD293))) | l_16[3]))) > g_13) >= l_45) & l_38[4]) >= l_38[0]) == (-7))) >= l_16[2]) & l_22) != l_38[4])));
        }
        if (l_45)
            continue;
        l_29 ^= (safe_div_func_int_u_u(g_11, (safe_unary_minus_func_int_u(((safe_lshift_func_int_u_s(l_16[2], (safe_rshift_func_int_u_s((safe_mod_func_int_s_s((g_13 && 0x4EE8), g_2[2][1][2])), 10)))) || (g_43 != (g_56 = g_13)))))));
    }
    return l_29;
}





int main ()
{
    int i, j, k;
    int print_hash_value = 1;
    platform_main_begin();
    crc32_gentab();
    func_1();
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
        {
            for (k = 0; k < 3; k++)
            {
                transparent_crc(g_2[i][j][k], print_hash_value);
                if (print_hash_value) putdim3(i, j, k);

            }
        }
    }
    transparent_crc(g_11, print_hash_value);
    transparent_crc(g_12, print_hash_value);
    transparent_crc(g_13, print_hash_value);
    transparent_crc(g_40, print_hash_value);
    transparent_crc(g_43, print_hash_value);
    transparent_crc(g_44, print_hash_value);
    transparent_crc(g_56, print_hash_value);
    platform_main_end(crc32_context ^ 0xFFFFFFFF, print_hash_value);
    return 0;
}

/************************ statistics *************************
XXX max struct depth: 0
breakdown:
   depth: 0, occurrence: 16
XXX total union variables: 0

XXX max expression depth: 30
breakdown:
   depth: 1, occurrence: 6
   depth: 2, occurrence: 1
   depth: 3, occurrence: 1
   depth: 9, occurrence: 1
   depth: 26, occurrence: 1
   depth: 30, occurrence: 1

XXX total number of pointers: 0

XXX times a non- is read: 50
XXX times a non- is write: 14
XXX times a  is read: 0
XXX    times read thru a pointer: 0
XXX times a  is write: 0
XXX    times written thru a pointer: 0
XXX times a  is available for access: 0
XXX percentage of non- access: 100

XXX forward jumps: 0
XXX backward jumps: 0

XXX stmts: 8
XXX max block depth: 2
breakdown:
   depth: 0, occurrence: 2
   depth: 1, occurrence: 3
   depth: 2, occurrence: 3

XXX percentage a fresh-made variable is used: 25
XXX percentage an existing variable is used: 75
XXX total OOB instances added: 0
********************* end of statistics **********************/

