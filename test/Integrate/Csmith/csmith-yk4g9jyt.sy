/*
 * This is a RANDOMLY GENERATED PROGRAM.
 *
 * Generator: csmith 2.4.0
 * Git version: 0ec6f1b
 * Options:   --no-pointers --quiet --no-structs --no-unions --no--pointers --no-const-pointers --no-builtins --no-jumps --no-bitfields --no-argc --no-structs --output /dev/stdout --no-intint --no-uint8 --no-math64 --no-comma-operators --no-bitfields --no-s --max-funcs 10
 * Seed:      13200768110374113519
 */




/*
 * Reference: https://github.com/dtcxzyw/cmmc/blob/main/tests/csmith/csmith_header.h
 * Provide safe calculations for the random test cases generated my csmith.
 * All the ternary operators in original version were substituted with if-else statements for the compatibility of SysY grammar.
 */

int crc32_tab[256];
int crc32_context = 0xFFFFFFFF;

void crc32_gentab() {
  int crc;
  int poly = 0xEDB88320;
  int i, j;

  for (i = 0; i < 256; i++) {
    crc = i;
    for (j = 8; j > 0; j--) {
      if (crc & 1) {
        crc = (crc >> 1) ^ poly;
      }
      else {
        crc >>= 1;
      }
    }
    crc32_tab[i] = crc;
  }
}

float fabsf(float x) {
  if (x < 0) {
    return -x;
  }
  return x;
}

void crc32_byte(int b) {
  crc32_context = ((crc32_context >> 8) & 0x00FFFFFF) ^
    crc32_tab[(crc32_context ^ b) & 0xFF];
}

void crc32_4bytes(int val) {
  crc32_byte((val >> 0) & 0xff);
  crc32_byte((val >> 8) & 0xff);
  crc32_byte((val >> 16) & 0xff);
  crc32_byte((val >> 24) & 0xff);
}

void print_hash(int hash) {
  putch(32);
  putint(hash);
  putch(10);
}

void transparent_crc(int val, int flag) {
  crc32_4bytes(val);
  if (flag) {
    print_hash(crc32_context ^ 0xFFFFFFFF);
  }
}

void transparent_crc_bytes(int flag) {
  // int i;
  // for(i = 0; i < nbytes; i++) {
  //     crc32_byte(ptr[i]);
  // }
  if (flag) {
    print_hash(crc32_context ^ 0xFFFFFFFF);
  }
}

void platform_main_begin() {}
void platform_main_end(int x, int flag) {
  if (flag) {
    print_hash(x);
  }
}

void putdim(int x) {
  putint(x);
  putch(10);
}

void putdim2(int x, int y) {
  putint(x);
  putch(32);
  putint(y);
  putch(10);
}

void putdim3(int x, int y, int z) {
  putint(x);
  putch(32);
  putint(y);
  putch(32);
  putint(z);
  putch(10);
}

/*****************************************************************************/

int safe_unary_minus_func_int_s(int si) {
  if ((si == (-2147483647 - 1))) {
    return ((si));
  }
  return -si;
}
int safe_add_func_int_s_s(int si1, int si2) {
  if ((((si1 > 0) && (si2 > 0) && (si1 > ((2147483647) - si2))) ||
    ((si1 < 0) && (si2 < 0) && (si1 < ((-2147483647 - 1) - si2))))) {
    return ((si1));
  }
  return (si1 + si2);
}
int safe_sub_func_int_s_s(int si1, int si2) {
  if ((((si1 ^ si2) & (((si1 ^ ((si1 ^ si2) & (~(2147483647)))) - si2) ^ si2)) <
    0)) {
    return ((si1));
  }
  return (si1 - si2);
}
int safe_mul_func_int_s_s(int si1, int si2) {
  if ((((si1 > 0) && (si2 > 0) && (si1 > ((2147483647) / si2))) ||
    ((si1 > 0) && (si2 <= 0) && (si2 < ((-2147483647 - 1) / si1))) ||
    ((si1 <= 0) && (si2 > 0) && (si1 < ((-2147483647 - 1) / si2))) ||
    ((si1 <= 0) && (si2 <= 0) && (si1 != 0) &&
      (si2 < ((2147483647) / si1))))) {
    return ((si1));
  }
  return si1 * si2;
}
int safe_mod_func_int_s_s(int si1, int si2) {
  if (((si2 == 0) || ((si1 == (-2147483647 - 1)) && (si2 == (-1))))) {
    return ((si1));
  }
  return (si1 % si2);
}
int safe_div_func_int_s_s(int si1, int si2) {
  if (((si2 == 0) || ((si1 == (-2147483647 - 1)) && (si2 == (-1))))) {
    return ((si1));
  }
  return (si1 / si2);
}
int safe_lshift_func_int_s_s(int left, int right) {
  if (((left < 0) || ((right) < 0) || ((right) >= 32) ||
    (left > ((2147483647) >> (right))))) {
    return ((left));
  }
  return (left << (right));
}
int safe_lshift_func_int_s_u(int left, int right) {
  if (((left < 0) || ((right) >= 32) || (left > ((2147483647) >> (right))))) {
    return ((left));
  }
  return (left << (right));
}
int safe_rshift_func_int_s_s(int left, int right) {
  if (((left < 0) || ((right) < 0) || ((right) >= 32))) {
    return ((left));
  }
  return (left >> (right));
}
int safe_rshift_func_int_s_u(int left, int right) {
  if (((left < 0) || ((right) >= 32))) {
    return ((left));
  }
  return (left >> (right));
}

int safe_unary_minus_func_int_u(int ui) { return -ui; }
int safe_add_func_int_u_u(int ui1, int ui2) {

  return ui1 + ui2;
}
int safe_sub_func_int_u_u(int ui1, int ui2) {

  return ui1 - ui2;
}
int safe_mul_func_int_u_u(int ui1, int ui2) {

  return (ui1) * (ui2);
}
int safe_mod_func_int_u_u(int ui1, int ui2) {
  if ((ui2 == 0)) {
    return ((ui1));
  }
  return (ui1 % ui2);
}
int safe_div_func_int_u_u(int ui1, int ui2) {
  if ((ui2 == 0)) {
    return ((ui1));
  }
  return (ui1 / ui2);
}
int safe_lshift_func_int_u_s(int left, int right) {
  if ((((right) < 0) || ((right) >= 32) ||
    (left > ((4294967295) >> (right))))) {
    return ((left));
  }
  return (left << (right));
}
int safe_lshift_func_int_u_u(int left, int right) {
  if ((((right) >= 32) || (left > ((4294967295) >> (right))))) {
    return ((left));
  }
  return (left << (right));
}
int safe_rshift_func_int_u_s(int left, int right) {
  if ((((right) < 0) || ((right) >= 32))) {
    return ((left));
  }
  return (left >> (right));
}
int safe_rshift_func_int_u_u(int left, int right) {
  if (((right) >= 32)) {
    return ((left));
  }
  return (left >> (right));
}

float safe_add_func_float_f_f(float sf1, float sf2) {
  if ((fabsf((0.5f * sf1) + (0.5f * sf2)) >
    (0.5f * 3.40282346638528859811704183484516925e+38F))) {
    return (sf1);
  }
  return (sf1 + sf2);
}
float safe_sub_func_float_f_f(float sf1, float sf2) {
  if ((fabsf((0.5f * sf1) - (0.5f * sf2)) >
    (0.5f * 3.40282346638528859811704183484516925e+38F))) {
    return (sf1);
  }
  return (sf1 - sf2);
}
float safe_mul_func_float_f_f(float sf1, float sf2) {
  if ((fabsf((0x1.0p-100f * sf1) * (0x1.0p-28f * sf2)) >
    (0x1.0p-100f *
      (0x1.0p-28f * 3.40282346638528859811704183484516925e+38F)))) {
    return (sf1);
  }
  return (sf1 * sf2);
}
float safe_div_func_float_f_f(float sf1, float sf2) {
  if (((fabsf(sf2) < 1.0f) &&
    (((sf2 == 0.0f) ||
      (fabsf((0x1.0p-49f * sf1) / (0x1.0p100f * sf2))) >
      (0x1.0p-100f *
        (0x1.0p-49f * 3.40282346638528859811704183484516925e+38F)))))) {
    return (sf1);
  }
  return (sf1 / sf2);
}
int safe_convert_func_float_to_int(float sf1) {
  if (((sf1 <= (-2147483647 - 1)) || (sf1 >= (2147483647)))) {
    return ((2147483647));
  }
  return ((sf1));
}

/*
double safe_add_func_double_f_f(double sf1, double sf2) {
  if ((fabs((0.5 * sf1) + (0.5 * sf2)) > (0.5 *
((double)1.79769313486231570814527423731704357e+308)))) { return (sf1);
  }
  return (sf1 + sf2);
}
double safe_sub_func_double_f_f(double sf1, double sf2) {
  if ((fabs((0.5 * sf1) - (0.5 * sf2)) > (0.5 *
((double)1.79769313486231570814527423731704357e+308)))) { return (sf1);
  }
  return (sf1 - sf2);
}
double safe_mul_func_double_f_f(double sf1, double sf2) {
  if ((fabs((0x1.0p-100 * sf1) * (0x1.0p-924 * sf2)) > (0x1.0p-100 * (0x1.0p-924
* ((double)1.79769313486231570814527423731704357e+308))))) { return (sf1);
  }
  return (sf1 * sf2);
}
double safe_div_func_double_f_f(double sf1, double sf2) {
  if (((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((0x1.0p-974 * sf1) /
(0x1.0p100 * sf2))) > (0x1.0p-100 * (0x1.0p-974 *
((double)1.79769313486231570814527423731704357e+308))))))) { return (sf1);
  }
  return (sf1 / sf2);
}
*/



int __undefined;



int g_2[10][3][8] = {{{0x4F368A90,0x307976B5,0x2F3817D1,0xB29949DF,0xB91E60E7,1,0x7E318B47,0},{4294967291,0x0DFA0148,0x2F3817D1,0x7865925E,0,0x2F3817D1,0xEC6E54EE,0x7E318B47},{0xB91E60E7,0x70012AF0,0x950BA1BF,0x911B9C6F,1,0xF377CC42,0xA2C7C8A6,4}},{{1,0x7CA4E865,0x878ABC10,2,0x911B9C6F,0xADF29855,4294967293,0x6695998A},{0xEC6E54EE,0x82BD7B1C,0x0DFA0148,0x64C9D8D9,0xADF29855,0x2F3817D1,0x7CA4E865,0},{0x6695998A,0xEC6E54EE,0,0xA2C7C8A6,0xFD5464B5,0x7DD9AE65,0xB29949DF,0xB29949DF}},{{0,0xB29949DF,0x950BA1BF,0x950BA1BF,0xB29949DF,0,0x2C36544D,0xFAF425F5},{0,4294967295,0x4F204795,0x2F3817D1,0x955A63A7,4294967290,0,0x7DD9AE65},{0x5FA5FEF9,0xFAF425F5,0x70012AF0,0x2F3817D1,1,4,0x82BD7B1C,0xFAF425F5}},{{7,1,1,0x950BA1BF,1,0x79DF9481,7,0xB29949DF},{0x4F368A90,0x6FDD8FB8,1,0x878ABC10,7,7,0x5FA5FEF9,7},{0x0DFA0148,0x878ABC10,1,0x0DFA0148,0xFAF425F5,0xEC80F219,0x82BD7B1C,4294967293}},{{1,1,4294967290,0,4294967294,0xC506D444,7,2},{0x2F3817D1,0x7DD9AE65,0x4F204795,0x7E318B47,0x4F204795,0x7DD9AE65,0x2F3817D1,0x950BA1BF},{1,0x878ABC10,0x64C9D8D9,1,0x0DFA0148,1,0xB29949DF,4294967295}},{{4294967295,2,0x955A63A7,0x7F6FB807,0x0DFA0148,0x79DF9481,0x7F6FB807,0x7E318B47},{1,0,0xC506D444,4294967295,0x4F204795,0x2C36544D,0x7E318B47,4294967290},{0x2F3817D1,0xFAF425F5,0xFD5464B5,4294967289,4294967294,0x70012AF0,0x878ABC10,0x82BD7B1C}},{{1,4294967295,0x79DF9481,4294967295,0xFAF425F5,0,0xC506D444,0x7E318B47},{0x0DFA0148,4294967288,0x6FDD8FB8,4294967294,7,0x4F204795,0x4F368A90,4294967295},{0x4F368A90,0,0x6695998A,1,1,0x6695998A,0,0x4F368A90}},{{7,0x2F3817D1,0x79DF9481,0x955A63A7,1,4294967288,1,2},{0x5FA5FEF9,0x7F6FB807,0,4294967293,0x955A63A7,4294967288,0x7E318B47,0},{0,0x2F3817D1,0xB91E60E7,0x0DFA0148,0xB29949DF,0x6695998A,4294967294,0}},{{0,0,0x955A63A7,1,0x5FA5FEF9,0x4F204795,4294967288,0xB29949DF},{4294967293,4294967288,0x950BA1BF,0x4F368A90,4294967288,0,0x2F3817D1,1},{0,4294967295,2,0x2F3817D1,0x7E318B47,0x70012AF0,0,1}},{{7,0xFAF425F5,4294967290,0x2C36544D,1,0x2C36544D,4294967290,0xFAF425F5},{0,0,1,0x4F368A90,0x7DD9AE65,0x79DF9481,0x5FA5FEF9,4294967288},{0x4F368A90,2,0,0x878ABC10,0,0xADF29855,0xF377CC42,0x7DD9AE65}}};
int g_9 = 0xCA7BC41B;
int g_12 = 0;



int  func_1();





int  func_1()
{ 
    int l_3 = 0x896E60BE;
    int l_7[10][9] = {{5,5,5,5,5,5,5,5,5},{0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B},{5,5,5,5,5,5,5,5,5},{0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B},{5,5,5,5,5,5,5,5,5},{0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B},{5,5,5,5,5,5,5,5,5},{0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B},{5,5,5,5,5,5,5,5,5},{0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B,0x4380D33B}};
    int l_17[10][4][4] = {{{0x5C6F0D60,0x47E13251,0x1248C331,4294967293},{0x9FA6B86D,4294967290,0x13D46409,4294967293},{0xFEE61394,0x47E13251,4294967293,0xD8BAC8E9},{0,0x725AC950,0,5}},{{0,0x5C6F0D60,4294967293,0},{0x725AC950,8,0x1248C331,0xB4F7BC72},{4294967287,0x9FA6B86D,1,4294967286},{4294967294,0x47E13251,4294967294,0x13D46409}},{{5,0xD8BAC8E9,0x13D46409,0x9B7C392A},{0,1,0x07742427,0xD8BAC8E9},{0xD8BAC8E9,4294967292,0x07742427,0xB4F7BC72},{0,4294967287,0x13D46409,0x07742427}},{{5,8,4294967294,0x725AC950},{4294967294,0x725AC950,1,0},{4294967287,1,0x1248C331,0x13D46409},{0x725AC950,0x70FCBC84,4294967293,4294967293}},{{0,0,0,4294967286},{0,4294967292,4294967293,0x725AC950},{0xFEE61394,0x5C6F0D60,0x13D46409,4294967293},{0x9FA6B86D,0x5C6F0D60,0x1248C331,0x725AC950}},{{0x5C6F0D60,4294967292,0x98B3027F,4294967286},{4294967287,0,0x5C6F0D60,4294967293},{5,0x70FCBC84,0x9B7C392A,0x13D46409},{0xFEE61394,1,0,0}},{{4294967290,4294967294,0x47E13251,4294967294},{0x41AC573C,4294967290,9,0x47E13251},{0x5C6F0D60,0xD8BAC8E9,0,8},{4294967286,4294967287,4294967295,0x9B7C392A}},{{4294967286,0x41AC573C,0,0x07742427},{0x5C6F0D60,0x9B7C392A,9,4294967293},{0x41AC573C,0xD890AAF7,0x47E13251,0x231966BA},{0x13D46409,0x5C6F0D60,0xFEE61394,8}},{{4294967295,4294967290,0x07742427,0xFEE61394},{0x1248C331,0,0,0x1248C331},{0xD8BAC8E9,4294967294,0xA1289665,0x9B7C392A},{0,0xD890AAF7,0x70FCBC84,9}},{{0x5C6F0D60,0x13D46409,4294967293,9},{4294967295,0xD890AAF7,0x98B3027F,0x9B7C392A},{4294967293,4294967294,0xFEE61394,0x1248C331},{0,0,9,0xFEE61394}}};
    int i, j, k;
    l_3 ^= g_2[4][0][2];
    for (l_3 = 18; (l_3 == 43); l_3++)
    { 
        int l_6 = 0xFAEAD221;
        int l_8 = 1;
        g_12 = (((l_7[1][8] = l_6) != (0x4B4322E7 || g_2[4][0][2])) == (--g_9));
        for (g_12 = 0; (g_12 < (-2)); g_12--)
        { 
            int l_15 = 0xE868;
            l_15 = g_2[4][0][2];
        }
        l_17[2][2][0] = (safe_unary_minus_func_int_u(0x1F79));
        if (g_2[4][0][2])
            break;
    }
    l_7[3][7] = g_12;
    return l_3;
}





int main ()
{
    int i, j, k;
    int print_hash_value = 1;
    platform_main_begin();
    crc32_gentab();
    func_1();
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 3; j++)
        {
            for (k = 0; k < 8; k++)
            {
                transparent_crc(g_2[i][j][k], print_hash_value);
                if (print_hash_value) putdim3(i, j, k);

            }
        }
    }
    transparent_crc(g_9, print_hash_value);
    transparent_crc(g_12, print_hash_value);
    platform_main_end(crc32_context ^ 0xFFFFFFFF, print_hash_value);
    return 0;
}

/************************ statistics *************************
XXX max struct depth: 0
breakdown:
   depth: 0, occurrence: 9
XXX total union variables: 0

XXX max expression depth: 6
breakdown:
   depth: 1, occurrence: 11
   depth: 2, occurrence: 2
   depth: 6, occurrence: 1

XXX total number of pointers: 0

XXX times a non- is read: 9
XXX times a non- is write: 9
XXX times a  is read: 0
XXX    times read thru a pointer: 0
XXX times a  is write: 0
XXX    times written thru a pointer: 0
XXX times a  is available for access: 0
XXX percentage of non- access: 100

XXX forward jumps: 0
XXX backward jumps: 0

XXX stmts: 9
XXX max block depth: 2
breakdown:
   depth: 0, occurrence: 4
   depth: 1, occurrence: 4
   depth: 2, occurrence: 1

XXX percentage a fresh-made variable is used: 60
XXX percentage an existing variable is used: 40
XXX total OOB instances added: 0
********************* end of statistics **********************/

