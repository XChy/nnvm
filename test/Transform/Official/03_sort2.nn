global ptr ans init with i32 0
global ptr a init with 30000010 x i32 zeros
global ptr base init with i32 16
external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry311:
  313 = call i32 getarray(ptr @a)
  call void _sysy_starttime(i32 90)
  call void radixSort(i32 8, ptr @a, i32 0, i32 %313)
  br bb %while.cond318
while.cond318:
  i317.phi = phi [bb %entry311, i32 0, bb %while.body319, i32 %337]
  323 = icmp slt i32 %i317.phi, i32 %313
  324 = icmp ne i1 %323, i1 0
  br i1 %324, bb %while.body319, bb %while.exit320
while.body319:
  ans.load = load i32 from ptr @ans
  328 = mul i32 %i317.phi, i32 4
  329 = ptradd ptr @a, i32 %328
  329.load = load i32 from ptr %329
  332 = add i32 2, i32 %i317.phi
  333 = srem i32 %329.load, i32 %332
  334 = mul i32 %i317.phi, i32 %333
  335 = add i32 %ans.load, i32 %334
  store i32 %335 to ptr @ans
  337 = add i32 %i317.phi, i32 1
  br bb %while.cond318
while.exit320:
  ans.load338 = load i32 from ptr @ans
  339 = icmp slt i32 %ans.load338, i32 0
  br i1 %339, bb %then340, bb %if.exit341
then340:
  ans.load342 = load i32 from ptr @ans
  343 = sub i32 0, i32 %ans.load342
  store i32 %343 to ptr @ans
  br bb %if.exit341
if.exit341:
  call void _sysy_stoptime(i32 102)
  ans.load345 = load i32 from ptr @ans
  call void putint(i32 %ans.load345)
  call void putch(i32 10)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

i32 getNumPos(i32 num, i32 pos) {
entry26:
  br bb %while.cond31
while.cond31:
  i30.phi = phi [bb %entry26, i32 0, bb %while.body32, i32 %42]
  num.stack.phi = phi [bb %entry26, i32 %num, bb %while.body32, i32 %40]
  36 = icmp slt i32 %i30.phi, i32 %pos
  37 = icmp ne i1 %36, i1 0
  br i1 %37, bb %while.body32, bb %while.exit33
while.body32:
  base.load = load i32 from ptr @base
  40 = sdiv i32 %num.stack.phi, i32 %base.load
  42 = add i32 %i30.phi, i32 1
  br bb %while.cond31
while.exit33:
  base.load44 = load i32 from ptr @base
  45 = srem i32 %num.stack.phi, i32 %base.load44
  ret i32 %45
}

external void _sysy_starttime(i32 )

void radixSort(i32 bitround, ptr a, i32 l, i32 r) {
entry46:
  %cnt74 = stack 64
  %tail = stack 64
  %head = stack 64
  br bb %init.cond
init.cond:
  cnt_ptr.phi = phi [bb %entry46, i32 16, bb %init, i32 %cnt.dec]
  56 = icmp ne i32 %cnt_ptr.phi, i32 0
  br i1 %56, bb %init, bb %init.exit
init:
  cnt.dec = sub i32 %cnt_ptr.phi, i32 1
  offset = mul i32 %cnt.dec, i32 4
  arr.index = add i32 0, i32 %offset
  arr.index61 = ptradd ptr %head, ptr %arr.index
  store i32 0 to ptr %arr.index61
  br bb %init.cond
init.exit:
  br bb %init.cond63
init.cond63:
  cnt_ptr66.phi = phi [bb %init.exit, i32 16, bb %init64, i32 %cnt.dec70]
  68 = icmp ne i32 %cnt_ptr66.phi, i32 0
  br i1 %68, bb %init64, bb %init.exit65
init64:
  cnt.dec70 = sub i32 %cnt_ptr66.phi, i32 1
  offset71 = mul i32 %cnt.dec70, i32 4
  arr.index72 = add i32 0, i32 %offset71
  arr.index73 = ptradd ptr %tail, ptr %arr.index72
  store i32 0 to ptr %arr.index73
  br bb %init.cond63
init.exit65:
  br bb %init.cond75
init.cond75:
  cnt_ptr78.phi = phi [bb %init.exit65, i32 16, bb %init76, i32 %cnt.dec82]
  80 = icmp ne i32 %cnt_ptr78.phi, i32 0
  br i1 %80, bb %init76, bb %init.exit77
init76:
  cnt.dec82 = sub i32 %cnt_ptr78.phi, i32 1
  offset83 = mul i32 %cnt.dec82, i32 4
  arr.index84 = add i32 0, i32 %offset83
  arr.index85 = ptradd ptr %cnt74, ptr %arr.index84
  store i32 0 to ptr %arr.index85
  br bb %init.cond75
init.exit77:
  88 = icmp eq i32 %bitround, i32 -1
  br i1 %88, bb %select.then, bb %select.else
select.then:
  br bb %select.exit
select.else:
  94 = add i32 %l, i32 1
  96 = icmp sge i32 %94, i32 %r
  97 = icmp ne i1 %96, i1 0
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %97, bb %select.then, i1 1]
  br i1 %select.phi, bb %then99, bb %if.exit100
then99:
  ret 
if.exit100:
  br bb %while.cond103
while.cond103:
  i101.phi357 = phi [bb %if.exit100, i32 %l, bb %while.body104, i32 %129]
  108 = icmp slt i32 %i101.phi357, i32 %r
  109 = icmp ne i1 %108, i1 0
  br i1 %109, bb %while.body104, bb %while.exit105
while.body104:
  111 = mul i32 %i101.phi357, i32 4
  112 = ptradd ptr %a, i32 %111
  112.load = load i32 from ptr %112
  115 = call i32 getNumPos(i32 %112.load, i32 %bitround)
  116 = mul i32 %115, i32 4
  117 = ptradd ptr %cnt74, i32 %116
  119 = mul i32 %i101.phi357, i32 4
  120 = ptradd ptr %a, i32 %119
  120.load = load i32 from ptr %120
  123 = call i32 getNumPos(i32 %120.load, i32 %bitround)
  124 = mul i32 %123, i32 4
  125 = ptradd ptr %cnt74, i32 %124
  125.load = load i32 from ptr %125
  127 = add i32 %125.load, i32 1
  store i32 %127 to ptr %117
  129 = add i32 %i101.phi357, i32 1
  br bb %while.cond103
while.exit105:
  131 = ptradd ptr %head, i32 0
  store i32 %l to ptr %131
  134 = ptradd ptr %tail, i32 0
  137 = ptradd ptr %cnt74, i32 0
  137.load = load i32 from ptr %137
  139 = add i32 %l, i32 %137.load
  store i32 %139 to ptr %134
  br bb %while.cond140
while.cond140:
  i101.phi356 = phi [bb %while.exit105, i32 1, bb %while.body141, i32 %168]
  base.load144 = load i32 from ptr @base
  145 = icmp slt i32 %i101.phi356, i32 %base.load144
  146 = icmp ne i1 %145, i1 0
  br i1 %146, bb %while.body141, bb %while.exit142
while.body141:
  148 = mul i32 %i101.phi356, i32 4
  149 = ptradd ptr %head, i32 %148
  151 = sub i32 %i101.phi356, i32 1
  152 = mul i32 %151, i32 4
  153 = ptradd ptr %tail, i32 %152
  153.load = load i32 from ptr %153
  store i32 %153.load to ptr %149
  156 = mul i32 %i101.phi356, i32 4
  157 = ptradd ptr %tail, i32 %156
  159 = mul i32 %i101.phi356, i32 4
  160 = ptradd ptr %head, i32 %159
  160.load = load i32 from ptr %160
  163 = mul i32 %i101.phi356, i32 4
  164 = ptradd ptr %cnt74, i32 %163
  164.load = load i32 from ptr %164
  166 = add i32 %160.load, i32 %164.load
  store i32 %166 to ptr %157
  168 = add i32 %i101.phi356, i32 1
  br bb %while.cond140
while.exit142:
  br bb %while.cond169
while.cond169:
  t.phi363 = phi [bb %while.exit142, i32 ub, bb %while.exit178, i32 %t.phi362]
  v.phi360 = phi [bb %while.exit142, i32 ub, bb %while.exit178, i32 %v.phi359]
  i101.phi = phi [bb %while.exit142, i32 0, bb %while.exit178, i32 %254]
  base.load173 = load i32 from ptr @base
  174 = icmp slt i32 %i101.phi, i32 %base.load173
  175 = icmp ne i1 %174, i1 0
  br i1 %175, bb %while.body170, bb %while.exit171
while.body170:
  br bb %while.cond176
while.exit171:
  258 = ptradd ptr %head, i32 0
  store i32 %l to ptr %258
  261 = ptradd ptr %tail, i32 0
  264 = ptradd ptr %cnt74, i32 0
  264.load = load i32 from ptr %264
  266 = add i32 %l, i32 %264.load
  store i32 %266 to ptr %261
  br bb %while.cond267
while.cond176:
  t.phi362 = phi [bb %while.body170, i32 %t.phi363, bb %while.exit199, i32 %t.phi]
  v.phi359 = phi [bb %while.body170, i32 %v.phi360, bb %while.exit199, i32 %v.phi]
  180 = mul i32 %i101.phi, i32 4
  181 = ptradd ptr %head, i32 %180
  181.load = load i32 from ptr %181
  184 = mul i32 %i101.phi, i32 4
  185 = ptradd ptr %tail, i32 %184
  185.load = load i32 from ptr %185
  187 = icmp slt i32 %181.load, i32 %185.load
  188 = icmp ne i1 %187, i1 0
  br i1 %188, bb %while.body177, bb %while.exit178
while.body177:
  191 = mul i32 %i101.phi, i32 4
  192 = ptradd ptr %head, i32 %191
  192.load = load i32 from ptr %192
  194 = mul i32 %192.load, i32 4
  195 = ptradd ptr %a, i32 %194
  195.load = load i32 from ptr %195
  br bb %while.cond197
while.exit178:
  254 = add i32 %i101.phi, i32 1
  br bb %while.cond169
while.cond197:
  t.phi = phi [bb %while.body177, i32 %t.phi362, bb %while.body198, i32 %v.phi]
  v.phi = phi [bb %while.body177, i32 %195.load, bb %while.body198, i32 %215.load]
  202 = call i32 getNumPos(i32 %v.phi, i32 %bitround)
  204 = icmp ne i32 %202, i32 %i101.phi
  205 = icmp ne i1 %204, i1 0
  br i1 %205, bb %while.body198, bb %while.exit199
while.body198:
  210 = call i32 getNumPos(i32 %v.phi, i32 %bitround)
  211 = mul i32 %210, i32 4
  212 = ptradd ptr %head, i32 %211
  212.load = load i32 from ptr %212
  214 = mul i32 %212.load, i32 4
  215 = ptradd ptr %a, i32 %214
  215.load = load i32 from ptr %215
  219 = call i32 getNumPos(i32 %v.phi, i32 %bitround)
  220 = mul i32 %219, i32 4
  221 = ptradd ptr %head, i32 %220
  221.load = load i32 from ptr %221
  223 = mul i32 %221.load, i32 4
  224 = ptradd ptr %a, i32 %223
  store i32 %v.phi to ptr %224
  228 = call i32 getNumPos(i32 %v.phi, i32 %bitround)
  229 = mul i32 %228, i32 4
  230 = ptradd ptr %head, i32 %229
  233 = call i32 getNumPos(i32 %v.phi, i32 %bitround)
  234 = mul i32 %233, i32 4
  235 = ptradd ptr %head, i32 %234
  235.load = load i32 from ptr %235
  237 = add i32 %235.load, i32 1
  store i32 %237 to ptr %230
  br bb %while.cond197
while.exit199:
  239 = mul i32 %i101.phi, i32 4
  240 = ptradd ptr %head, i32 %239
  240.load = load i32 from ptr %240
  242 = mul i32 %240.load, i32 4
  243 = ptradd ptr %a, i32 %242
  store i32 %v.phi to ptr %243
  246 = mul i32 %i101.phi, i32 4
  247 = ptradd ptr %head, i32 %246
  249 = mul i32 %i101.phi, i32 4
  250 = ptradd ptr %head, i32 %249
  250.load = load i32 from ptr %250
  252 = add i32 %250.load, i32 1
  store i32 %252 to ptr %247
  br bb %while.cond176
while.cond267:
  i255.phi = phi [bb %while.exit171, i32 0, bb %if.exit277, i32 %310]
  base.load271 = load i32 from ptr @base
  272 = icmp slt i32 %i255.phi, i32 %base.load271
  273 = icmp ne i1 %272, i1 0
  br i1 %273, bb %while.body268, bb %while.exit269
while.body268:
  275 = icmp sgt i32 %i255.phi, i32 0
  br i1 %275, bb %then276, bb %if.exit277
while.exit269:
  ret 
then276:
  279 = mul i32 %i255.phi, i32 4
  280 = ptradd ptr %head, i32 %279
  282 = sub i32 %i255.phi, i32 1
  283 = mul i32 %282, i32 4
  284 = ptradd ptr %tail, i32 %283
  284.load = load i32 from ptr %284
  store i32 %284.load to ptr %280
  287 = mul i32 %i255.phi, i32 4
  288 = ptradd ptr %tail, i32 %287
  290 = mul i32 %i255.phi, i32 4
  291 = ptradd ptr %head, i32 %290
  291.load = load i32 from ptr %291
  294 = mul i32 %i255.phi, i32 4
  295 = ptradd ptr %cnt74, i32 %294
  295.load = load i32 from ptr %295
  297 = add i32 %291.load, i32 %295.load
  store i32 %297 to ptr %288
  br bb %if.exit277
if.exit277:
  299 = sub i32 %bitround, i32 1
  301 = mul i32 %i255.phi, i32 4
  302 = ptradd ptr %head, i32 %301
  302.load = load i32 from ptr %302
  305 = mul i32 %i255.phi, i32 4
  306 = ptradd ptr %tail, i32 %305
  306.load = load i32 from ptr %306
  call void radixSort(i32 %299, ptr %a, i32 %302.load, i32 %306.load)
  310 = add i32 %i255.phi, i32 1
  br bb %while.cond267
}

i32 getMaxNum(i32 n, ptr arr) {
entry:
  br bb %while.cond
while.cond:
  i.phi = phi [bb %entry, i32 0, bb %if.exit, i32 %24]
  ret.phi366 = phi [bb %entry, i32 0, bb %if.exit, i32 %ret.phi]
  9 = icmp slt i32 %i.phi, i32 %n
  10 = icmp ne i1 %9, i1 0
  br i1 %10, bb %while.body, bb %while.exit
while.body:
  12 = mul i32 %i.phi, i32 4
  13 = ptradd ptr %arr, i32 %12
  13.load = load i32 from ptr %13
  16 = icmp sgt i32 %13.load, i32 %ret.phi366
  br i1 %16, bb %then, bb %if.exit
while.exit:
  ret i32 %ret.phi366
then:
  20 = mul i32 %i.phi, i32 4
  21 = ptradd ptr %arr, i32 %20
  21.load = load i32 from ptr %21
  br bb %if.exit
if.exit:
  ret.phi = phi [bb %while.body, i32 %ret.phi366, bb %then, i32 %21.load]
  24 = add i32 %i.phi, i32 1
  br bb %while.cond
}

external void putfarray(i32 , ptr )


