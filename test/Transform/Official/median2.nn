global ptr a init with 10000000 x i32 zeros
global ptr n init with i32 0
i32 median(ptr arr, i32 begin, i32 end, i32 pos) {
entry50:
  56 = mul i32 %begin, i32 4
  57 = ptradd ptr %arr, i32 %56
  57.load = load i32 from ptr %57
  63 = add i32 %end, i32 1
  br bb %while.cond65
while.cond65:
  xx.phi171 = phi [bb %entry50, i32 0, bb %if.exit112, i32 %xx.phi]
  r.phi168 = phi [bb %entry50, i32 %63, bb %if.exit112, i32 %r.phi]
  l.phi164 = phi [bb %entry50, i32 %begin, bb %if.exit112, i32 %l.phi]
  br bb %while.body66
while.body66:
  br bb %while.cond70
while.exit67:
  xx.phi170 = phi [bb %while.cond65, i32 %xx.phi171, bb %then111, i32 %xx.phi]
  l.phi163 = phi [bb %while.cond65, i32 %l.phi164, bb %then111, i32 %l.phi]
  118 = mul i32 %begin, i32 4
  119 = ptradd ptr %arr, i32 %118
  store i32 %57.load to ptr %119
  123 = call i32 swap(ptr %arr, i32 %begin, i32 %l.phi163)
  126 = icmp sgt i32 %l.phi163, i32 %pos
  br i1 %126, bb %then127, bb %if.exit128
while.cond70:
  xx.phi172 = phi [bb %while.body66, i32 %xx.phi171, bb %if.exit, i32 %88]
  r.phi166 = phi [bb %while.body66, i32 %r.phi168, bb %if.exit, i32 %78]
  75 = icmp slt i32 %l.phi164, i32 %r.phi166
  76 = icmp ne i1 %75, i1 0
  br i1 %76, bb %while.body71, bb %while.exit72
while.body71:
  78 = sub i32 %r.phi166, i32 1
  80 = mul i32 %78, i32 4
  81 = ptradd ptr %arr, i32 %80
  81.load = load i32 from ptr %81
  84 = icmp slt i32 %81.load, i32 %57.load
  br i1 %84, bb %then, bb %if.exit
while.exit72:
  r.phi = phi [bb %while.cond70, i32 %r.phi166, bb %then, i32 %78]
  br bb %while.cond89
then:
  br bb %while.exit72
if.exit:
  88 = add i32 %xx.phi172, i32 1
  br bb %while.cond70
while.cond89:
  xx.phi = phi [bb %while.exit72, i32 %xx.phi172, bb %if.exit105, i32 %107]
  l.phi162 = phi [bb %while.exit72, i32 %l.phi164, bb %if.exit105, i32 %97]
  94 = icmp slt i32 %l.phi162, i32 %r.phi
  95 = icmp ne i1 %94, i1 0
  br i1 %95, bb %while.body90, bb %while.exit91
while.body90:
  97 = add i32 %l.phi162, i32 1
  99 = mul i32 %97, i32 4
  100 = ptradd ptr %arr, i32 %99
  100.load = load i32 from ptr %100
  103 = icmp sge i32 %100.load, i32 %57.load
  br i1 %103, bb %then104, bb %if.exit105
while.exit91:
  l.phi = phi [bb %while.cond89, i32 %l.phi162, bb %then104, i32 %97]
  110 = icmp eq i32 %l.phi, i32 %r.phi
  br i1 %110, bb %then111, bb %else
then104:
  br bb %while.exit91
if.exit105:
  107 = sub i32 %xx.phi, i32 1
  br bb %while.cond89
then111:
  br bb %while.exit67
if.exit112:
  br bb %while.cond65
else:
  116 = call i32 swap(ptr %arr, i32 %l.phi, i32 %r.phi)
  br bb %if.exit112
then127:
  132 = call i32 median(ptr %arr, i32 %begin, i32 %l.phi163, i32 %pos)
  ret i32 %132
if.exit128:
  135 = icmp slt i32 %l.phi163, i32 %pos
  br i1 %135, bb %then136, bb %if.exit137
then136:
  139 = add i32 %l.phi163, i32 1
  142 = call i32 median(ptr %arr, i32 %139, i32 %end, i32 %pos)
  ret i32 %142
if.exit137:
  ret i32 %xx.phi170
}

i32 swap(ptr arr, i32 l, i32 r) {
entry28:
  33 = mul i32 %l, i32 4
  34 = ptradd ptr %arr, i32 %33
  34.load = load i32 from ptr %34
  37 = mul i32 %l, i32 4
  38 = ptradd ptr %arr, i32 %37
  40 = mul i32 %r, i32 4
  41 = ptradd ptr %arr, i32 %40
  41.load = load i32 from ptr %41
  store i32 %41.load to ptr %38
  44 = mul i32 %r, i32 4
  45 = ptradd ptr %arr, i32 %44
  store i32 %34.load to ptr %45
  49 = call i32 meanless_calculation(i32 %l, i32 %r)
  ret i32 %49
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry144:
  145 = call i32 getarray(ptr @a)
  store i32 %145 to ptr @n
  call void _sysy_starttime(i32 59)
  n.load = load i32 from ptr @n
  148 = sub i32 %n.load, i32 1
  n.load149 = load i32 from ptr @n
  150 = sdiv i32 %n.load149, i32 2
  151 = call i32 median(ptr @a, i32 0, i32 %148, i32 %150)
  call void _sysy_stoptime(i32 61)
  n.load153 = load i32 from ptr @n
  call void putarray(i32 %n.load153, ptr @a)
  n.load155 = load i32 from ptr @n
  156 = sdiv i32 %n.load155, i32 2
  157 = mul i32 %156, i32 4
  158 = ptradd ptr @a, i32 %157
  158.load = load i32 from ptr %158
  160 = srem i32 %158.load, i32 256
  ret i32 %160
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

i32 meanless_calculation(i32 x, i32 y) {
entry:
  br bb %while.cond
while.cond:
  ret.phi = phi [bb %entry, i32 0, bb %while.body, i32 %26]
  i.phi = phi [bb %entry, i32 0, bb %while.body, i32 %21]
  10 = icmp slt i32 %i.phi, i32 %x
  br i1 %10, bb %select.then, bb %select.else
while.body:
  21 = add i32 %i.phi, i32 1
  24 = add i32 %ret.phi, i32 %x
  26 = add i32 %24, i32 %21
  br bb %while.cond
while.exit:
  ret i32 %ret.phi
select.then:
  17 = icmp slt i32 %i.phi, i32 %y
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %17]
  19 = icmp ne i1 %select.phi, i1 0
  br i1 %19, bb %while.body, bb %while.exit
}

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


