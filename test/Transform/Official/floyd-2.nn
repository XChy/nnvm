global ptr c init with 2097152 x i32 zeros
global ptr dst init with 2097152 x i32 zeros
global ptr w init with 2097152 x i32 zeros
global ptr temp init with 2097152 x i32 zeros
global ptr maxlen init with i32 2097152
void mem_move(ptr src, ptr dst, i32 n) {
entry43:
  %i = stack 4
  %n.stack44 = stack 4
  store i32 %n to ptr %n.stack44
  store i32 0 to ptr %i
  br bb %while.cond
while.cond:
  i.load = load i32 from ptr %i
  n.stack44.load = load i32 from ptr %n.stack44
  51 = icmp slt i32 %i.load, i32 %n.stack44.load
  52 = icmp ne i1 %51, i1 0
  br i1 %52, bb %while.body, bb %while.exit
while.body:
  i.load53 = load i32 from ptr %i
  54 = mul i32 %i.load53, i32 4
  55 = ptradd ptr %dst, i32 %54
  i.load56 = load i32 from ptr %i
  57 = mul i32 %i.load56, i32 4
  58 = ptradd ptr %src, i32 %57
  58.load = load i32 from ptr %58
  store i32 %58.load to ptr %55
  i.load60 = load i32 from ptr %i
  61 = add i32 %i.load60, i32 1
  store i32 %61 to ptr %i
  br bb %while.cond
while.exit:
  ret 
}

external i32 getint()

external i32 getch()

external void putint(i32 )

void floyd(ptr w, ptr dst, i32 n) {
entry62:
  %select126 = stack 1
  %j = stack 4
  %i102 = stack 4
  %i72 = stack 4
  %k = stack 4
  %n.stack63 = stack 4
  store i32 %n to ptr %n.stack63
  store i32 0 to ptr %k
  br bb %while.cond65
while.cond65:
  k.load = load i32 from ptr %k
  n.stack63.load = load i32 from ptr %n.stack63
  70 = icmp slt i32 %k.load, i32 %n.stack63.load
  71 = icmp ne i1 %70, i1 0
  br i1 %71, bb %while.body66, bb %while.exit67
while.body66:
  store i32 0 to ptr %i72
  br bb %while.cond73
while.exit67:
  store i32 0 to ptr %k
  br bb %while.cond95
while.cond73:
  i72.load = load i32 from ptr %i72
  n.stack63.load77 = load i32 from ptr %n.stack63
  78 = icmp slt i32 %i72.load, i32 %n.stack63.load77
  79 = icmp ne i1 %78, i1 0
  br i1 %79, bb %while.body74, bb %while.exit75
while.body74:
  i72.load80 = load i32 from ptr %i72
  n.stack63.load81 = load i32 from ptr %n.stack63
  82 = mul i32 %i72.load80, i32 %n.stack63.load81
  k.load83 = load i32 from ptr %k
  84 = add i32 %82, i32 %k.load83
  85 = mul i32 %84, i32 4
  86 = ptradd ptr @temp, i32 %85
  n.stack63.load87 = load i32 from ptr %n.stack63
  i72.load88 = load i32 from ptr %i72
  k.load89 = load i32 from ptr %k
  90 = call i32 getvalue(ptr %w, i32 %n.stack63.load87, i32 %i72.load88, i32 %k.load89)
  store i32 %90 to ptr %86
  i72.load91 = load i32 from ptr %i72
  92 = add i32 %i72.load91, i32 1
  store i32 %92 to ptr %i72
  br bb %while.cond73
while.exit75:
  k.load93 = load i32 from ptr %k
  94 = add i32 %k.load93, i32 1
  store i32 %94 to ptr %k
  br bb %while.cond65
while.cond95:
  k.load98 = load i32 from ptr %k
  n.stack63.load99 = load i32 from ptr %n.stack63
  100 = icmp slt i32 %k.load98, i32 %n.stack63.load99
  101 = icmp ne i1 %100, i1 0
  br i1 %101, bb %while.body96, bb %while.exit97
while.body96:
  store i32 0 to ptr %i102
  br bb %while.cond103
while.exit97:
  n.stack63.load201 = load i32 from ptr %n.stack63
  n.stack63.load202 = load i32 from ptr %n.stack63
  203 = mul i32 %n.stack63.load201, i32 %n.stack63.load202
  call void mem_move(ptr @temp, ptr %dst, i32 %203)
  ret 
while.cond103:
  i102.load = load i32 from ptr %i102
  n.stack63.load107 = load i32 from ptr %n.stack63
  108 = icmp slt i32 %i102.load, i32 %n.stack63.load107
  109 = icmp ne i1 %108, i1 0
  br i1 %109, bb %while.body104, bb %while.exit105
while.body104:
  store i32 0 to ptr %j
  br bb %while.cond111
while.exit105:
  k.load199 = load i32 from ptr %k
  200 = add i32 %k.load199, i32 1
  store i32 %200 to ptr %k
  br bb %while.cond95
while.cond111:
  j.load = load i32 from ptr %j
  n.stack63.load115 = load i32 from ptr %n.stack63
  116 = icmp slt i32 %j.load, i32 %n.stack63.load115
  117 = icmp ne i1 %116, i1 0
  br i1 %117, bb %while.body112, bb %while.exit113
while.body112:
  n.stack63.load118 = load i32 from ptr %n.stack63
  i102.load119 = load i32 from ptr %i102
  k.load120 = load i32 from ptr %k
  121 = call i32 getvalue(ptr @temp, i32 %n.stack63.load118, i32 %i102.load119, i32 %k.load120)
  122 = icmp sge i32 %121, i32 0
  br i1 %122, bb %select.then123, bb %select.else124
while.exit113:
  i102.load197 = load i32 from ptr %i102
  198 = add i32 %i102.load197, i32 1
  store i32 %198 to ptr %i102
  br bb %while.cond103
select.then123:
  n.stack63.load127 = load i32 from ptr %n.stack63
  k.load128 = load i32 from ptr %k
  j.load129 = load i32 from ptr %j
  130 = call i32 getvalue(ptr @temp, i32 %n.stack63.load127, i32 %k.load128, i32 %j.load129)
  131 = icmp sge i32 %130, i32 0
  store i1 %131 to ptr %select126
  br bb %select.exit125
select.else124:
  store i1 0 to ptr %select126
  br bb %select.exit125
select.exit125:
  132 = load i1 from ptr %select126
  br i1 %132, bb %then133, bb %if.exit134
then133:
  n.stack63.load135 = load i32 from ptr %n.stack63
  i102.load136 = load i32 from ptr %i102
  j.load137 = load i32 from ptr %j
  138 = call i32 getvalue(ptr @temp, i32 %n.stack63.load135, i32 %i102.load136, i32 %j.load137)
  139 = icmp slt i32 %138, i32 0
  br i1 %139, bb %then140, bb %else
if.exit134:
  j.load195 = load i32 from ptr %j
  196 = add i32 %j.load195, i32 1
  store i32 %196 to ptr %j
  br bb %while.cond111
then140:
  i102.load143 = load i32 from ptr %i102
  n.stack63.load144 = load i32 from ptr %n.stack63
  145 = mul i32 %i102.load143, i32 %n.stack63.load144
  j.load146 = load i32 from ptr %j
  147 = add i32 %145, i32 %j.load146
  148 = mul i32 %147, i32 4
  149 = ptradd ptr @temp, i32 %148
  n.stack63.load150 = load i32 from ptr %n.stack63
  i102.load151 = load i32 from ptr %i102
  k.load152 = load i32 from ptr %k
  153 = call i32 getvalue(ptr @temp, i32 %n.stack63.load150, i32 %i102.load151, i32 %k.load152)
  n.stack63.load154 = load i32 from ptr %n.stack63
  k.load155 = load i32 from ptr %k
  j.load156 = load i32 from ptr %j
  157 = call i32 getvalue(ptr @temp, i32 %n.stack63.load154, i32 %k.load155, i32 %j.load156)
  158 = add i32 %153, i32 %157
  store i32 %158 to ptr %149
  br bb %if.exit141
if.exit141:
  br bb %if.exit134
else:
  i102.load159 = load i32 from ptr %i102
  n.stack63.load160 = load i32 from ptr %n.stack63
  161 = mul i32 %i102.load159, i32 %n.stack63.load160
  j.load162 = load i32 from ptr %j
  163 = add i32 %161, i32 %j.load162
  164 = mul i32 %163, i32 4
  165 = ptradd ptr @temp, i32 %164
  165.load = load i32 from ptr %165
  n.stack63.load167 = load i32 from ptr %n.stack63
  i102.load168 = load i32 from ptr %i102
  k.load169 = load i32 from ptr %k
  170 = call i32 getvalue(ptr @temp, i32 %n.stack63.load167, i32 %i102.load168, i32 %k.load169)
  n.stack63.load171 = load i32 from ptr %n.stack63
  k.load172 = load i32 from ptr %k
  j.load173 = load i32 from ptr %j
  174 = call i32 getvalue(ptr @temp, i32 %n.stack63.load171, i32 %k.load172, i32 %j.load173)
  175 = add i32 %170, i32 %174
  176 = icmp sgt i32 %165.load, i32 %175
  br i1 %176, bb %then177, bb %if.exit178
then177:
  i102.load179 = load i32 from ptr %i102
  n.stack63.load180 = load i32 from ptr %n.stack63
  181 = mul i32 %i102.load179, i32 %n.stack63.load180
  j.load182 = load i32 from ptr %j
  183 = add i32 %181, i32 %j.load182
  184 = mul i32 %183, i32 4
  185 = ptradd ptr @temp, i32 %184
  n.stack63.load186 = load i32 from ptr %n.stack63
  i102.load187 = load i32 from ptr %i102
  k.load188 = load i32 from ptr %k
  189 = call i32 getvalue(ptr @temp, i32 %n.stack63.load186, i32 %i102.load187, i32 %k.load188)
  n.stack63.load190 = load i32 from ptr %n.stack63
  k.load191 = load i32 from ptr %k
  j.load192 = load i32 from ptr %j
  193 = call i32 getvalue(ptr @temp, i32 %n.stack63.load190, i32 %k.load191, i32 %j.load192)
  194 = add i32 %189, i32 %193
  store i32 %194 to ptr %185
  br bb %if.exit178
if.exit178:
  br bb %if.exit141
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry205:
  %n = stack 4
  207 = call i32 getint()
  store i32 %207 to ptr %n
  208 = call i32 getarray(ptr @w)
  call void _sysy_starttime(i32 62)
  n.load = load i32 from ptr %n
  call void floyd(ptr @w, ptr @dst, i32 %n.load)
  call void _sysy_stoptime(i32 64)
  n.load213 = load i32 from ptr %n
  n.load214 = load i32 from ptr %n
  215 = mul i32 %n.load213, i32 %n.load214
  call void putarray(i32 %215, ptr @dst)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 getvalue(ptr a, i32 n, i32 i, i32 j) {
entry:
  %select26 = stack 1
  %select18 = stack 1
  %select = stack 1
  %j.stack = stack 4
  %i.stack = stack 4
  %n.stack = stack 4
  store i32 %n to ptr %n.stack
  store i32 %i to ptr %i.stack
  store i32 %j to ptr %j.stack
  i.stack.load = load i32 from ptr %i.stack
  5 = icmp slt i32 %i.stack.load, i32 0
  br i1 %5, bb %select.then, bb %select.else
select.then:
  store i1 1 to ptr %select
  br bb %select.exit
select.else:
  i.stack.load10 = load i32 from ptr %i.stack
  n.stack.load = load i32 from ptr %n.stack
  12 = icmp sge i32 %i.stack.load10, i32 %n.stack.load
  13 = icmp ne i1 %12, i1 0
  store i1 %13 to ptr %select
  br bb %select.exit
select.exit:
  14 = load i1 from ptr %select
  br i1 %14, bb %select.then15, bb %select.else16
select.then15:
  store i1 1 to ptr %select18
  br bb %select.exit17
select.else16:
  j.stack.load = load i32 from ptr %j.stack
  20 = icmp slt i32 %j.stack.load, i32 0
  21 = icmp ne i1 %20, i1 0
  store i1 %21 to ptr %select18
  br bb %select.exit17
select.exit17:
  22 = load i1 from ptr %select18
  br i1 %22, bb %select.then23, bb %select.else24
select.then23:
  store i1 1 to ptr %select26
  br bb %select.exit25
select.else24:
  j.stack.load27 = load i32 from ptr %j.stack
  n.stack.load28 = load i32 from ptr %n.stack
  29 = icmp sge i32 %j.stack.load27, i32 %n.stack.load28
  30 = icmp ne i1 %29, i1 0
  store i1 %30 to ptr %select26
  br bb %select.exit25
select.exit25:
  31 = load i1 from ptr %select26
  br i1 %31, bb %then, bb %if.exit
then:
  34 = sub i32 0, i32 1
  ret i32 %34
if.exit:
  i.stack.load35 = load i32 from ptr %i.stack
  n.stack.load36 = load i32 from ptr %n.stack
  37 = mul i32 %i.stack.load35, i32 %n.stack.load36
  j.stack.load38 = load i32 from ptr %j.stack
  39 = add i32 %37, i32 %j.stack.load38
  40 = mul i32 %39, i32 4
  41 = ptradd ptr %a, i32 %40
  41.load = load i32 from ptr %41
  ret i32 %41.load
}


