global ptr my_y2 init with 138240 x float zeros
global ptr imgOut init with 138240 x float zeros
global ptr my_y1 init with 138240 x float zeros
global ptr imgIn init with 138240 x float zeros
global ptr alpha init with float 0.250000
global ptr h init with i32 270
global ptr w init with i32 512
void kernel_deriche(i32 w, i32 h, float alpha, ptr imgIn, ptr imgOut, ptr y1, ptr y2) {
entry59:
  89 = fneg float %alpha
  90 = call float newExp(float %89)
  91 = fsub float 1.000000, float %90
  94 = call float newExp(float %89)
  95 = fsub float 1.000000, float %94
  96 = fmul float %91, float %95
  98 = fmul float 2.000000, float %alpha
  101 = call float newExp(float %89)
  102 = fmul float %98, float %101
  103 = fadd float 1.000000, float %102
  106 = call float newExp(float %98)
  107 = fsub float %103, float %106
  108 = fdiv float %96, float %107
  114 = call float newExp(float %89)
  115 = fmul float %108, float %114
  117 = fsub float %alpha, float 1.000000
  118 = fmul float %115, float %117
  123 = call float newExp(float %89)
  124 = fmul float %108, float %123
  126 = fadd float %alpha, float 1.000000
  127 = fmul float %124, float %126
  130 = fneg float %108
  131 = fneg float 2.000000
  133 = fmul float %131, float %alpha
  134 = call float newExp(float %133)
  135 = fmul float %130, float %134
  139 = f2si float %89 to i32
  140 = call float newPow(float 2.000000, i32 %139)
  144 = call float newExp(float %133)
  145 = fneg float %144
  146 = si2f i32 1 to float
  br bb %while.cond
while.cond:
  i.phi481 = phi [bb %entry59, i32 0, bb %while.exit157, i32 %207]
  153 = icmp slt i32 %i.phi481, i32 %w
  br i1 %153, bb %while.body, bb %while.exit
while.body:
  br bb %while.cond155
while.exit:
  br bb %while.cond208
while.cond155:
  ym2.phi502 = phi [bb %while.body, float 0.000000, bb %while.body156, float %ym1.phi498]
  ym1.phi498 = phi [bb %while.body, float 0.000000, bb %while.body156, float %202.load]
  xm1.phi = phi [bb %while.body, float 0.000000, bb %while.body156, float %194.load]
  j.phi490 = phi [bb %while.body, i32 0, bb %while.body156, i32 %205]
  160 = icmp slt i32 %j.phi490, i32 %h
  br i1 %160, bb %while.body156, bb %while.exit157
while.body156:
  163 = mul i32 %i.phi481, i32 1080
  164 = ptradd ptr %y1, i32 %163
  166 = mul i32 %j.phi490, i32 4
  167 = ptradd ptr %164, i32 %166
  171 = ptradd ptr %imgIn, i32 %163
  174 = ptradd ptr %171, i32 %166
  174.load = load float from ptr %174
  176 = fmul float %108, float %174.load
  179 = fmul float %118, float %xm1.phi
  180 = fadd float %176, float %179
  183 = fmul float %140, float %ym1.phi498
  184 = fadd float %180, float %183
  187 = fmul float %145, float %ym2.phi502
  188 = fadd float %184, float %187
  store float %188 to ptr %167
  194.load = load float from ptr %174
  202.load = load float from ptr %167
  205 = add i32 %j.phi490, i32 1
  br bb %while.cond155
while.exit157:
  207 = add i32 %i.phi481, i32 1
  br bb %while.cond
while.cond208:
  i.phi480 = phi [bb %while.exit, i32 0, bb %while.exit219, i32 %263]
  213 = icmp slt i32 %i.phi480, i32 %w
  br i1 %213, bb %while.body209, bb %while.exit210
while.body209:
  216 = sub i32 %h, i32 1
  br bb %while.cond217
while.exit210:
  br bb %while.cond264
while.cond217:
  yp1.phi514 = phi [bb %while.body209, float 0.000000, bb %while.body218, float %258.load]
  yp2.phi510 = phi [bb %while.body209, float 0.000000, bb %while.body218, float %yp1.phi514]
  xp1.phi = phi [bb %while.body209, float 0.000000, bb %while.body218, float %250.load]
  xp2.phi = phi [bb %while.body209, float 0.000000, bb %while.body218, float %xp1.phi]
  j.phi488 = phi [bb %while.body209, i32 %216, bb %while.body218, i32 %261]
  221 = icmp sge i32 %j.phi488, i32 0
  br i1 %221, bb %while.body218, bb %while.exit219
while.body218:
  224 = mul i32 %i.phi480, i32 1080
  225 = ptradd ptr %y2, i32 %224
  227 = mul i32 %j.phi488, i32 4
  228 = ptradd ptr %225, i32 %227
  231 = fmul float %127, float %xp1.phi
  234 = fmul float %135, float %xp2.phi
  235 = fadd float %231, float %234
  238 = fmul float %140, float %yp1.phi514
  239 = fadd float %235, float %238
  242 = fmul float %145, float %yp2.phi510
  243 = fadd float %239, float %242
  store float %243 to ptr %228
  247 = ptradd ptr %imgIn, i32 %224
  250 = ptradd ptr %247, i32 %227
  250.load = load float from ptr %250
  258.load = load float from ptr %228
  261 = sub i32 %j.phi488, i32 1
  br bb %while.cond217
while.exit219:
  263 = add i32 %i.phi480, i32 1
  br bb %while.cond208
while.cond264:
  i.phi479 = phi [bb %while.exit210, i32 0, bb %while.exit273, i32 %304]
  269 = icmp slt i32 %i.phi479, i32 %w
  br i1 %269, bb %while.body265, bb %while.exit266
while.body265:
  br bb %while.cond271
while.exit266:
  br bb %while.cond305
while.cond271:
  j.phi486 = phi [bb %while.body265, i32 0, bb %while.body272, i32 %302]
  276 = icmp slt i32 %j.phi486, i32 %h
  br i1 %276, bb %while.body272, bb %while.exit273
while.body272:
  279 = mul i32 %i.phi479, i32 1080
  280 = ptradd ptr %imgOut, i32 %279
  282 = mul i32 %j.phi486, i32 4
  283 = ptradd ptr %280, i32 %282
  287 = ptradd ptr %y1, i32 %279
  290 = ptradd ptr %287, i32 %282
  290.load = load float from ptr %290
  294 = ptradd ptr %y2, i32 %279
  297 = ptradd ptr %294, i32 %282
  297.load = load float from ptr %297
  299 = fadd float %290.load, float %297.load
  300 = fmul float %146, float %299
  store float %300 to ptr %283
  302 = add i32 %j.phi486, i32 1
  br bb %while.cond271
while.exit273:
  304 = add i32 %i.phi479, i32 1
  br bb %while.cond264
while.cond305:
  j.phi485 = phi [bb %while.exit266, i32 0, bb %while.exit314, i32 %364]
  310 = icmp slt i32 %j.phi485, i32 %h
  br i1 %310, bb %while.body306, bb %while.exit307
while.body306:
  br bb %while.cond312
while.exit307:
  br bb %while.cond365
while.cond312:
  ym2.phi = phi [bb %while.body306, float 0.000000, bb %while.body313, float %ym1.phi]
  ym1.phi = phi [bb %while.body306, float 0.000000, bb %while.body313, float %359.load]
  tm1.phi = phi [bb %while.body306, float 0.000000, bb %while.body313, float %351.load]
  i.phi477 = phi [bb %while.body306, i32 0, bb %while.body313, i32 %362]
  317 = icmp slt i32 %i.phi477, i32 %w
  br i1 %317, bb %while.body313, bb %while.exit314
while.body313:
  320 = mul i32 %i.phi477, i32 1080
  321 = ptradd ptr %y1, i32 %320
  323 = mul i32 %j.phi485, i32 4
  324 = ptradd ptr %321, i32 %323
  328 = ptradd ptr %imgOut, i32 %320
  331 = ptradd ptr %328, i32 %323
  331.load = load float from ptr %331
  333 = fmul float %108, float %331.load
  336 = fmul float %118, float %tm1.phi
  337 = fadd float %333, float %336
  340 = fmul float %140, float %ym1.phi
  341 = fadd float %337, float %340
  344 = fmul float %145, float %ym2.phi
  345 = fadd float %341, float %344
  store float %345 to ptr %324
  351.load = load float from ptr %331
  359.load = load float from ptr %324
  362 = add i32 %i.phi477, i32 1
  br bb %while.cond312
while.exit314:
  364 = add i32 %j.phi485, i32 1
  br bb %while.cond305
while.cond365:
  j.phi484 = phi [bb %while.exit307, i32 0, bb %while.exit376, i32 %420]
  370 = icmp slt i32 %j.phi484, i32 %h
  br i1 %370, bb %while.body366, bb %while.exit367
while.body366:
  373 = sub i32 %w, i32 1
  br bb %while.cond374
while.exit367:
  br bb %while.cond421
while.cond374:
  tp1.phi = phi [bb %while.body366, float 0.000000, bb %while.body375, float %407.load]
  tp2.phi = phi [bb %while.body366, float 0.000000, bb %while.body375, float %tp1.phi]
  yp1.phi = phi [bb %while.body366, float 0.000000, bb %while.body375, float %415.load]
  yp2.phi = phi [bb %while.body366, float 0.000000, bb %while.body375, float %yp1.phi]
  i.phi475 = phi [bb %while.body366, i32 %373, bb %while.body375, i32 %418]
  378 = icmp sge i32 %i.phi475, i32 0
  br i1 %378, bb %while.body375, bb %while.exit376
while.body375:
  381 = mul i32 %i.phi475, i32 1080
  382 = ptradd ptr %y2, i32 %381
  384 = mul i32 %j.phi484, i32 4
  385 = ptradd ptr %382, i32 %384
  388 = fmul float %127, float %tp1.phi
  391 = fmul float %135, float %tp2.phi
  392 = fadd float %388, float %391
  395 = fmul float %140, float %yp1.phi
  396 = fadd float %392, float %395
  399 = fmul float %145, float %yp2.phi
  400 = fadd float %396, float %399
  store float %400 to ptr %385
  404 = ptradd ptr %imgOut, i32 %381
  407 = ptradd ptr %404, i32 %384
  407.load = load float from ptr %407
  415.load = load float from ptr %385
  418 = sub i32 %i.phi475, i32 1
  br bb %while.cond374
while.exit376:
  420 = add i32 %j.phi484, i32 1
  br bb %while.cond365
while.cond421:
  i.phi = phi [bb %while.exit367, i32 0, bb %while.exit430, i32 %461]
  426 = icmp slt i32 %i.phi, i32 %w
  br i1 %426, bb %while.body422, bb %while.exit423
while.body422:
  br bb %while.cond428
while.exit423:
  ret 
while.cond428:
  j.phi = phi [bb %while.body422, i32 0, bb %while.body429, i32 %459]
  433 = icmp slt i32 %j.phi, i32 %h
  br i1 %433, bb %while.body429, bb %while.exit430
while.body429:
  436 = mul i32 %i.phi, i32 1080
  437 = ptradd ptr %imgOut, i32 %436
  439 = mul i32 %j.phi, i32 4
  440 = ptradd ptr %437, i32 %439
  444 = ptradd ptr %y1, i32 %436
  447 = ptradd ptr %444, i32 %439
  447.load = load float from ptr %447
  451 = ptradd ptr %y2, i32 %436
  454 = ptradd ptr %451, i32 %439
  454.load = load float from ptr %454
  456 = fadd float %447.load, float %454.load
  457 = fmul float %146, float %456
  store float %457 to ptr %440
  459 = add i32 %j.phi, i32 1
  br bb %while.cond428
while.exit430:
  461 = add i32 %i.phi, i32 1
  br bb %while.cond421
}

float newPow(float num, i32 n) {
entry31:
  35 = icmp slt i32 %n, i32 0
  br i1 %35, bb %then, bb %else
then:
  41 = sub i32 0, i32 %n
  42 = call float newPow(float %num, i32 %41)
  43 = fdiv float 1.000000, float %42
  ret float %43
if.exit:
  unreachable
else:
  45 = icmp eq i32 %n, i32 0
  br i1 %45, bb %then46, bb %else48
then46:
  ret float 1.000000
else48:
  50 = icmp sgt i32 %n, i32 0
  br i1 %50, bb %then51, bb %if.exit52
then51:
  56 = sub i32 %n, i32 1
  57 = call float newPow(float %num, i32 %56)
  58 = fmul float %num, float %57
  ret float %58
if.exit52:
  br bb %if.exit
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry462:
  463 = call i32 getfarray(ptr @imgIn)
  call void _sysy_starttime(i32 156)
  w.load = load i32 from ptr @w
  h.load = load i32 from ptr @h
  alpha.load = load float from ptr @alpha
  call void kernel_deriche(i32 %w.load, i32 %h.load, float %alpha.load, ptr @imgIn, ptr @imgOut, ptr @my_y1, ptr @my_y2)
  call void _sysy_stoptime(i32 158)
  w.load470 = load i32 from ptr @w
  h.load471 = load i32 from ptr @h
  472 = mul i32 %w.load470, i32 %h.load471
  call void putfarray(i32 %472, ptr @imgOut)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void putfarray(i32 , ptr )

external void _sysy_starttime(i32 )

float newExp(float x) {
entry:
  3 = si2f i32 256 to float
  4 = fdiv float %x, float %3
  5 = fadd float 1.000000, float %4
  8 = fmul float %5, float %5
  11 = fmul float %8, float %8
  14 = fmul float %11, float %11
  17 = fmul float %14, float %14
  20 = fmul float %17, float %17
  23 = fmul float %20, float %20
  26 = fmul float %23, float %23
  29 = fmul float %26, float %26
  ret float %29
}


