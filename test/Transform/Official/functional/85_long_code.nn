global ptr n init with i32 0
i32 avgPooling(ptr arr, i32 stride) {
entry377:
  %lastnum = stack 4
  %i380 = stack 4
  %sum379 = stack 4
  %stride.stack378 = stack 4
  store i32 %stride to ptr %stride.stack378
  store i32 0 to ptr %i380
  store i32 0 to ptr %sum379
  br bb %while.cond382
while.cond382:
  i380.load = load i32 from ptr %i380
  n.load386 = load i32 from ptr @n
  387 = icmp slt i32 %i380.load, i32 %n.load386
  388 = icmp ne i1 %387, i1 0
  br i1 %388, bb %while.body383, bb %while.exit384
while.body383:
  i380.load389 = load i32 from ptr %i380
  stride.stack378.load = load i32 from ptr %stride.stack378
  391 = sub i32 %stride.stack378.load, i32 1
  392 = icmp slt i32 %i380.load389, i32 %391
  br i1 %392, bb %then393, bb %else395
while.exit384:
  n.load443 = load i32 from ptr @n
  stride.stack378.load444 = load i32 from ptr %stride.stack378
  445 = sub i32 %n.load443, i32 %stride.stack378.load444
  446 = add i32 %445, i32 1
  store i32 %446 to ptr %i380
  br bb %while.cond447
then393:
  sum379.load = load i32 from ptr %sum379
  i380.load397 = load i32 from ptr %i380
  398 = mul i32 %i380.load397, i32 4
  399 = ptradd ptr %arr, i32 %398
  399.load = load i32 from ptr %399
  401 = add i32 %sum379.load, i32 %399.load
  store i32 %401 to ptr %sum379
  br bb %if.exit394
if.exit394:
  i380.load441 = load i32 from ptr %i380
  442 = add i32 %i380.load441, i32 1
  store i32 %442 to ptr %i380
  br bb %while.cond382
else395:
  i380.load402 = load i32 from ptr %i380
  stride.stack378.load403 = load i32 from ptr %stride.stack378
  404 = sub i32 %stride.stack378.load403, i32 1
  405 = icmp eq i32 %i380.load402, i32 %404
  br i1 %405, bb %then406, bb %else408
then406:
  409 = mul i32 0, i32 4
  410 = ptradd ptr %arr, i32 %409
  410.load = load i32 from ptr %410
  store i32 %410.load to ptr %lastnum
  412 = mul i32 0, i32 4
  413 = ptradd ptr %arr, i32 %412
  sum379.load414 = load i32 from ptr %sum379
  stride.stack378.load415 = load i32 from ptr %stride.stack378
  416 = sdiv i32 %sum379.load414, i32 %stride.stack378.load415
  store i32 %416 to ptr %413
  br bb %if.exit407
if.exit407:
  br bb %if.exit394
else408:
  sum379.load417 = load i32 from ptr %sum379
  i380.load418 = load i32 from ptr %i380
  419 = mul i32 %i380.load418, i32 4
  420 = ptradd ptr %arr, i32 %419
  420.load = load i32 from ptr %420
  422 = add i32 %sum379.load417, i32 %420.load
  lastnum.load = load i32 from ptr %lastnum
  424 = sub i32 %422, i32 %lastnum.load
  store i32 %424 to ptr %sum379
  i380.load425 = load i32 from ptr %i380
  stride.stack378.load426 = load i32 from ptr %stride.stack378
  427 = sub i32 %i380.load425, i32 %stride.stack378.load426
  428 = add i32 %427, i32 1
  429 = mul i32 %428, i32 4
  430 = ptradd ptr %arr, i32 %429
  430.load = load i32 from ptr %430
  store i32 %430.load to ptr %lastnum
  i380.load432 = load i32 from ptr %i380
  stride.stack378.load433 = load i32 from ptr %stride.stack378
  434 = sub i32 %i380.load432, i32 %stride.stack378.load433
  435 = add i32 %434, i32 1
  436 = mul i32 %435, i32 4
  437 = ptradd ptr %arr, i32 %436
  stride.stack378.load439 = load i32 from ptr %stride.stack378
  440 = sdiv i32 %424, i32 %stride.stack378.load439
  store i32 %440 to ptr %437
  br bb %if.exit407
while.cond447:
  i380.load450 = load i32 from ptr %i380
  n.load451 = load i32 from ptr @n
  452 = icmp slt i32 %i380.load450, i32 %n.load451
  453 = icmp ne i1 %452, i1 0
  br i1 %453, bb %while.body448, bb %while.exit449
while.body448:
  i380.load454 = load i32 from ptr %i380
  455 = mul i32 %i380.load454, i32 4
  456 = ptradd ptr %arr, i32 %455
  store i32 0 to ptr %456
  i380.load457 = load i32 from ptr %i380
  458 = add i32 %i380.load457, i32 1
  store i32 %458 to ptr %i380
  br bb %while.cond447
while.exit449:
  ret i32 0
}

i32 arrCopy(ptr src, ptr target) {
entry324:
  %i325 = stack 4
  store i32 0 to ptr %i325
  br bb %while.cond326
while.cond326:
  i325.load = load i32 from ptr %i325
  n.load330 = load i32 from ptr @n
  331 = icmp slt i32 %i325.load, i32 %n.load330
  332 = icmp ne i1 %331, i1 0
  br i1 %332, bb %while.body327, bb %while.exit328
while.body327:
  i325.load333 = load i32 from ptr %i325
  334 = mul i32 %i325.load333, i32 4
  335 = ptradd ptr %target, i32 %334
  i325.load336 = load i32 from ptr %i325
  337 = mul i32 %i325.load336, i32 4
  338 = ptradd ptr %src, i32 %337
  338.load = load i32 from ptr %338
  store i32 %338.load to ptr %335
  i325.load340 = load i32 from ptr %i325
  341 = add i32 %i325.load340, i32 1
  store i32 %341 to ptr %i325
  br bb %while.cond326
while.exit328:
  ret i32 0
}

i32 getMost(ptr arr) {
entry242:
  %num = stack 4
  %number = stack 4
  %max = stack 4
  %i244 = stack 4
  %count = stack 4000
  store i32 0 to ptr %i244
  br bb %while.cond245
while.cond245:
  i244.load = load i32 from ptr %i244
  249 = icmp slt i32 %i244.load, i32 1000
  250 = icmp ne i1 %249, i1 0
  br i1 %250, bb %while.body246, bb %while.exit247
while.body246:
  i244.load251 = load i32 from ptr %i244
  252 = mul i32 %i244.load251, i32 4
  253 = ptradd ptr %count, i32 %252
  store i32 0 to ptr %253
  i244.load254 = load i32 from ptr %i244
  255 = add i32 %i244.load254, i32 1
  store i32 %255 to ptr %i244
  br bb %while.cond245
while.exit247:
  store i32 0 to ptr %i244
  store i32 0 to ptr %max
  br bb %while.cond258
while.cond258:
  i244.load261 = load i32 from ptr %i244
  n.load262 = load i32 from ptr @n
  263 = icmp slt i32 %i244.load261, i32 %n.load262
  264 = icmp ne i1 %263, i1 0
  br i1 %264, bb %while.body259, bb %while.exit260
while.body259:
  i244.load266 = load i32 from ptr %i244
  267 = mul i32 %i244.load266, i32 4
  268 = ptradd ptr %arr, i32 %267
  268.load = load i32 from ptr %268
  store i32 %268.load to ptr %num
  271 = mul i32 %268.load, i32 4
  272 = ptradd ptr %count, i32 %271
  274 = mul i32 %268.load, i32 4
  275 = ptradd ptr %count, i32 %274
  275.load = load i32 from ptr %275
  277 = add i32 %275.load, i32 1
  store i32 %277 to ptr %272
  279 = mul i32 %268.load, i32 4
  280 = ptradd ptr %count, i32 %279
  280.load = load i32 from ptr %280
  max.load = load i32 from ptr %max
  283 = icmp sgt i32 %280.load, i32 %max.load
  br i1 %283, bb %then284, bb %if.exit285
while.exit260:
  number.load = load i32 from ptr %number
  ret i32 %number.load
then284:
  num.load286 = load i32 from ptr %num
  287 = mul i32 %num.load286, i32 4
  288 = ptradd ptr %count, i32 %287
  288.load = load i32 from ptr %288
  store i32 %288.load to ptr %max
  num.load290 = load i32 from ptr %num
  store i32 %num.load290 to ptr %number
  br bb %if.exit285
if.exit285:
  i244.load291 = load i32 from ptr %i244
  292 = add i32 %i244.load291, i32 1
  store i32 %292 to ptr %i244
  br bb %while.cond258
}

i32 getMid(ptr arr) {
entry215:
  %mid = stack 4
  n.load217 = load i32 from ptr @n
  218 = srem i32 %n.load217, i32 2
  219 = icmp eq i32 %218, i32 0
  br i1 %219, bb %then220, bb %else
then220:
  n.load223 = load i32 from ptr @n
  224 = sdiv i32 %n.load223, i32 2
  store i32 %224 to ptr %mid
  226 = mul i32 %224, i32 4
  227 = ptradd ptr %arr, i32 %226
  227.load = load i32 from ptr %227
  230 = sub i32 %224, i32 1
  231 = mul i32 %230, i32 4
  232 = ptradd ptr %arr, i32 %231
  232.load = load i32 from ptr %232
  234 = add i32 %227.load, i32 %232.load
  235 = sdiv i32 %234, i32 2
  ret i32 %235
if.exit221:
  unreachable
else:
  n.load236 = load i32 from ptr @n
  237 = sdiv i32 %n.load236, i32 2
  store i32 %237 to ptr %mid
  239 = mul i32 %237, i32 4
  240 = ptradd ptr %arr, i32 %239
  240.load = load i32 from ptr %240
  ret i32 %240.load
}

i32 insertsort(ptr a) {
entry55:
  %select = stack 1
  %j69 = stack 4
  %temp = stack 4
  %i56 = stack 4
  store i32 1 to ptr %i56
  br bb %while.cond57
while.cond57:
  i56.load = load i32 from ptr %i56
  n.load61 = load i32 from ptr @n
  62 = icmp slt i32 %i56.load, i32 %n.load61
  63 = icmp ne i1 %62, i1 0
  br i1 %63, bb %while.body58, bb %while.exit59
while.body58:
  i56.load65 = load i32 from ptr %i56
  66 = mul i32 %i56.load65, i32 4
  67 = ptradd ptr %a, i32 %66
  67.load = load i32 from ptr %67
  store i32 %67.load to ptr %temp
  i56.load70 = load i32 from ptr %i56
  71 = sub i32 %i56.load70, i32 1
  store i32 %71 to ptr %j69
  br bb %while.cond72
while.exit59:
  ret i32 0
while.cond72:
  j69.load = load i32 from ptr %j69
  76 = sub i32 0, i32 1
  77 = icmp sgt i32 %j69.load, i32 %76
  br i1 %77, bb %select.then, bb %select.else
while.body73:
  j69.load90 = load i32 from ptr %j69
  91 = add i32 %j69.load90, i32 1
  92 = mul i32 %91, i32 4
  93 = ptradd ptr %a, i32 %92
  j69.load94 = load i32 from ptr %j69
  95 = mul i32 %j69.load94, i32 4
  96 = ptradd ptr %a, i32 %95
  96.load = load i32 from ptr %96
  store i32 %96.load to ptr %93
  j69.load98 = load i32 from ptr %j69
  99 = sub i32 %j69.load98, i32 1
  store i32 %99 to ptr %j69
  br bb %while.cond72
while.exit74:
  j69.load100 = load i32 from ptr %j69
  101 = add i32 %j69.load100, i32 1
  102 = mul i32 %101, i32 4
  103 = ptradd ptr %a, i32 %102
  temp.load104 = load i32 from ptr %temp
  store i32 %temp.load104 to ptr %103
  i56.load105 = load i32 from ptr %i56
  106 = add i32 %i56.load105, i32 1
  store i32 %106 to ptr %i56
  br bb %while.cond57
select.then:
  temp.load = load i32 from ptr %temp
  j69.load83 = load i32 from ptr %j69
  84 = mul i32 %j69.load83, i32 4
  85 = ptradd ptr %a, i32 %84
  85.load = load i32 from ptr %85
  87 = icmp slt i32 %temp.load, i32 %85.load
  store i1 %87 to ptr %select
  br bb %select.exit
select.else:
  store i1 0 to ptr %select
  br bb %select.exit
select.exit:
  88 = load i1 from ptr %select
  89 = icmp ne i1 %88, i1 0
  br i1 %89, bb %while.body73, bb %while.exit74
}

i32 revert(ptr arr) {
entry294:
  %j297 = stack 4
  %i296 = stack 4
  %temp295 = stack 4
  store i32 0 to ptr %i296
  store i32 0 to ptr %j297
  br bb %while.cond298
while.cond298:
  i296.load = load i32 from ptr %i296
  j297.load = load i32 from ptr %j297
  303 = icmp slt i32 %i296.load, i32 %j297.load
  304 = icmp ne i1 %303, i1 0
  br i1 %304, bb %while.body299, bb %while.exit300
while.body299:
  i296.load305 = load i32 from ptr %i296
  306 = mul i32 %i296.load305, i32 4
  307 = ptradd ptr %arr, i32 %306
  307.load = load i32 from ptr %307
  store i32 %307.load to ptr %temp295
  i296.load309 = load i32 from ptr %i296
  310 = mul i32 %i296.load309, i32 4
  311 = ptradd ptr %arr, i32 %310
  j297.load312 = load i32 from ptr %j297
  313 = mul i32 %j297.load312, i32 4
  314 = ptradd ptr %arr, i32 %313
  314.load = load i32 from ptr %314
  store i32 %314.load to ptr %311
  j297.load316 = load i32 from ptr %j297
  317 = mul i32 %j297.load316, i32 4
  318 = ptradd ptr %arr, i32 %317
  store i32 %307.load to ptr %318
  i296.load320 = load i32 from ptr %i296
  321 = add i32 %i296.load320, i32 1
  store i32 %321 to ptr %i296
  j297.load322 = load i32 from ptr %j297
  323 = sub i32 %j297.load322, i32 1
  store i32 %323 to ptr %j297
  br bb %while.cond298
while.exit300:
  ret i32 0
}

external i32 getint()

external i32 getch()

external void putint(i32 )

i32 QuickSort(ptr arr, i32 low, i32 high) {
entry107:
  %tmp204 = stack 4
  %select175 = stack 1
  %select140 = stack 1
  %k = stack 4
  %j117 = stack 4
  %i115 = stack 4
  %high.stack = stack 4
  %low.stack = stack 4
  store i32 %low to ptr %low.stack
  store i32 %high to ptr %high.stack
  112 = icmp slt i32 %low, i32 %high
  br i1 %112, bb %then113, bb %if.exit114
then113:
  low.stack.load116 = load i32 from ptr %low.stack
  store i32 %low.stack.load116 to ptr %i115
  high.stack.load118 = load i32 from ptr %high.stack
  store i32 %high.stack.load118 to ptr %j117
  low.stack.load120 = load i32 from ptr %low.stack
  121 = mul i32 %low.stack.load120, i32 4
  122 = ptradd ptr %arr, i32 %121
  122.load = load i32 from ptr %122
  store i32 %122.load to ptr %k
  br bb %while.cond124
if.exit114:
  ret i32 0
while.cond124:
  i115.load = load i32 from ptr %i115
  j117.load = load i32 from ptr %j117
  129 = icmp slt i32 %i115.load, i32 %j117.load
  130 = icmp ne i1 %129, i1 0
  br i1 %130, bb %while.body125, bb %while.exit126
while.body125:
  br bb %while.cond131
while.exit126:
  i115.load200 = load i32 from ptr %i115
  201 = mul i32 %i115.load200, i32 4
  202 = ptradd ptr %arr, i32 %201
  k.load203 = load i32 from ptr %k
  store i32 %k.load203 to ptr %202
  i115.load205 = load i32 from ptr %i115
  206 = sub i32 %i115.load205, i32 1
  store i32 %206 to ptr %tmp204
  low.stack.load207 = load i32 from ptr %low.stack
  209 = call i32 QuickSort(ptr %arr, i32 %low.stack.load207, i32 %206)
  store i32 %209 to ptr %tmp204
  i115.load210 = load i32 from ptr %i115
  211 = add i32 %i115.load210, i32 1
  store i32 %211 to ptr %tmp204
  high.stack.load213 = load i32 from ptr %high.stack
  214 = call i32 QuickSort(ptr %arr, i32 %211, i32 %high.stack.load213)
  store i32 %214 to ptr %tmp204
  br bb %if.exit114
while.cond131:
  i115.load134 = load i32 from ptr %i115
  j117.load135 = load i32 from ptr %j117
  136 = icmp slt i32 %i115.load134, i32 %j117.load135
  br i1 %136, bb %select.then137, bb %select.else138
while.body132:
  j117.load150 = load i32 from ptr %j117
  151 = sub i32 %j117.load150, i32 1
  store i32 %151 to ptr %j117
  br bb %while.cond131
while.exit133:
  i115.load152 = load i32 from ptr %i115
  j117.load153 = load i32 from ptr %j117
  154 = icmp slt i32 %i115.load152, i32 %j117.load153
  br i1 %154, bb %then155, bb %if.exit156
select.then137:
  j117.load141 = load i32 from ptr %j117
  142 = mul i32 %j117.load141, i32 4
  143 = ptradd ptr %arr, i32 %142
  143.load = load i32 from ptr %143
  k.load = load i32 from ptr %k
  146 = sub i32 %k.load, i32 1
  147 = icmp sgt i32 %143.load, i32 %146
  store i1 %147 to ptr %select140
  br bb %select.exit139
select.else138:
  store i1 0 to ptr %select140
  br bb %select.exit139
select.exit139:
  148 = load i1 from ptr %select140
  149 = icmp ne i1 %148, i1 0
  br i1 %149, bb %while.body132, bb %while.exit133
then155:
  i115.load157 = load i32 from ptr %i115
  158 = mul i32 %i115.load157, i32 4
  159 = ptradd ptr %arr, i32 %158
  j117.load160 = load i32 from ptr %j117
  161 = mul i32 %j117.load160, i32 4
  162 = ptradd ptr %arr, i32 %161
  162.load = load i32 from ptr %162
  store i32 %162.load to ptr %159
  i115.load164 = load i32 from ptr %i115
  165 = add i32 %i115.load164, i32 1
  store i32 %165 to ptr %i115
  br bb %if.exit156
if.exit156:
  br bb %while.cond166
while.cond166:
  i115.load169 = load i32 from ptr %i115
  j117.load170 = load i32 from ptr %j117
  171 = icmp slt i32 %i115.load169, i32 %j117.load170
  br i1 %171, bb %select.then172, bb %select.else173
while.body167:
  i115.load184 = load i32 from ptr %i115
  185 = add i32 %i115.load184, i32 1
  store i32 %185 to ptr %i115
  br bb %while.cond166
while.exit168:
  i115.load186 = load i32 from ptr %i115
  j117.load187 = load i32 from ptr %j117
  188 = icmp slt i32 %i115.load186, i32 %j117.load187
  br i1 %188, bb %then189, bb %if.exit190
select.then172:
  i115.load176 = load i32 from ptr %i115
  177 = mul i32 %i115.load176, i32 4
  178 = ptradd ptr %arr, i32 %177
  178.load = load i32 from ptr %178
  k.load180 = load i32 from ptr %k
  181 = icmp slt i32 %178.load, i32 %k.load180
  store i1 %181 to ptr %select175
  br bb %select.exit174
select.else173:
  store i1 0 to ptr %select175
  br bb %select.exit174
select.exit174:
  182 = load i1 from ptr %select175
  183 = icmp ne i1 %182, i1 0
  br i1 %183, bb %while.body167, bb %while.exit168
then189:
  j117.load191 = load i32 from ptr %j117
  192 = mul i32 %j117.load191, i32 4
  193 = ptradd ptr %arr, i32 %192
  i115.load194 = load i32 from ptr %i115
  195 = mul i32 %i115.load194, i32 4
  196 = ptradd ptr %arr, i32 %195
  196.load = load i32 from ptr %196
  store i32 %196.load to ptr %193
  j117.load198 = load i32 from ptr %j117
  199 = sub i32 %j117.load198, i32 1
  store i32 %199 to ptr %j117
  br bb %if.exit190
if.exit190:
  br bb %while.cond124
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry459:
  %i529 = stack 4
  %t = stack 4
  %result = stack 128
  %arr = stack 128
  store i32 32 to ptr @n
  462 = mul i32 0, i32 4
  463 = ptradd ptr %arr, i32 %462
  store i32 7 to ptr %463
  464 = mul i32 1, i32 4
  465 = ptradd ptr %arr, i32 %464
  store i32 23 to ptr %465
  466 = mul i32 2, i32 4
  467 = ptradd ptr %arr, i32 %466
  store i32 89 to ptr %467
  468 = mul i32 3, i32 4
  469 = ptradd ptr %arr, i32 %468
  store i32 26 to ptr %469
  470 = mul i32 4, i32 4
  471 = ptradd ptr %arr, i32 %470
  store i32 282 to ptr %471
  472 = mul i32 5, i32 4
  473 = ptradd ptr %arr, i32 %472
  store i32 254 to ptr %473
  474 = mul i32 6, i32 4
  475 = ptradd ptr %arr, i32 %474
  store i32 27 to ptr %475
  476 = mul i32 7, i32 4
  477 = ptradd ptr %arr, i32 %476
  store i32 5 to ptr %477
  478 = mul i32 8, i32 4
  479 = ptradd ptr %arr, i32 %478
  store i32 83 to ptr %479
  480 = mul i32 9, i32 4
  481 = ptradd ptr %arr, i32 %480
  store i32 273 to ptr %481
  482 = mul i32 10, i32 4
  483 = ptradd ptr %arr, i32 %482
  store i32 574 to ptr %483
  484 = mul i32 11, i32 4
  485 = ptradd ptr %arr, i32 %484
  store i32 905 to ptr %485
  486 = mul i32 12, i32 4
  487 = ptradd ptr %arr, i32 %486
  store i32 354 to ptr %487
  488 = mul i32 13, i32 4
  489 = ptradd ptr %arr, i32 %488
  store i32 657 to ptr %489
  490 = mul i32 14, i32 4
  491 = ptradd ptr %arr, i32 %490
  store i32 935 to ptr %491
  492 = mul i32 15, i32 4
  493 = ptradd ptr %arr, i32 %492
  store i32 264 to ptr %493
  494 = mul i32 16, i32 4
  495 = ptradd ptr %arr, i32 %494
  store i32 639 to ptr %495
  496 = mul i32 17, i32 4
  497 = ptradd ptr %arr, i32 %496
  store i32 459 to ptr %497
  498 = mul i32 18, i32 4
  499 = ptradd ptr %arr, i32 %498
  store i32 29 to ptr %499
  500 = mul i32 19, i32 4
  501 = ptradd ptr %arr, i32 %500
  store i32 68 to ptr %501
  502 = mul i32 20, i32 4
  503 = ptradd ptr %arr, i32 %502
  store i32 929 to ptr %503
  504 = mul i32 21, i32 4
  505 = ptradd ptr %arr, i32 %504
  store i32 756 to ptr %505
  506 = mul i32 22, i32 4
  507 = ptradd ptr %arr, i32 %506
  store i32 452 to ptr %507
  508 = mul i32 23, i32 4
  509 = ptradd ptr %arr, i32 %508
  store i32 279 to ptr %509
  510 = mul i32 24, i32 4
  511 = ptradd ptr %arr, i32 %510
  store i32 58 to ptr %511
  512 = mul i32 25, i32 4
  513 = ptradd ptr %arr, i32 %512
  store i32 87 to ptr %513
  514 = mul i32 26, i32 4
  515 = ptradd ptr %arr, i32 %514
  store i32 96 to ptr %515
  516 = mul i32 27, i32 4
  517 = ptradd ptr %arr, i32 %516
  store i32 36 to ptr %517
  518 = mul i32 28, i32 4
  519 = ptradd ptr %arr, i32 %518
  store i32 39 to ptr %519
  520 = mul i32 29, i32 4
  521 = ptradd ptr %arr, i32 %520
  store i32 28 to ptr %521
  522 = mul i32 30, i32 4
  523 = ptradd ptr %arr, i32 %522
  store i32 1 to ptr %523
  524 = mul i32 31, i32 4
  525 = ptradd ptr %arr, i32 %524
  store i32 290 to ptr %525
  527 = call i32 arrCopy(ptr %arr, ptr %result)
  store i32 %527 to ptr %t
  528 = call i32 revert(ptr %result)
  store i32 %528 to ptr %t
  store i32 0 to ptr %i529
  br bb %while.cond530
while.cond530:
  i529.load = load i32 from ptr %i529
  534 = icmp slt i32 %i529.load, i32 32
  535 = icmp ne i1 %534, i1 0
  br i1 %535, bb %while.body531, bb %while.exit532
while.body531:
  i529.load536 = load i32 from ptr %i529
  537 = mul i32 %i529.load536, i32 4
  538 = ptradd ptr %result, i32 %537
  538.load = load i32 from ptr %538
  store i32 %538.load to ptr %t
  call void putint(i32 %538.load)
  i529.load542 = load i32 from ptr %i529
  543 = add i32 %i529.load542, i32 1
  store i32 %543 to ptr %i529
  br bb %while.cond530
while.exit532:
  544 = call i32 bubblesort(ptr %result)
  store i32 %544 to ptr %t
  store i32 0 to ptr %i529
  br bb %while.cond545
while.cond545:
  i529.load548 = load i32 from ptr %i529
  549 = icmp slt i32 %i529.load548, i32 32
  550 = icmp ne i1 %549, i1 0
  br i1 %550, bb %while.body546, bb %while.exit547
while.body546:
  i529.load551 = load i32 from ptr %i529
  552 = mul i32 %i529.load551, i32 4
  553 = ptradd ptr %result, i32 %552
  553.load = load i32 from ptr %553
  store i32 %553.load to ptr %t
  call void putint(i32 %553.load)
  i529.load557 = load i32 from ptr %i529
  558 = add i32 %i529.load557, i32 1
  store i32 %558 to ptr %i529
  br bb %while.cond545
while.exit547:
  559 = call i32 getMid(ptr %result)
  store i32 %559 to ptr %t
  call void putint(i32 %559)
  562 = call i32 getMost(ptr %result)
  store i32 %562 to ptr %t
  call void putint(i32 %562)
  565 = call i32 arrCopy(ptr %arr, ptr %result)
  store i32 %565 to ptr %t
  566 = call i32 bubblesort(ptr %result)
  store i32 %566 to ptr %t
  store i32 0 to ptr %i529
  br bb %while.cond567
while.cond567:
  i529.load570 = load i32 from ptr %i529
  571 = icmp slt i32 %i529.load570, i32 32
  572 = icmp ne i1 %571, i1 0
  br i1 %572, bb %while.body568, bb %while.exit569
while.body568:
  i529.load573 = load i32 from ptr %i529
  574 = mul i32 %i529.load573, i32 4
  575 = ptradd ptr %result, i32 %574
  575.load = load i32 from ptr %575
  store i32 %575.load to ptr %t
  call void putint(i32 %575.load)
  i529.load579 = load i32 from ptr %i529
  580 = add i32 %i529.load579, i32 1
  store i32 %580 to ptr %i529
  br bb %while.cond567
while.exit569:
  581 = call i32 arrCopy(ptr %arr, ptr %result)
  store i32 %581 to ptr %t
  582 = call i32 insertsort(ptr %result)
  store i32 %582 to ptr %t
  store i32 0 to ptr %i529
  br bb %while.cond583
while.cond583:
  i529.load586 = load i32 from ptr %i529
  587 = icmp slt i32 %i529.load586, i32 32
  588 = icmp ne i1 %587, i1 0
  br i1 %588, bb %while.body584, bb %while.exit585
while.body584:
  i529.load589 = load i32 from ptr %i529
  590 = mul i32 %i529.load589, i32 4
  591 = ptradd ptr %result, i32 %590
  591.load = load i32 from ptr %591
  store i32 %591.load to ptr %t
  call void putint(i32 %591.load)
  i529.load595 = load i32 from ptr %i529
  596 = add i32 %i529.load595, i32 1
  store i32 %596 to ptr %i529
  br bb %while.cond583
while.exit585:
  597 = call i32 arrCopy(ptr %arr, ptr %result)
  store i32 %597 to ptr %t
  store i32 0 to ptr %i529
  store i32 31 to ptr %t
  600 = call i32 QuickSort(ptr %result, i32 0, i32 31)
  store i32 %600 to ptr %t
  br bb %while.cond601
while.cond601:
  i529.load604 = load i32 from ptr %i529
  605 = icmp slt i32 %i529.load604, i32 32
  606 = icmp ne i1 %605, i1 0
  br i1 %606, bb %while.body602, bb %while.exit603
while.body602:
  i529.load607 = load i32 from ptr %i529
  608 = mul i32 %i529.load607, i32 4
  609 = ptradd ptr %result, i32 %608
  609.load = load i32 from ptr %609
  store i32 %609.load to ptr %t
  call void putint(i32 %609.load)
  i529.load613 = load i32 from ptr %i529
  614 = add i32 %i529.load613, i32 1
  store i32 %614 to ptr %i529
  br bb %while.cond601
while.exit603:
  615 = call i32 arrCopy(ptr %arr, ptr %result)
  store i32 %615 to ptr %t
  616 = call i32 calSum(ptr %result, i32 4)
  store i32 %616 to ptr %t
  store i32 0 to ptr %i529
  br bb %while.cond617
while.cond617:
  i529.load620 = load i32 from ptr %i529
  621 = icmp slt i32 %i529.load620, i32 32
  622 = icmp ne i1 %621, i1 0
  br i1 %622, bb %while.body618, bb %while.exit619
while.body618:
  i529.load623 = load i32 from ptr %i529
  624 = mul i32 %i529.load623, i32 4
  625 = ptradd ptr %result, i32 %624
  625.load = load i32 from ptr %625
  store i32 %625.load to ptr %t
  call void putint(i32 %625.load)
  i529.load629 = load i32 from ptr %i529
  630 = add i32 %i529.load629, i32 1
  store i32 %630 to ptr %i529
  br bb %while.cond617
while.exit619:
  631 = call i32 arrCopy(ptr %arr, ptr %result)
  store i32 %631 to ptr %t
  632 = call i32 avgPooling(ptr %result, i32 3)
  store i32 %632 to ptr %t
  store i32 0 to ptr %i529
  br bb %while.cond633
while.cond633:
  i529.load636 = load i32 from ptr %i529
  637 = icmp slt i32 %i529.load636, i32 32
  638 = icmp ne i1 %637, i1 0
  br i1 %638, bb %while.body634, bb %while.exit635
while.body634:
  i529.load639 = load i32 from ptr %i529
  640 = mul i32 %i529.load639, i32 4
  641 = ptradd ptr %result, i32 %640
  641.load = load i32 from ptr %641
  store i32 %641.load to ptr %t
  call void putint(i32 %641.load)
  i529.load645 = load i32 from ptr %i529
  646 = add i32 %i529.load645, i32 1
  store i32 %646 to ptr %i529
  br bb %while.cond633
while.exit635:
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 calSum(ptr arr, i32 stride) {
entry342:
  %i345 = stack 4
  %sum = stack 4
  %stride.stack = stack 4
  store i32 %stride to ptr %stride.stack
  store i32 0 to ptr %sum
  store i32 0 to ptr %i345
  br bb %while.cond346
while.cond346:
  i345.load = load i32 from ptr %i345
  n.load350 = load i32 from ptr @n
  351 = icmp slt i32 %i345.load, i32 %n.load350
  352 = icmp ne i1 %351, i1 0
  br i1 %352, bb %while.body347, bb %while.exit348
while.body347:
  sum.load = load i32 from ptr %sum
  i345.load354 = load i32 from ptr %i345
  355 = mul i32 %i345.load354, i32 4
  356 = ptradd ptr %arr, i32 %355
  356.load = load i32 from ptr %356
  358 = add i32 %sum.load, i32 %356.load
  store i32 %358 to ptr %sum
  i345.load359 = load i32 from ptr %i345
  stride.stack.load = load i32 from ptr %stride.stack
  361 = srem i32 %i345.load359, i32 %stride.stack.load
  stride.stack.load362 = load i32 from ptr %stride.stack
  363 = sub i32 %stride.stack.load362, i32 1
  364 = icmp ne i32 %361, i32 %363
  br i1 %364, bb %then365, bb %else367
while.exit348:
  ret i32 0
then365:
  i345.load368 = load i32 from ptr %i345
  369 = mul i32 %i345.load368, i32 4
  370 = ptradd ptr %arr, i32 %369
  store i32 0 to ptr %370
  br bb %if.exit366
if.exit366:
  i345.load375 = load i32 from ptr %i345
  376 = add i32 %i345.load375, i32 1
  store i32 %376 to ptr %i345
  br bb %while.cond346
else367:
  i345.load371 = load i32 from ptr %i345
  372 = mul i32 %i345.load371, i32 4
  373 = ptradd ptr %arr, i32 %372
  sum.load374 = load i32 from ptr %sum
  store i32 %sum.load374 to ptr %373
  store i32 0 to ptr %sum
  br bb %if.exit366
}

i32 bubblesort(ptr arr) {
entry:
  %tmp = stack 4
  %j = stack 4
  %i = stack 4
  store i32 0 to ptr %i
  br bb %while.cond
while.cond:
  i.load = load i32 from ptr %i
  n.load = load i32 from ptr @n
  8 = sub i32 %n.load, i32 1
  9 = icmp slt i32 %i.load, i32 %8
  10 = icmp ne i1 %9, i1 0
  br i1 %10, bb %while.body, bb %while.exit
while.body:
  store i32 0 to ptr %j
  br bb %while.cond11
while.exit:
  ret i32 0
while.cond11:
  j.load = load i32 from ptr %j
  n.load15 = load i32 from ptr @n
  i.load16 = load i32 from ptr %i
  17 = sub i32 %n.load15, i32 %i.load16
  18 = sub i32 %17, i32 1
  19 = icmp slt i32 %j.load, i32 %18
  20 = icmp ne i1 %19, i1 0
  br i1 %20, bb %while.body12, bb %while.exit13
while.body12:
  j.load21 = load i32 from ptr %j
  22 = mul i32 %j.load21, i32 4
  23 = ptradd ptr %arr, i32 %22
  23.load = load i32 from ptr %23
  j.load25 = load i32 from ptr %j
  26 = add i32 %j.load25, i32 1
  27 = mul i32 %26, i32 4
  28 = ptradd ptr %arr, i32 %27
  28.load = load i32 from ptr %28
  30 = icmp sgt i32 %23.load, i32 %28.load
  br i1 %30, bb %then, bb %if.exit
while.exit13:
  i.load53 = load i32 from ptr %i
  54 = add i32 %i.load53, i32 1
  store i32 %54 to ptr %i
  br bb %while.cond
then:
  j.load34 = load i32 from ptr %j
  35 = add i32 %j.load34, i32 1
  36 = mul i32 %35, i32 4
  37 = ptradd ptr %arr, i32 %36
  37.load = load i32 from ptr %37
  store i32 %37.load to ptr %tmp
  j.load39 = load i32 from ptr %j
  40 = add i32 %j.load39, i32 1
  41 = mul i32 %40, i32 4
  42 = ptradd ptr %arr, i32 %41
  j.load43 = load i32 from ptr %j
  44 = mul i32 %j.load43, i32 4
  45 = ptradd ptr %arr, i32 %44
  45.load = load i32 from ptr %45
  store i32 %45.load to ptr %42
  j.load47 = load i32 from ptr %j
  48 = mul i32 %j.load47, i32 4
  49 = ptradd ptr %arr, i32 %48
  store i32 %37.load to ptr %49
  br bb %if.exit
if.exit:
  j.load51 = load i32 from ptr %j
  52 = add i32 %j.load51, i32 1
  store i32 %52 to ptr %j
  br bb %while.cond11
}


