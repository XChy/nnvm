global ptr a init with 4096 x i32 zeros
external i32 getint()

i32 f1(ptr b) {
entry:
  2 = ptradd ptr @a, i32 20
  store i32 4000 to ptr %2
  4 = ptradd ptr @a, i32 16000
  store i32 3 to ptr %4
  6 = ptradd ptr @a, i32 16380
  store i32 7 to ptr %6
  8.load = load i32 from ptr %6
  10 = mul i32 %8.load, i32 4
  11 = ptradd ptr %b, i32 %10
  13 = ptradd ptr @a, i32 8864
  13.load = load i32 from ptr %13
  15 = add i32 %13.load, i32 9
  store i32 %15 to ptr %11
  17.load = load i32 from ptr %2
  19 = mul i32 %17.load, i32 4
  20 = ptradd ptr @a, i32 %19
  20.load = load i32 from ptr %20
  ret i32 %20.load
}

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry22:
  %c = stack 16384
  %b = stack 16384
  br bb %init.cond
init.cond:
  cnt_ptr.phi = phi [bb %entry22, i32 1024, bb %init, i32 %cnt.dec]
  29 = icmp ne i32 %cnt_ptr.phi, i32 0
  br i1 %29, bb %init, bb %init.exit
init:
  cnt.dec = sub i32 %cnt_ptr.phi, i32 1
  offset = mul i32 %cnt.dec, i32 4
  arr.index34 = ptradd ptr %b, i32 %offset
  store i32 0 to ptr %arr.index34
  br bb %init.cond
init.exit:
  arr.index35 = ptradd ptr %b, i32 4096
  store i32 1 to ptr %arr.index35
  br bb %init.cond36
init.cond36:
  cnt_ptr39.phi = phi [bb %init.exit, i32 1023, bb %init37, i32 %cnt.dec43]
  41 = icmp ne i32 %cnt_ptr39.phi, i32 0
  br i1 %41, bb %init37, bb %init.exit38
init37:
  cnt.dec43 = sub i32 %cnt_ptr39.phi, i32 1
  offset44 = mul i32 %cnt.dec43, i32 4
  108 = add i32 %offset44, i32 4100
  arr.index46 = ptradd ptr %b, ptr %108
  store i32 0 to ptr %arr.index46
  br bb %init.cond36
init.exit38:
  arr.index47 = ptradd ptr %b, i32 8192
  store i32 2 to ptr %arr.index47
  arr.index48 = ptradd ptr %b, i32 8196
  store i32 3 to ptr %arr.index48
  br bb %init.cond49
init.cond49:
  cnt_ptr52.phi = phi [bb %init.exit38, i32 1022, bb %init50, i32 %cnt.dec56]
  54 = icmp ne i32 %cnt_ptr52.phi, i32 0
  br i1 %54, bb %init50, bb %init.exit51
init50:
  cnt.dec56 = sub i32 %cnt_ptr52.phi, i32 1
  offset57 = mul i32 %cnt.dec56, i32 4
  109 = add i32 %offset57, i32 8200
  arr.index59 = ptradd ptr %b, ptr %109
  store i32 0 to ptr %arr.index59
  br bb %init.cond49
init.exit51:
  arr.index60 = ptradd ptr %b, i32 12288
  store i32 4 to ptr %arr.index60
  arr.index61 = ptradd ptr %b, i32 12292
  store i32 5 to ptr %arr.index61
  arr.index62 = ptradd ptr %b, i32 12296
  store i32 6 to ptr %arr.index62
  br bb %init.cond63
init.cond63:
  cnt_ptr66.phi = phi [bb %init.exit51, i32 1021, bb %init64, i32 %cnt.dec70]
  68 = icmp ne i32 %cnt_ptr66.phi, i32 0
  br i1 %68, bb %init64, bb %init.exit65
init64:
  cnt.dec70 = sub i32 %cnt_ptr66.phi, i32 1
  offset71 = mul i32 %cnt.dec70, i32 4
  110 = add i32 %offset71, i32 12300
  arr.index73 = ptradd ptr %b, ptr %110
  store i32 0 to ptr %arr.index73
  br bb %init.cond63
init.exit65:
  store i32 1 to ptr %c
  arr.index76 = ptradd ptr %c, i32 4
  store i32 2 to ptr %arr.index76
  arr.index77 = ptradd ptr %c, i32 8
  store i32 0 to ptr %arr.index77
  arr.index78 = ptradd ptr %c, i32 12
  store i32 0 to ptr %arr.index78
  arr.index79 = ptradd ptr %c, i32 16
  store i32 3 to ptr %arr.index79
  arr.index80 = ptradd ptr %c, i32 20
  store i32 4 to ptr %arr.index80
  br bb %init.cond81
init.cond81:
  cnt_ptr84.phi = phi [bb %init.exit65, i32 4090, bb %init82, i32 %cnt.dec88]
  86 = icmp ne i32 %cnt_ptr84.phi, i32 0
  br i1 %86, bb %init82, bb %init.exit83
init82:
  cnt.dec88 = sub i32 %cnt_ptr84.phi, i32 1
  offset89 = mul i32 %cnt.dec88, i32 4
  111 = add i32 %offset89, i32 24
  arr.index91 = ptradd ptr %c, ptr %111
  store i32 0 to ptr %arr.index91
  br bb %init.cond81
init.exit83:
  94 = call i32 f1(ptr %c)
  call void putint(i32 %94)
  call void putch(i32 10)
  113 = ptradd ptr %c, i32 32
  100.load = load i32 from ptr %113
  ret i32 %100.load
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


