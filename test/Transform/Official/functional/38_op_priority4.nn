global ptr e init with i32 0
global ptr c init with i32 0
global ptr b init with i32 0
global ptr d init with i32 0
global ptr a init with i32 0
i32 main() {
entry:  pred()
  d.pinned = pin ptr @d
  c.pinned = pin ptr @c
  b.pinned = pin ptr @b
  a.pinned = pin ptr @a
  2 = call i32 getint()
  store i32 %2 to ptr %a.pinned
  4 = call i32 getint()
  store i32 %4 to ptr %b.pinned
  6 = call i32 getint()
  store i32 %6 to ptr %c.pinned
  8 = call i32 getint()
  store i32 %8 to ptr %d.pinned
  10 = call i32 getint()
  store i32 %10 to ptr @e
  a.load12 = load i32 from ptr %a.pinned
  b.load13 = load i32 from ptr %b.pinned
  c.load14 = load i32 from ptr %c.pinned
  15 = mul i32 %b.load13, i32 %c.load14
  16 = sub i32 %a.load12, i32 %15
  d.load17 = load i32 from ptr %d.pinned
  20 = sdiv i32 %a.load12, i32 %c.load14
  21 = sub i32 %d.load17, i32 %20
  22 = icmp ne i32 %16, i32 %21
  br i1 %22, bb %select.exit, bb %select.else
select.else:  pred(entry)
  29 = mul i32 %a.load12, i32 %b.load13
  31 = sdiv i32 %29, i32 %c.load14
  34 = add i32 %10, i32 %d.load17
  35 = icmp eq i32 %31, i32 %34
  br bb %select.exit
select.exit:  pred(select.else, entry)
  select.phi = phi [bb %select.else, i1 %35, bb %entry, i1 1]
  br i1 %select.phi, bb %select.exit40, bb %select.else39
select.else39:  pred(select.exit)
  44 = add i32 %a.load12, i32 %b.load13
  46 = add i32 %44, i32 %c.load14
  49 = add i32 %d.load17, i32 %10
  50 = icmp eq i32 %46, i32 %49
  br bb %select.exit40
select.exit40:  pred(select.else39, select.exit)
  select41.phi = phi [bb %select.else39, i1 %50, bb %select.exit, i1 1]
  62 = zext i1 %select41.phi to i32
  ret i32 %62
}

external i32 getint()


