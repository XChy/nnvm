global ptr n init with i32 0
i32 heap_sort(ptr arr, i32 len) {
entry77:
  %tmp0 = stack 4
  %tmp = stack 4
  %i = stack 4
  %len.stack = stack 4
  store i32 %len to ptr %len.stack
  82 = sdiv i32 %len, i32 2
  83 = sub i32 %82, i32 1
  store i32 %83 to ptr %i
  br bb %while.cond84
while.cond84:
  i.load = load i32 from ptr %i
  88 = sub i32 0, i32 1
  89 = icmp sgt i32 %i.load, i32 %88
  90 = icmp ne i1 %89, i1 0
  br i1 %90, bb %while.body85, bb %while.exit86
while.body85:
  len.stack.load91 = load i32 from ptr %len.stack
  92 = sub i32 %len.stack.load91, i32 1
  store i32 %92 to ptr %tmp
  i.load93 = load i32 from ptr %i
  95 = call i32 heap_ajust(ptr %arr, i32 %i.load93, i32 %92)
  store i32 %95 to ptr %tmp
  i.load96 = load i32 from ptr %i
  97 = sub i32 %i.load96, i32 1
  store i32 %97 to ptr %i
  br bb %while.cond84
while.exit86:
  len.stack.load98 = load i32 from ptr %len.stack
  99 = sub i32 %len.stack.load98, i32 1
  store i32 %99 to ptr %i
  br bb %while.cond100
while.cond100:
  i.load103 = load i32 from ptr %i
  104 = icmp sgt i32 %i.load103, i32 0
  105 = icmp ne i1 %104, i1 0
  br i1 %105, bb %while.body101, bb %while.exit102
while.body101:
  store i32 0 to ptr %tmp0
  i.load108 = load i32 from ptr %i
  109 = call i32 swap(ptr %arr, i32 0, i32 %i.load108)
  store i32 %109 to ptr %tmp
  i.load110 = load i32 from ptr %i
  111 = sub i32 %i.load110, i32 1
  store i32 %111 to ptr %tmp
  tmp0.load112 = load i32 from ptr %tmp0
  114 = call i32 heap_ajust(ptr %arr, i32 %tmp0.load112, i32 %111)
  store i32 %114 to ptr %tmp
  i.load115 = load i32 from ptr %i
  116 = sub i32 %i.load115, i32 1
  store i32 %116 to ptr %i
  br bb %while.cond100
while.exit102:
  ret i32 0
}

i32 heap_ajust(ptr arr, i32 start, i32 end) {
entry19:
  %select = stack 1
  %son = stack 4
  %dad = stack 4
  %end.stack = stack 4
  %start.stack = stack 4
  store i32 %start to ptr %start.stack
  store i32 %end to ptr %end.stack
  store i32 %start to ptr %dad
  26 = mul i32 %start, i32 2
  27 = add i32 %26, i32 1
  store i32 %27 to ptr %son
  br bb %while.cond
while.cond:
  son.load = load i32 from ptr %son
  end.stack.load = load i32 from ptr %end.stack
  33 = add i32 %end.stack.load, i32 1
  34 = icmp slt i32 %son.load, i32 %33
  35 = icmp ne i1 %34, i1 0
  br i1 %35, bb %while.body, bb %while.exit
while.body:
  son.load36 = load i32 from ptr %son
  end.stack.load37 = load i32 from ptr %end.stack
  38 = icmp slt i32 %son.load36, i32 %end.stack.load37
  br i1 %38, bb %select.then, bb %select.else
while.exit:
  ret i32 0
select.then:
  son.load43 = load i32 from ptr %son
  44 = mul i32 %son.load43, i32 4
  45 = ptradd ptr %arr, i32 %44
  45.load = load i32 from ptr %45
  son.load47 = load i32 from ptr %son
  48 = add i32 %son.load47, i32 1
  49 = mul i32 %48, i32 4
  50 = ptradd ptr %arr, i32 %49
  50.load = load i32 from ptr %50
  52 = icmp slt i32 %45.load, i32 %50.load
  store i1 %52 to ptr %select
  br bb %select.exit
select.else:
  store i1 0 to ptr %select
  br bb %select.exit
select.exit:
  53 = load i1 from ptr %select
  br i1 %53, bb %then, bb %if.exit
then:
  son.load56 = load i32 from ptr %son
  57 = add i32 %son.load56, i32 1
  store i32 %57 to ptr %son
  br bb %if.exit
if.exit:
  dad.load58 = load i32 from ptr %dad
  59 = mul i32 %dad.load58, i32 4
  60 = ptradd ptr %arr, i32 %59
  60.load = load i32 from ptr %60
  son.load62 = load i32 from ptr %son
  63 = mul i32 %son.load62, i32 4
  64 = ptradd ptr %arr, i32 %63
  64.load = load i32 from ptr %64
  66 = icmp sgt i32 %60.load, i32 %64.load
  br i1 %66, bb %then67, bb %else
then67:
  ret i32 0
if.exit68:
  br bb %while.cond
else:
  dad.load70 = load i32 from ptr %dad
  son.load71 = load i32 from ptr %son
  72 = call i32 swap(ptr %arr, i32 %dad.load70, i32 %son.load71)
  store i32 %72 to ptr %dad
  son.load73 = load i32 from ptr %son
  store i32 %son.load73 to ptr %dad
  75 = mul i32 %son.load73, i32 2
  76 = add i32 %75, i32 1
  store i32 %76 to ptr %son
  br bb %if.exit68
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry117:
  %tmp149 = stack 4
  %i139 = stack 4
  %a = stack 40
  store i32 10 to ptr @n
  119 = mul i32 0, i32 4
  120 = ptradd ptr %a, i32 %119
  store i32 4 to ptr %120
  121 = mul i32 1, i32 4
  122 = ptradd ptr %a, i32 %121
  store i32 3 to ptr %122
  123 = mul i32 2, i32 4
  124 = ptradd ptr %a, i32 %123
  store i32 9 to ptr %124
  125 = mul i32 3, i32 4
  126 = ptradd ptr %a, i32 %125
  store i32 2 to ptr %126
  127 = mul i32 4, i32 4
  128 = ptradd ptr %a, i32 %127
  store i32 0 to ptr %128
  129 = mul i32 5, i32 4
  130 = ptradd ptr %a, i32 %129
  store i32 1 to ptr %130
  131 = mul i32 6, i32 4
  132 = ptradd ptr %a, i32 %131
  store i32 6 to ptr %132
  133 = mul i32 7, i32 4
  134 = ptradd ptr %a, i32 %133
  store i32 5 to ptr %134
  135 = mul i32 8, i32 4
  136 = ptradd ptr %a, i32 %135
  store i32 7 to ptr %136
  137 = mul i32 9, i32 4
  138 = ptradd ptr %a, i32 %137
  store i32 8 to ptr %138
  store i32 0 to ptr %i139
  141 = call i32 heap_sort(ptr %a, i32 10)
  store i32 %141 to ptr %i139
  br bb %while.cond142
while.cond142:
  i139.load = load i32 from ptr %i139
  n.load146 = load i32 from ptr @n
  147 = icmp slt i32 %i139.load, i32 %n.load146
  148 = icmp ne i1 %147, i1 0
  br i1 %148, bb %while.body143, bb %while.exit144
while.body143:
  i139.load150 = load i32 from ptr %i139
  151 = mul i32 %i139.load150, i32 4
  152 = ptradd ptr %a, i32 %151
  152.load = load i32 from ptr %152
  store i32 %152.load to ptr %tmp149
  call void putint(i32 %152.load)
  store i32 10 to ptr %tmp149
  call void putch(i32 10)
  i139.load158 = load i32 from ptr %i139
  159 = add i32 %i139.load158, i32 1
  store i32 %159 to ptr %i139
  br bb %while.cond142
while.exit144:
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 swap(ptr array, i32 i, i32 j) {
entry:
  %temp = stack 4
  %j.stack = stack 4
  %i.stack = stack 4
  store i32 %i to ptr %i.stack
  store i32 %j to ptr %j.stack
  5 = mul i32 %i, i32 4
  6 = ptradd ptr %array, i32 %5
  6.load = load i32 from ptr %6
  store i32 %6.load to ptr %temp
  9 = mul i32 %i, i32 4
  10 = ptradd ptr %array, i32 %9
  12 = mul i32 %j, i32 4
  13 = ptradd ptr %array, i32 %12
  13.load = load i32 from ptr %13
  store i32 %13.load to ptr %10
  16 = mul i32 %j, i32 4
  17 = ptradd ptr %array, i32 %16
  store i32 %6.load to ptr %17
  ret i32 0
}


