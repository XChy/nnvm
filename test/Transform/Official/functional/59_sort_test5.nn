global ptr n init with i32 0
i32 heap_sort(ptr arr, i32 len) {
entry77:
  82 = sdiv i32 %len, i32 2
  83 = sub i32 %82, i32 1
  br bb %while.cond84
while.cond84:
  i.phi161 = phi [bb %entry77, i32 %83, bb %while.body85, i32 %97]
  89 = icmp sgt i32 %i.phi161, i32 -1
  90 = icmp ne i1 %89, i1 0
  br i1 %90, bb %while.body85, bb %while.exit86
while.body85:
  92 = sub i32 %len, i32 1
  95 = call i32 heap_ajust(ptr %arr, i32 %i.phi161, i32 %92)
  97 = sub i32 %i.phi161, i32 1
  br bb %while.cond84
while.exit86:
  99 = sub i32 %len, i32 1
  br bb %while.cond100
while.cond100:
  i.phi = phi [bb %while.exit86, i32 %99, bb %while.body101, i32 %116]
  104 = icmp sgt i32 %i.phi, i32 0
  105 = icmp ne i1 %104, i1 0
  br i1 %105, bb %while.body101, bb %while.exit102
while.body101:
  109 = call i32 swap(ptr %arr, i32 0, i32 %i.phi)
  111 = sub i32 %i.phi, i32 1
  114 = call i32 heap_ajust(ptr %arr, i32 0, i32 %111)
  116 = sub i32 %i.phi, i32 1
  br bb %while.cond100
while.exit102:
  ret i32 0
}

i32 heap_ajust(ptr arr, i32 start, i32 end) {
entry19:
  26 = mul i32 %start, i32 2
  27 = add i32 %26, i32 1
  br bb %while.cond
while.cond:
  son.phi = phi [bb %entry19, i32 %27, bb %if.exit68, i32 %76]
  dad.phi = phi [bb %entry19, i32 %start, bb %if.exit68, i32 %son.phi167]
  33 = add i32 %end, i32 1
  34 = icmp slt i32 %son.phi, i32 %33
  35 = icmp ne i1 %34, i1 0
  br i1 %35, bb %while.body, bb %while.exit
while.body:
  38 = icmp slt i32 %son.phi, i32 %end
  br i1 %38, bb %select.then, bb %select.else
while.exit:
  ret i32 0
select.then:
  44 = mul i32 %son.phi, i32 4
  45 = ptradd ptr %arr, i32 %44
  45.load = load i32 from ptr %45
  48 = add i32 %son.phi, i32 1
  49 = mul i32 %48, i32 4
  50 = ptradd ptr %arr, i32 %49
  50.load = load i32 from ptr %50
  52 = icmp slt i32 %45.load, i32 %50.load
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %52]
  br i1 %select.phi, bb %then, bb %if.exit
then:
  57 = add i32 %son.phi, i32 1
  br bb %if.exit
if.exit:
  son.phi167 = phi [bb %select.exit, i32 %son.phi, bb %then, i32 %57]
  59 = mul i32 %dad.phi, i32 4
  60 = ptradd ptr %arr, i32 %59
  60.load = load i32 from ptr %60
  63 = mul i32 %son.phi167, i32 4
  64 = ptradd ptr %arr, i32 %63
  64.load = load i32 from ptr %64
  66 = icmp sgt i32 %60.load, i32 %64.load
  br i1 %66, bb %then67, bb %else
then67:
  ret i32 0
if.exit68:
  br bb %while.cond
else:
  72 = call i32 swap(ptr %arr, i32 %dad.phi, i32 %son.phi167)
  75 = mul i32 %son.phi167, i32 2
  76 = add i32 %75, i32 1
  br bb %if.exit68
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry117:
  %a = stack 40
  store i32 10 to ptr @n
  120 = ptradd ptr %a, i32 0
  store i32 4 to ptr %120
  122 = ptradd ptr %a, i32 4
  store i32 3 to ptr %122
  124 = ptradd ptr %a, i32 8
  store i32 9 to ptr %124
  126 = ptradd ptr %a, i32 12
  store i32 2 to ptr %126
  128 = ptradd ptr %a, i32 16
  store i32 0 to ptr %128
  130 = ptradd ptr %a, i32 20
  store i32 1 to ptr %130
  132 = ptradd ptr %a, i32 24
  store i32 6 to ptr %132
  134 = ptradd ptr %a, i32 28
  store i32 5 to ptr %134
  136 = ptradd ptr %a, i32 32
  store i32 7 to ptr %136
  138 = ptradd ptr %a, i32 36
  store i32 8 to ptr %138
  n.load = load i32 from ptr @n
  141 = call i32 heap_sort(ptr %a, i32 %n.load)
  br bb %while.cond142
while.cond142:
  i139.phi = phi [bb %entry117, i32 %141, bb %while.body143, i32 %159]
  n.load146 = load i32 from ptr @n
  147 = icmp slt i32 %i139.phi, i32 %n.load146
  148 = icmp ne i1 %147, i1 0
  br i1 %148, bb %while.body143, bb %while.exit144
while.body143:
  151 = mul i32 %i139.phi, i32 4
  152 = ptradd ptr %a, i32 %151
  152.load = load i32 from ptr %152
  call void putint(i32 %152.load)
  call void putch(i32 10)
  159 = add i32 %i139.phi, i32 1
  br bb %while.cond142
while.exit144:
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 swap(ptr array, i32 i, i32 j) {
entry:
  5 = mul i32 %i, i32 4
  6 = ptradd ptr %array, i32 %5
  6.load = load i32 from ptr %6
  9 = mul i32 %i, i32 4
  10 = ptradd ptr %array, i32 %9
  12 = mul i32 %j, i32 4
  13 = ptradd ptr %array, i32 %12
  13.load = load i32 from ptr %13
  store i32 %13.load to ptr %10
  16 = mul i32 %j, i32 4
  17 = ptradd ptr %array, i32 %16
  store i32 %6.load to ptr %17
  ret i32 0
}


