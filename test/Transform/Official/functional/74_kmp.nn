i32 KMP(ptr dst, ptr src) {
entry48:
  %next = stack 16384
  call void get_next(ptr %dst, ptr %next)
  br bb %while.cond53
while.cond53:
  j52.phi138 = phi [bb %entry48, i32 0, bb %if.exit71, i32 %j52.phi137]
  i51.phi135 = phi [bb %entry48, i32 0, bb %if.exit71, i32 %i51.phi134]
  57 = mul i32 %j52.phi138, i32 4
  58 = ptradd ptr %src, i32 %57
  58.load = load i32 from ptr %58
  60 = icmp ne i32 %58.load, i32 0
  br i1 %60, bb %while.body54, bb %while.exit55
while.body54:
  62 = mul i32 %i51.phi135, i32 4
  63 = ptradd ptr %dst, i32 %62
  63.load = load i32 from ptr %63
  67.load = load i32 from ptr %58
  69 = icmp eq i32 %63.load, i32 %67.load
  br i1 %69, bb %then70, bb %else72
while.exit55:
  ret i32 -1
then70:
  74 = add i32 %i51.phi135, i32 1
  76 = add i32 %j52.phi138, i32 1
  78 = mul i32 %74, i32 4
  79 = ptradd ptr %dst, i32 %78
  79.load = load i32 from ptr %79
  81 = icmp ne i32 %79.load, i32 0
  82 =  i1 %81, i1 1
  83 = zext i1 %82 to i32
  84 = icmp ne i32 %83, i32 0
  br i1 %84, bb %then85, bb %if.exit86
if.exit71:
  j52.phi137 = phi [bb %if.exit96, i32 %j52.phi, bb %if.exit86, i32 %76]
  i51.phi134 = phi [bb %if.exit96, i32 %i51.phi, bb %if.exit86, i32 %74]
  br bb %while.cond53
else72:
  90 = ptradd ptr %next, i32 %62
  90.load = load i32 from ptr %90
  94 = icmp eq i32 %90.load, i32 -1
  br i1 %94, bb %then95, bb %if.exit96
then85:
  ret i32 %76
if.exit86:
  br bb %if.exit71
then95:
  98 = add i32 %90.load, i32 1
  100 = add i32 %j52.phi138, i32 1
  br bb %if.exit96
if.exit96:
  j52.phi = phi [bb %else72, i32 %j52.phi138, bb %then95, i32 %100]
  i51.phi = phi [bb %else72, i32 %90.load, bb %then95, i32 %98]
  br bb %if.exit71
}

external i32 getint()

external i32 getch()

i32 read_str(ptr buf) {
entry102:
  br bb %while.cond104
while.cond104:
  i103.phi = phi [bb %entry102, i32 0, bb %if.exit118, i32 %120]
  109 = mul i32 %i103.phi, i32 4
  110 = ptradd ptr %buf, i32 %109
  111 = call i32 getch()
  store i32 %111 to ptr %110
  114.load = load i32 from ptr %110
  116 = icmp eq i32 %114.load, i32 10
  br i1 %116, bb %then117, bb %if.exit118
then117:
  store i32 0 to ptr %110
  ret i32 %i103.phi
if.exit118:
  120 = add i32 %i103.phi, i32 1
  br bb %while.cond104
}

external void putint(i32 )

external i32 getfarray(ptr )

i32 main() {
entry125:
  %src = stack 16384
  %dst = stack 16384
  128 = call i32 read_str(ptr %dst)
  129 = call i32 read_str(ptr %src)
  130 = call i32 KMP(ptr %dst, ptr %src)
  call void putint(i32 %130)
  call void putch(i32 10)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

external i32 getarray(ptr )

void get_next(ptr str, ptr next) {
entry:
  store i32 -1 to ptr %next
  br bb %while.cond
while.cond:
  i.phi143 = phi [bb %entry, i32 0, bb %if.exit, i32 %i.phi]
  j.phi141 = phi [bb %entry, i32 -1, bb %if.exit, i32 %j.phi]
  11 = mul i32 %i.phi143, i32 4
  12 = ptradd ptr %str, i32 %11
  12.load = load i32 from ptr %12
  14 = icmp ne i32 %12.load, i32 0
  br i1 %14, bb %while.body, bb %while.exit
while.body:
  17 = icmp eq i32 %j.phi141, i32 -1
  br i1 %17, bb %select.then, bb %select.else
while.exit:
  ret 
select.then:
  br bb %select.exit
select.else:
  24.load = load i32 from ptr %12
  27 = mul i32 %j.phi141, i32 4
  28 = ptradd ptr %str, i32 %27
  28.load = load i32 from ptr %28
  30 = icmp eq i32 %24.load, i32 %28.load
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %30, bb %select.then, i1 1]
  br i1 %select.phi, bb %then, bb %else
then:
  37 = add i32 %j.phi141, i32 1
  39 = add i32 %i.phi143, i32 1
  41 = mul i32 %39, i32 4
  42 = ptradd ptr %next, i32 %41
  store i32 %37 to ptr %42
  br bb %if.exit
if.exit:
  i.phi = phi [bb %else, i32 %i.phi143, bb %then, i32 %39]
  j.phi = phi [bb %else, i32 %46.load, bb %then, i32 %37]
  br bb %while.cond
else:
  45 = mul i32 %j.phi141, i32 4
  46 = ptradd ptr %next, i32 %45
  46.load = load i32 from ptr %46
  br bb %if.exit
}


