global ptr cns init with 20 x i32 zeros
global ptr list init with 200 x i32 zeros
global ptr dp init with 13226976 x i32 zeros
immutable global ptr mod init with i32 1000000007
immutable global ptr maxn init with i32 18
i32 dfs(i32 a, i32 b, i32 c, i32 d, i32 e, i32 last) {
entry8:
  16 = mul i32 %a, i32 2939328
  17 = ptradd ptr @dp, i32 %16
  19 = mul i32 %b, i32 163296
  20 = ptradd ptr %17, i32 %19
  22 = mul i32 %c, i32 9072
  23 = ptradd ptr %20, i32 %22
  25 = mul i32 %d, i32 504
  26 = ptradd ptr %23, i32 %25
  28 = mul i32 %e, i32 28
  29 = ptradd ptr %26, i32 %28
  366 = shl i32 %last, i32 2
  32 = ptradd ptr %29, i32 %366
  32.load = load i32 from ptr %32
  35 = icmp ne i32 %32.load, i32 -1
  br i1 %35, bb %then36, bb %if.exit37
then36:
  55.load = load i32 from ptr %32
  ret i32 %55.load
if.exit37:
  59 = add i32 %a, i32 %b
  61 = add i32 %59, i32 %c
  63 = add i32 %61, i32 %d
  65 = add i32 %63, i32 %e
  66 = icmp eq i32 %65, i32 0
  br i1 %66, bb %then67, bb %if.exit68
then67:
  ret i32 1
if.exit68:
  71 = icmp ne i32 %a, i32 0
  br i1 %71, bb %then72, bb %if.exit73
then72:
  5379 = icmp eq i32 %last, i32 2
  br i1 %5379, bb %equal.then, bb %equal.if.exit
then72.split:
  77.ret = phi [bb %equal.then, i32 1, bb %equal.if.exit, i32 0]
  78 = sub i32 %a, i32 %77.ret
  80 = sub i32 %a, i32 1
  85 = call i32 dfs(i32 %80, i32 %b, i32 %c, i32 %d, i32 %e, i32 1)
  86 = mul i32 %78, i32 %85
  89 = srem i32 %86, i32 1000000007
  br bb %if.exit73
if.exit73:
  ans.phi343 = phi [bb %if.exit68, i32 0, bb %then72.split, i32 %89]
  91 = icmp ne i32 %b, i32 0
  br i1 %91, bb %then92, bb %if.exit93
then92:
  5388 = icmp eq i32 %last, i32 3
  br i1 %5388, bb %equal.then390, bb %equal.if.exit392
then92.split:
  97.ret = phi [bb %equal.then390, i32 1, bb %equal.if.exit392, i32 0]
  98 = sub i32 %b, i32 %97.ret
  100 = add i32 %a, i32 1
  102 = sub i32 %b, i32 1
  106 = call i32 dfs(i32 %100, i32 %102, i32 %c, i32 %d, i32 %e, i32 2)
  107 = mul i32 %98, i32 %106
  108 = add i32 %ans.phi343, i32 %107
  110 = srem i32 %108, i32 1000000007
  br bb %if.exit93
if.exit93:
  ans.phi342 = phi [bb %if.exit73, i32 %ans.phi343, bb %then92.split, i32 %110]
  112 = icmp ne i32 %c, i32 0
  br i1 %112, bb %then113, bb %if.exit114
then113:
  5397 = icmp eq i32 %last, i32 4
  br i1 %5397, bb %equal.then399, bb %equal.if.exit401
then113.split:
  118.ret = phi [bb %equal.then399, i32 1, bb %equal.if.exit401, i32 0]
  119 = sub i32 %c, i32 %118.ret
  122 = add i32 %b, i32 1
  124 = sub i32 %c, i32 1
  127 = call i32 dfs(i32 %a, i32 %122, i32 %124, i32 %d, i32 %e, i32 3)
  128 = mul i32 %119, i32 %127
  129 = add i32 %ans.phi342, i32 %128
  131 = srem i32 %129, i32 1000000007
  br bb %if.exit114
if.exit114:
  ans.phi341 = phi [bb %if.exit93, i32 %ans.phi342, bb %then113.split, i32 %131]
  133 = icmp ne i32 %d, i32 0
  br i1 %133, bb %then134, bb %if.exit135
then134:
  5406 = icmp eq i32 %last, i32 5
  br i1 %5406, bb %equal.then408, bb %equal.if.exit410
then134.split:
  139.ret = phi [bb %equal.then408, i32 1, bb %equal.if.exit410, i32 0]
  140 = sub i32 %d, i32 %139.ret
  144 = add i32 %c, i32 1
  146 = sub i32 %d, i32 1
  148 = call i32 dfs(i32 %a, i32 %b, i32 %144, i32 %146, i32 %e, i32 4)
  149 = mul i32 %140, i32 %148
  150 = add i32 %ans.phi341, i32 %149
  152 = srem i32 %150, i32 1000000007
  br bb %if.exit135
if.exit135:
  ans.phi340 = phi [bb %if.exit114, i32 %ans.phi341, bb %then134.split, i32 %152]
  154 = icmp ne i32 %e, i32 0
  br i1 %154, bb %then155, bb %if.exit156
then155:
  163 = add i32 %d, i32 1
  165 = sub i32 %e, i32 1
  166 = call i32 dfs(i32 %a, i32 %b, i32 %c, i32 %163, i32 %165, i32 5)
  167 = mul i32 %e, i32 %166
  168 = add i32 %ans.phi340, i32 %167
  170 = srem i32 %168, i32 1000000007
  br bb %if.exit156
if.exit156:
  ans.phi = phi [bb %if.exit135, i32 %ans.phi340, bb %then155, i32 %170]
  191 = srem i32 %ans.phi, i32 1000000007
  store i32 %191 to ptr %32
  ret i32 %191
equal.then:
  br bb %then72.split
equal.if.exit:
  br bb %then72.split
equal.then390:
  br bb %then92.split
equal.if.exit392:
  br bb %then92.split
equal.then399:
  br bb %then113.split
equal.if.exit401:
  br bb %then113.split
equal.then408:
  br bb %then134.split
equal.if.exit410:
  br bb %then134.split
}

external i32 getint()

external i32 getch()

external void putint(i32 )

pure i32 equal(i32 a, i32 b) {
entry:
  5 = icmp eq i32 %a, i32 %b
  br i1 %5, bb %then, bb %if.exit
then:
  ret i32 1
if.exit:
  ret i32 0
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry211:
  213 = call i32 getint()
  br bb %while.cond
while.cond:
  h.phi365 = phi [bb %entry211, i32 ub, bb %while.exit225, i32 %h.phi364]
  k.phi359 = phi [bb %entry211, i32 ub, bb %while.exit225, i32 %k.phi358]
  m.phi356 = phi [bb %entry211, i32 ub, bb %while.exit225, i32 %m.phi355]
  l.phi351 = phi [bb %entry211, i32 ub, bb %while.exit225, i32 %l.phi350]
  i.phi345 = phi [bb %entry211, i32 0, bb %while.exit225, i32 %291]
  220 = icmp slt i32 %i.phi345, i32 18
  br i1 %220, bb %while.body, bb %while.exit
while.body:
  br bb %while.cond223
while.exit:
  br bb %while.cond292
while.cond223:
  h.phi364 = phi [bb %while.body, i32 %h.phi365, bb %while.exit233, i32 %h.phi363]
  k.phi358 = phi [bb %while.body, i32 %k.phi359, bb %while.exit233, i32 %k.phi]
  m.phi355 = phi [bb %while.body, i32 %m.phi356, bb %while.exit233, i32 %m.phi354]
  l.phi350 = phi [bb %while.body, i32 %l.phi351, bb %while.exit233, i32 %l.phi349]
  j.phi = phi [bb %while.body, i32 0, bb %while.exit233, i32 %289]
  228 = icmp slt i32 %j.phi, i32 18
  br i1 %228, bb %while.body224, bb %while.exit225
while.body224:
  br bb %while.cond231
while.exit225:
  291 = add i32 %i.phi345, i32 1
  br bb %while.cond
while.cond231:
  h.phi363 = phi [bb %while.body224, i32 %h.phi364, bb %while.exit241, i32 %h.phi362]
  k.phi = phi [bb %while.body224, i32 0, bb %while.exit241, i32 %287]
  m.phi354 = phi [bb %while.body224, i32 %m.phi355, bb %while.exit241, i32 %m.phi353]
  l.phi349 = phi [bb %while.body224, i32 %l.phi350, bb %while.exit241, i32 %l.phi]
  236 = icmp slt i32 %k.phi, i32 18
  br i1 %236, bb %while.body232, bb %while.exit233
while.body232:
  br bb %while.cond239
while.exit233:
  289 = add i32 %j.phi, i32 1
  br bb %while.cond223
while.cond239:
  h.phi362 = phi [bb %while.body232, i32 %h.phi363, bb %while.exit249, i32 %h.phi361]
  m.phi353 = phi [bb %while.body232, i32 %m.phi354, bb %while.exit249, i32 %m.phi]
  l.phi = phi [bb %while.body232, i32 0, bb %while.exit249, i32 %285]
  244 = icmp slt i32 %l.phi, i32 18
  br i1 %244, bb %while.body240, bb %while.exit241
while.body240:
  br bb %while.cond247
while.exit241:
  287 = add i32 %k.phi, i32 1
  br bb %while.cond231
while.cond247:
  h.phi361 = phi [bb %while.body240, i32 %h.phi362, bb %while.exit257, i32 %h.phi]
  m.phi = phi [bb %while.body240, i32 0, bb %while.exit257, i32 %283]
  252 = icmp slt i32 %m.phi, i32 18
  br i1 %252, bb %while.body248, bb %while.exit249
while.body248:
  br bb %while.cond255
while.exit249:
  285 = add i32 %l.phi, i32 1
  br bb %while.cond239
while.cond255:
  h.phi = phi [bb %while.body248, i32 0, bb %while.body256, i32 %281]
  259 = icmp slt i32 %h.phi, i32 7
  br i1 %259, bb %while.body256, bb %while.exit257
while.body256:
  262 = mul i32 %i.phi345, i32 2939328
  263 = ptradd ptr @dp, i32 %262
  265 = mul i32 %j.phi, i32 163296
  266 = ptradd ptr %263, i32 %265
  268 = mul i32 %k.phi, i32 9072
  269 = ptradd ptr %266, i32 %268
  271 = mul i32 %l.phi, i32 504
  272 = ptradd ptr %269, i32 %271
  274 = mul i32 %m.phi, i32 28
  275 = ptradd ptr %272, i32 %274
  371 = shl i32 %h.phi, i32 2
  278 = ptradd ptr %275, i32 %371
  store i32 -1 to ptr %278
  281 = add i32 %h.phi, i32 1
  br bb %while.cond255
while.exit257:
  283 = add i32 %m.phi, i32 1
  br bb %while.cond247
while.cond292:
  i.phi = phi [bb %while.exit, i32 0, bb %while.body293, i32 %318]
  297 = icmp slt i32 %i.phi, i32 %213
  br i1 %297, bb %while.body293, bb %while.exit294
while.body293:
  372 = shl i32 %i.phi, i32 2
  301 = ptradd ptr @list, i32 %372
  302 = call i32 getint()
  store i32 %302 to ptr %301
  374 = shl i32 %302, i32 2
  308 = ptradd ptr @cns, i32 %374
  314.load = load i32 from ptr %308
  316 = add i32 %314.load, i32 1
  store i32 %316 to ptr %308
  318 = add i32 %i.phi, i32 1
  br bb %while.cond292
while.exit294:
  321 = ptradd ptr @cns, i32 4
  321.load = load i32 from ptr %321
  324 = ptradd ptr @cns, i32 8
  324.load = load i32 from ptr %324
  327 = ptradd ptr @cns, i32 12
  327.load = load i32 from ptr %327
  330 = ptradd ptr @cns, i32 16
  330.load = load i32 from ptr %330
  333 = ptradd ptr @cns, i32 20
  333.load = load i32 from ptr %333
  335 = call i32 dfs(i32 %321.load, i32 %324.load, i32 %327.load, i32 %330.load, i32 %333.load, i32 0)
  call void putint(i32 %335)
  ret i32 %335
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


