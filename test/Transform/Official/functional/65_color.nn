global ptr cns init with 20 x i32 zeros
global ptr list init with 200 x i32 zeros
global ptr dp init with 13226976 x i32 zeros
global ptr mod init with i32 1000000007
global ptr maxn init with i32 18
i32 dfs(i32 a, i32 b, i32 c, i32 d, i32 e, i32 last) {
entry8:
  %ans = stack 4
  %last.stack = stack 4
  %e.stack = stack 4
  %d.stack = stack 4
  %c.stack = stack 4
  %b.stack10 = stack 4
  %a.stack9 = stack 4
  store i32 %a to ptr %a.stack9
  store i32 %b to ptr %b.stack10
  store i32 %c to ptr %c.stack
  store i32 %d to ptr %d.stack
  store i32 %e to ptr %e.stack
  store i32 %last to ptr %last.stack
  a.stack9.load = load i32 from ptr %a.stack9
  16 = mul i32 %a.stack9.load, i32 2939328
  17 = ptradd ptr @dp, i32 %16
  b.stack10.load = load i32 from ptr %b.stack10
  19 = mul i32 %b.stack10.load, i32 163296
  20 = ptradd ptr %17, i32 %19
  c.stack.load = load i32 from ptr %c.stack
  22 = mul i32 %c.stack.load, i32 9072
  23 = ptradd ptr %20, i32 %22
  d.stack.load = load i32 from ptr %d.stack
  25 = mul i32 %d.stack.load, i32 504
  26 = ptradd ptr %23, i32 %25
  e.stack.load = load i32 from ptr %e.stack
  28 = mul i32 %e.stack.load, i32 28
  29 = ptradd ptr %26, i32 %28
  31 = mul i32 %last, i32 4
  32 = ptradd ptr %29, i32 %31
  32.load = load i32 from ptr %32
  34 = sub i32 0, i32 1
  35 = icmp ne i32 %32.load, i32 %34
  br i1 %35, bb %then36, bb %if.exit37
then36:
  a.stack9.load38 = load i32 from ptr %a.stack9
  39 = mul i32 %a.stack9.load38, i32 2939328
  40 = ptradd ptr @dp, i32 %39
  b.stack10.load41 = load i32 from ptr %b.stack10
  42 = mul i32 %b.stack10.load41, i32 163296
  43 = ptradd ptr %40, i32 %42
  c.stack.load44 = load i32 from ptr %c.stack
  45 = mul i32 %c.stack.load44, i32 9072
  46 = ptradd ptr %43, i32 %45
  d.stack.load47 = load i32 from ptr %d.stack
  48 = mul i32 %d.stack.load47, i32 504
  49 = ptradd ptr %46, i32 %48
  e.stack.load50 = load i32 from ptr %e.stack
  51 = mul i32 %e.stack.load50, i32 28
  52 = ptradd ptr %49, i32 %51
  last.stack.load53 = load i32 from ptr %last.stack
  54 = mul i32 %last.stack.load53, i32 4
  55 = ptradd ptr %52, i32 %54
  55.load = load i32 from ptr %55
  ret i32 %55.load
if.exit37:
  a.stack9.load57 = load i32 from ptr %a.stack9
  b.stack10.load58 = load i32 from ptr %b.stack10
  59 = add i32 %a.stack9.load57, i32 %b.stack10.load58
  c.stack.load60 = load i32 from ptr %c.stack
  61 = add i32 %59, i32 %c.stack.load60
  d.stack.load62 = load i32 from ptr %d.stack
  63 = add i32 %61, i32 %d.stack.load62
  e.stack.load64 = load i32 from ptr %e.stack
  65 = add i32 %63, i32 %e.stack.load64
  66 = icmp eq i32 %65, i32 0
  br i1 %66, bb %then67, bb %if.exit68
then67:
  ret i32 1
if.exit68:
  store i32 0 to ptr %ans
  a.stack9.load70 = load i32 from ptr %a.stack9
  71 = icmp ne i32 %a.stack9.load70, i32 0
  br i1 %71, bb %then72, bb %if.exit73
then72:
  ans.load = load i32 from ptr %ans
  a.stack9.load75 = load i32 from ptr %a.stack9
  last.stack.load76 = load i32 from ptr %last.stack
  77 = call i32 equal(i32 %last.stack.load76, i32 2)
  78 = sub i32 %a.stack9.load75, i32 %77
  a.stack9.load79 = load i32 from ptr %a.stack9
  80 = sub i32 %a.stack9.load79, i32 1
  b.stack10.load81 = load i32 from ptr %b.stack10
  c.stack.load82 = load i32 from ptr %c.stack
  d.stack.load83 = load i32 from ptr %d.stack
  e.stack.load84 = load i32 from ptr %e.stack
  85 = call i32 dfs(i32 %80, i32 %b.stack10.load81, i32 %c.stack.load82, i32 %d.stack.load83, i32 %e.stack.load84, i32 1)
  86 = mul i32 %78, i32 %85
  87 = add i32 %ans.load, i32 %86
  mod.load = load i32 from ptr @mod
  89 = srem i32 %87, i32 %mod.load
  store i32 %89 to ptr %ans
  br bb %if.exit73
if.exit73:
  b.stack10.load90 = load i32 from ptr %b.stack10
  91 = icmp ne i32 %b.stack10.load90, i32 0
  br i1 %91, bb %then92, bb %if.exit93
then92:
  ans.load94 = load i32 from ptr %ans
  b.stack10.load95 = load i32 from ptr %b.stack10
  last.stack.load96 = load i32 from ptr %last.stack
  97 = call i32 equal(i32 %last.stack.load96, i32 3)
  98 = sub i32 %b.stack10.load95, i32 %97
  a.stack9.load99 = load i32 from ptr %a.stack9
  100 = add i32 %a.stack9.load99, i32 1
  b.stack10.load101 = load i32 from ptr %b.stack10
  102 = sub i32 %b.stack10.load101, i32 1
  c.stack.load103 = load i32 from ptr %c.stack
  d.stack.load104 = load i32 from ptr %d.stack
  e.stack.load105 = load i32 from ptr %e.stack
  106 = call i32 dfs(i32 %100, i32 %102, i32 %c.stack.load103, i32 %d.stack.load104, i32 %e.stack.load105, i32 2)
  107 = mul i32 %98, i32 %106
  108 = add i32 %ans.load94, i32 %107
  mod.load109 = load i32 from ptr @mod
  110 = srem i32 %108, i32 %mod.load109
  store i32 %110 to ptr %ans
  br bb %if.exit93
if.exit93:
  c.stack.load111 = load i32 from ptr %c.stack
  112 = icmp ne i32 %c.stack.load111, i32 0
  br i1 %112, bb %then113, bb %if.exit114
then113:
  ans.load115 = load i32 from ptr %ans
  c.stack.load116 = load i32 from ptr %c.stack
  last.stack.load117 = load i32 from ptr %last.stack
  118 = call i32 equal(i32 %last.stack.load117, i32 4)
  119 = sub i32 %c.stack.load116, i32 %118
  a.stack9.load120 = load i32 from ptr %a.stack9
  b.stack10.load121 = load i32 from ptr %b.stack10
  122 = add i32 %b.stack10.load121, i32 1
  c.stack.load123 = load i32 from ptr %c.stack
  124 = sub i32 %c.stack.load123, i32 1
  d.stack.load125 = load i32 from ptr %d.stack
  e.stack.load126 = load i32 from ptr %e.stack
  127 = call i32 dfs(i32 %a.stack9.load120, i32 %122, i32 %124, i32 %d.stack.load125, i32 %e.stack.load126, i32 3)
  128 = mul i32 %119, i32 %127
  129 = add i32 %ans.load115, i32 %128
  mod.load130 = load i32 from ptr @mod
  131 = srem i32 %129, i32 %mod.load130
  store i32 %131 to ptr %ans
  br bb %if.exit114
if.exit114:
  d.stack.load132 = load i32 from ptr %d.stack
  133 = icmp ne i32 %d.stack.load132, i32 0
  br i1 %133, bb %then134, bb %if.exit135
then134:
  ans.load136 = load i32 from ptr %ans
  d.stack.load137 = load i32 from ptr %d.stack
  last.stack.load138 = load i32 from ptr %last.stack
  139 = call i32 equal(i32 %last.stack.load138, i32 5)
  140 = sub i32 %d.stack.load137, i32 %139
  a.stack9.load141 = load i32 from ptr %a.stack9
  b.stack10.load142 = load i32 from ptr %b.stack10
  c.stack.load143 = load i32 from ptr %c.stack
  144 = add i32 %c.stack.load143, i32 1
  d.stack.load145 = load i32 from ptr %d.stack
  146 = sub i32 %d.stack.load145, i32 1
  e.stack.load147 = load i32 from ptr %e.stack
  148 = call i32 dfs(i32 %a.stack9.load141, i32 %b.stack10.load142, i32 %144, i32 %146, i32 %e.stack.load147, i32 4)
  149 = mul i32 %140, i32 %148
  150 = add i32 %ans.load136, i32 %149
  mod.load151 = load i32 from ptr @mod
  152 = srem i32 %150, i32 %mod.load151
  store i32 %152 to ptr %ans
  br bb %if.exit135
if.exit135:
  e.stack.load153 = load i32 from ptr %e.stack
  154 = icmp ne i32 %e.stack.load153, i32 0
  br i1 %154, bb %then155, bb %if.exit156
then155:
  ans.load157 = load i32 from ptr %ans
  e.stack.load158 = load i32 from ptr %e.stack
  a.stack9.load159 = load i32 from ptr %a.stack9
  b.stack10.load160 = load i32 from ptr %b.stack10
  c.stack.load161 = load i32 from ptr %c.stack
  d.stack.load162 = load i32 from ptr %d.stack
  163 = add i32 %d.stack.load162, i32 1
  e.stack.load164 = load i32 from ptr %e.stack
  165 = sub i32 %e.stack.load164, i32 1
  166 = call i32 dfs(i32 %a.stack9.load159, i32 %b.stack10.load160, i32 %c.stack.load161, i32 %163, i32 %165, i32 5)
  167 = mul i32 %e.stack.load158, i32 %166
  168 = add i32 %ans.load157, i32 %167
  mod.load169 = load i32 from ptr @mod
  170 = srem i32 %168, i32 %mod.load169
  store i32 %170 to ptr %ans
  br bb %if.exit156
if.exit156:
  a.stack9.load171 = load i32 from ptr %a.stack9
  172 = mul i32 %a.stack9.load171, i32 2939328
  173 = ptradd ptr @dp, i32 %172
  b.stack10.load174 = load i32 from ptr %b.stack10
  175 = mul i32 %b.stack10.load174, i32 163296
  176 = ptradd ptr %173, i32 %175
  c.stack.load177 = load i32 from ptr %c.stack
  178 = mul i32 %c.stack.load177, i32 9072
  179 = ptradd ptr %176, i32 %178
  d.stack.load180 = load i32 from ptr %d.stack
  181 = mul i32 %d.stack.load180, i32 504
  182 = ptradd ptr %179, i32 %181
  e.stack.load183 = load i32 from ptr %e.stack
  184 = mul i32 %e.stack.load183, i32 28
  185 = ptradd ptr %182, i32 %184
  last.stack.load186 = load i32 from ptr %last.stack
  187 = mul i32 %last.stack.load186, i32 4
  188 = ptradd ptr %185, i32 %187
  ans.load189 = load i32 from ptr %ans
  mod.load190 = load i32 from ptr @mod
  191 = srem i32 %ans.load189, i32 %mod.load190
  store i32 %191 to ptr %188
  a.stack9.load192 = load i32 from ptr %a.stack9
  193 = mul i32 %a.stack9.load192, i32 2939328
  194 = ptradd ptr @dp, i32 %193
  b.stack10.load195 = load i32 from ptr %b.stack10
  196 = mul i32 %b.stack10.load195, i32 163296
  197 = ptradd ptr %194, i32 %196
  c.stack.load198 = load i32 from ptr %c.stack
  199 = mul i32 %c.stack.load198, i32 9072
  200 = ptradd ptr %197, i32 %199
  d.stack.load201 = load i32 from ptr %d.stack
  202 = mul i32 %d.stack.load201, i32 504
  203 = ptradd ptr %200, i32 %202
  e.stack.load204 = load i32 from ptr %e.stack
  205 = mul i32 %e.stack.load204, i32 28
  206 = ptradd ptr %203, i32 %205
  last.stack.load207 = load i32 from ptr %last.stack
  208 = mul i32 %last.stack.load207, i32 4
  209 = ptradd ptr %206, i32 %208
  209.load = load i32 from ptr %209
  ret i32 %209.load
}

external i32 getint()

external i32 getch()

external void putint(i32 )

i32 equal(i32 a, i32 b) {
entry:
  %b.stack = stack 4
  %a.stack = stack 4
  store i32 %a to ptr %a.stack
  store i32 %b to ptr %b.stack
  a.stack.load = load i32 from ptr %a.stack
  5 = icmp eq i32 %a.stack.load, i32 %b
  br i1 %5, bb %then, bb %if.exit
then:
  ret i32 1
if.exit:
  ret i32 0
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry211:
  %ans319 = stack 4
  %h = stack 4
  %m = stack 4
  %l = stack 4
  %k = stack 4
  %j = stack 4
  %i = stack 4
  %n = stack 4
  213 = call i32 getint()
  store i32 %213 to ptr %n
  store i32 0 to ptr %i
  br bb %while.cond
while.cond:
  i.load = load i32 from ptr %i
  maxn.load = load i32 from ptr @maxn
  220 = icmp slt i32 %i.load, i32 %maxn.load
  221 = icmp ne i1 %220, i1 0
  br i1 %221, bb %while.body, bb %while.exit
while.body:
  store i32 0 to ptr %j
  br bb %while.cond223
while.exit:
  store i32 0 to ptr %i
  br bb %while.cond292
while.cond223:
  j.load = load i32 from ptr %j
  maxn.load227 = load i32 from ptr @maxn
  228 = icmp slt i32 %j.load, i32 %maxn.load227
  229 = icmp ne i1 %228, i1 0
  br i1 %229, bb %while.body224, bb %while.exit225
while.body224:
  store i32 0 to ptr %k
  br bb %while.cond231
while.exit225:
  i.load290 = load i32 from ptr %i
  291 = add i32 %i.load290, i32 1
  store i32 %291 to ptr %i
  br bb %while.cond
while.cond231:
  k.load = load i32 from ptr %k
  maxn.load235 = load i32 from ptr @maxn
  236 = icmp slt i32 %k.load, i32 %maxn.load235
  237 = icmp ne i1 %236, i1 0
  br i1 %237, bb %while.body232, bb %while.exit233
while.body232:
  store i32 0 to ptr %l
  br bb %while.cond239
while.exit233:
  j.load288 = load i32 from ptr %j
  289 = add i32 %j.load288, i32 1
  store i32 %289 to ptr %j
  br bb %while.cond223
while.cond239:
  l.load = load i32 from ptr %l
  maxn.load243 = load i32 from ptr @maxn
  244 = icmp slt i32 %l.load, i32 %maxn.load243
  245 = icmp ne i1 %244, i1 0
  br i1 %245, bb %while.body240, bb %while.exit241
while.body240:
  store i32 0 to ptr %m
  br bb %while.cond247
while.exit241:
  k.load286 = load i32 from ptr %k
  287 = add i32 %k.load286, i32 1
  store i32 %287 to ptr %k
  br bb %while.cond231
while.cond247:
  m.load = load i32 from ptr %m
  maxn.load251 = load i32 from ptr @maxn
  252 = icmp slt i32 %m.load, i32 %maxn.load251
  253 = icmp ne i1 %252, i1 0
  br i1 %253, bb %while.body248, bb %while.exit249
while.body248:
  store i32 0 to ptr %h
  br bb %while.cond255
while.exit249:
  l.load284 = load i32 from ptr %l
  285 = add i32 %l.load284, i32 1
  store i32 %285 to ptr %l
  br bb %while.cond239
while.cond255:
  h.load = load i32 from ptr %h
  259 = icmp slt i32 %h.load, i32 7
  260 = icmp ne i1 %259, i1 0
  br i1 %260, bb %while.body256, bb %while.exit257
while.body256:
  i.load261 = load i32 from ptr %i
  262 = mul i32 %i.load261, i32 2939328
  263 = ptradd ptr @dp, i32 %262
  j.load264 = load i32 from ptr %j
  265 = mul i32 %j.load264, i32 163296
  266 = ptradd ptr %263, i32 %265
  k.load267 = load i32 from ptr %k
  268 = mul i32 %k.load267, i32 9072
  269 = ptradd ptr %266, i32 %268
  l.load270 = load i32 from ptr %l
  271 = mul i32 %l.load270, i32 504
  272 = ptradd ptr %269, i32 %271
  m.load273 = load i32 from ptr %m
  274 = mul i32 %m.load273, i32 28
  275 = ptradd ptr %272, i32 %274
  h.load276 = load i32 from ptr %h
  277 = mul i32 %h.load276, i32 4
  278 = ptradd ptr %275, i32 %277
  279 = sub i32 0, i32 1
  store i32 %279 to ptr %278
  h.load280 = load i32 from ptr %h
  281 = add i32 %h.load280, i32 1
  store i32 %281 to ptr %h
  br bb %while.cond255
while.exit257:
  m.load282 = load i32 from ptr %m
  283 = add i32 %m.load282, i32 1
  store i32 %283 to ptr %m
  br bb %while.cond247
while.cond292:
  i.load295 = load i32 from ptr %i
  n.load = load i32 from ptr %n
  297 = icmp slt i32 %i.load295, i32 %n.load
  298 = icmp ne i1 %297, i1 0
  br i1 %298, bb %while.body293, bb %while.exit294
while.body293:
  i.load299 = load i32 from ptr %i
  300 = mul i32 %i.load299, i32 4
  301 = ptradd ptr @list, i32 %300
  302 = call i32 getint()
  store i32 %302 to ptr %301
  i.load303 = load i32 from ptr %i
  304 = mul i32 %i.load303, i32 4
  305 = ptradd ptr @list, i32 %304
  305.load = load i32 from ptr %305
  307 = mul i32 %305.load, i32 4
  308 = ptradd ptr @cns, i32 %307
  i.load309 = load i32 from ptr %i
  310 = mul i32 %i.load309, i32 4
  311 = ptradd ptr @list, i32 %310
  311.load = load i32 from ptr %311
  313 = mul i32 %311.load, i32 4
  314 = ptradd ptr @cns, i32 %313
  314.load = load i32 from ptr %314
  316 = add i32 %314.load, i32 1
  store i32 %316 to ptr %308
  i.load317 = load i32 from ptr %i
  318 = add i32 %i.load317, i32 1
  store i32 %318 to ptr %i
  br bb %while.cond292
while.exit294:
  320 = mul i32 1, i32 4
  321 = ptradd ptr @cns, i32 %320
  321.load = load i32 from ptr %321
  323 = mul i32 2, i32 4
  324 = ptradd ptr @cns, i32 %323
  324.load = load i32 from ptr %324
  326 = mul i32 3, i32 4
  327 = ptradd ptr @cns, i32 %326
  327.load = load i32 from ptr %327
  329 = mul i32 4, i32 4
  330 = ptradd ptr @cns, i32 %329
  330.load = load i32 from ptr %330
  332 = mul i32 5, i32 4
  333 = ptradd ptr @cns, i32 %332
  333.load = load i32 from ptr %333
  335 = call i32 dfs(i32 %321.load, i32 %324.load, i32 %327.load, i32 %330.load, i32 %333.load, i32 0)
  store i32 %335 to ptr %ans319
  call void putint(i32 %335)
  ans319.load338 = load i32 from ptr %ans319
  ret i32 %ans319.load338
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


