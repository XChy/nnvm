immutable global ptr ascii_0 init with i32 48
external i32 getint()

external i32 getch()

void my_putint(i32 a) {
entry48:
  %b = stack 64
  br bb %while.cond52
while.cond52:
  i.phi100 = phi [bb %entry48, i32 0, bb %while.body53, i32 %68]
  a.stack.phi = phi [bb %entry48, i32 %a, bb %while.body53, i32 %66]
  56 = icmp sgt i32 %a.stack.phi, i32 0
  br i1 %56, bb %while.body53, bb %while.exit54
while.body53:
  59 = mul i32 %i.phi100, i32 4
  60 = ptradd ptr %b, i32 %59
  62 = srem i32 %a.stack.phi, i32 10
  ascii_0.load63 = load i32 from ptr @ascii_0
  64 = add i32 %62, i32 %ascii_0.load63
  store i32 %64 to ptr %60
  66 = sdiv i32 %a.stack.phi, i32 10
  68 = add i32 %i.phi100, i32 1
  br bb %while.cond52
while.exit54:
  br bb %while.cond69
while.cond69:
  i.phi = phi [bb %while.exit54, i32 %i.phi100, bb %while.body70, i32 %76]
  73 = icmp sgt i32 %i.phi, i32 0
  br i1 %73, bb %while.body70, bb %while.exit71
while.body70:
  76 = sub i32 %i.phi, i32 1
  78 = mul i32 %76, i32 4
  79 = ptradd ptr %b, i32 %78
  79.load = load i32 from ptr %79
  call void putch(i32 %79.load)
  br bb %while.cond69
while.exit71:
  ret 
}

external void putint(i32 )

i32 my_getint() {
entry:
  br bb %while.cond
while.cond:
  c.phi103 = phi [bb %entry, i32 ub, bb %then, i32 %9]
  br bb %while.body
while.body:
  7 = call i32 getch()
  ascii_0.load = load i32 from ptr @ascii_0
  9 = sub i32 %7, i32 %ascii_0.load
  11 = icmp slt i32 %9, i32 0
  br i1 %11, bb %select.then, bb %select.else
while.exit:
  c.phi104 = phi [bb %while.cond, i32 %c.phi103, bb %else, i32 %9]
  br bb %while.cond24
select.then:
  br bb %select.exit
select.else:
  17 = icmp sgt i32 %9, i32 9
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %17, bb %select.then, i1 1]
  br i1 %select.phi, bb %then, bb %else
then:
  br bb %while.cond
else:
  br bb %while.exit
while.cond24:
  sum.phi = phi [bb %while.exit, i32 %c.phi104, bb %then40, i32 %46]
  br bb %while.body25
while.body25:
  28 = call i32 getch()
  ascii_0.load29 = load i32 from ptr @ascii_0
  30 = sub i32 %28, i32 %ascii_0.load29
  32 = icmp sge i32 %30, i32 0
  br i1 %32, bb %select.then33, bb %select.else34
while.exit26:
  ret i32 %sum.phi
select.then33:
  38 = icmp sle i32 %30, i32 9
  br bb %select.exit35
select.else34:
  br bb %select.exit35
select.exit35:
  select36.phi = phi [bb %select.else34, i1 0, bb %select.then33, i1 %38]
  br i1 %select36.phi, bb %then40, bb %else42
then40:
  44 = mul i32 %sum.phi, i32 10
  46 = add i32 %44, i32 %30
  br bb %while.cond24
else42:
  br bb %while.exit26
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry82:
  84 = call i32 my_getint()
  br bb %while.cond85
while.cond85:
  n.phi = phi [bb %entry82, i32 %84, bb %while.body86, i32 %97]
  89 = icmp sgt i32 %n.phi, i32 0
  br i1 %89, bb %while.body86, bb %while.exit87
while.body86:
  92 = call i32 my_getint()
  call void my_putint(i32 %92)
  call void putch(i32 10)
  97 = sub i32 %n.phi, i32 1
  br bb %while.cond85
while.exit87:
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


