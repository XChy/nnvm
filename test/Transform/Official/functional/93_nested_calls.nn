pure i32 func6(i32 x, i32 y) {
entry59:
  63 = icmp ne i32 %x, i32 0
  br i1 %63, bb %select.then, bb %select.else
select.then:
  69 = icmp ne i32 %y, i32 0
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %69]
  br i1 %select.phi, bb %then71, bb %else73
then71:
  ret i32 1
else73:
  ret i32 0
}

pure i32 func5(i32 x) {
entry55:
  58 = sub i32 0, i32 %x
  ret i32 %58
}

pure i32 func2(i32 x, i32 y) {
entry17:
  21 = icmp ne i32 %y, i32 0
  br i1 %21, bb %then22, bb %else24
then22:
  27 = srem i32 %x, i32 %y
  28 = call i32 func2(i32 %27, i32 0)
  ret i32 %28
else24:
  ret i32 %x
}

external i32 getint()

pure i32 func3(i32 x, i32 y) {
entry30:
  34 = icmp eq i32 %y, i32 0
  br i1 %34, bb %then35, bb %else37
then35:
  39 = add i32 %x, i32 1
  ret i32 %39
else37:
  42 = add i32 %x, i32 %y
  43 = call i32 func3(i32 %42, i32 0)
  ret i32 %43
}

external i32 getch()

external void putint(i32 )

pure i32 func7(i32 x) {
entry74:
  77 = icmp ne i32 %x, i32 0
  78 = xor i1 %77, i1 1
  79 = zext i1 %78 to i32
  80 = icmp ne i32 %79, i32 0
  br i1 %80, bb %then81, bb %else83
then81:
  ret i32 1
else83:
  ret i32 0
}

pure i32 func4(i32 x, i32 y, i32 z) {
entry44:
  49 = icmp ne i32 %x, i32 0
  br i1 %49, bb %then50, bb %else52
then50:
  ret i32 %y
else52:
  ret i32 %z
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry84:
  %arr = stack 40
  86 = call i32 getint()
  88 = call i32 getint()
  90 = call i32 getint()
  92 = call i32 getint()
  br bb %while.cond
while.cond:
  i.phi = phi [bb %entry84, i32 0, bb %while.body, i32 %106]
  99 = icmp slt i32 %i.phi, i32 10
  br i1 %99, bb %while.body, bb %while.exit
while.body:
  102 = mul i32 %i.phi, i32 4
  103 = ptradd ptr %arr, i32 %102
  104 = call i32 getint()
  store i32 %104 to ptr %103
  106 = add i32 %i.phi, i32 1
  br bb %while.cond
while.exit:
  77280 = icmp ne i32 %86, i32 0
  78281 = xor i1 %77280, i1 1
  79282 = zext i1 %78281 to i32
  80283 = icmp ne i32 %79282, i32 0
  br i1 %80283, bb %func7.then81, bb %func7.else83
while.exit.split278:
  109.ret = phi [bb %func7.then81, i32 1, bb %func7.else83, i32 0]
  58250 = sub i32 0, i32 %88
  63216 = icmp ne i32 %109.ret, i32 0
  br i1 %63216, bb %func6.select.then, bb %func6.select.else
while.exit.split:
  112.ret = phi [bb %func6.then71, i32 1, bb %func6.else73, i32 0]
  114 = call i32 func2(i32 %112.ret, i32 %90)
  116 = call i32 func3(i32 %114, i32 %92)
  58255 = sub i32 0, i32 %116
  119.load = load i32 from ptr %arr
  122 = ptradd ptr %arr, i32 4
  122.load = load i32 from ptr %122
  58260 = sub i32 0, i32 %122.load
  126 = ptradd ptr %arr, i32 8
  126.load = load i32 from ptr %126
  129 = ptradd ptr %arr, i32 12
  129.load = load i32 from ptr %129
  77292 = icmp ne i32 %129.load, i32 0
  78293 = xor i1 %77292, i1 1
  79294 = zext i1 %78293 to i32
  80295 = icmp ne i32 %79294, i32 0
  br i1 %80295, bb %func7.then81297, bb %func7.else83299
while.exit.split.split253.split.split:
  131.ret = phi [bb %func7.then81297, i32 1, bb %func7.else83299, i32 0]
  63233 = icmp ne i32 %126.load, i32 0
  br i1 %63233, bb %func6.select.then235, bb %func6.select.else238
while.exit.split.split:
  132.ret = phi [bb %func6.then71243, i32 1, bb %func6.else73245, i32 0]
  134 = ptradd ptr %arr, i32 16
  134.load = load i32 from ptr %134
  137 = ptradd ptr %arr, i32 20
  137.load = load i32 from ptr %137
  77304 = icmp ne i32 %137.load, i32 0
  78305 = xor i1 %77304, i1 1
  79306 = zext i1 %78305 to i32
  80307 = icmp ne i32 %79306, i32 0
  br i1 %80307, bb %func7.then81309, bb %func7.else83311
while.exit.split.split.split302:
  139.ret = phi [bb %func7.then81309, i32 1, bb %func7.else83311, i32 0]
  140 = call i32 func2(i32 %134.load, i32 %139.ret)
  49352 = icmp ne i32 %58260, i32 0
  br i1 %49352, bb %func4.then50, bb %func4.else52
while.exit.split.split.split302.split350:
  141.ret = phi [bb %func4.then50, i32 %132.ret, bb %func4.else52, i32 %140]
  143 = ptradd ptr %arr, i32 24
  143.load = load i32 from ptr %143
  145 = call i32 func3(i32 %141.ret, i32 %143.load)
  147 = ptradd ptr %arr, i32 28
  147.load = load i32 from ptr %147
  149 = call i32 func2(i32 %145, i32 %147.load)
  151 = ptradd ptr %arr, i32 32
  151.load = load i32 from ptr %151
  154 = ptradd ptr %arr, i32 36
  154.load = load i32 from ptr %154
  77316 = icmp ne i32 %154.load, i32 0
  78317 = xor i1 %77316, i1 1
  79318 = zext i1 %78317 to i32
  80319 = icmp ne i32 %79318, i32 0
  br i1 %80319, bb %func7.then81321, bb %func7.else83323
while.exit.split.split.split302.split:
  156.ret = phi [bb %func7.then81321, i32 1, bb %func7.else83323, i32 0]
  157 = call i32 func3(i32 %151.load, i32 %156.ret)
  159 = call i32 func1(i32 %149, i32 %157, i32 %86)
  49361 = icmp ne i32 %58255, i32 0
  br i1 %49361, bb %func4.then50363, bb %func4.else52365
while.exit.split.split.split302.split.split359:
  160.ret = phi [bb %func4.then50363, i32 %119.load, bb %func4.else52365, i32 %159]
  77328 = icmp ne i32 %90, i32 0
  78329 = xor i1 %77328, i1 1
  79330 = zext i1 %78329 to i32
  80331 = icmp ne i32 %79330, i32 0
  br i1 %80331, bb %func7.then81333, bb %func7.else83335
while.exit.split.split.split302.split.split:
  163.ret = phi [bb %func7.then81333, i32 1, bb %func7.else83335, i32 0]
  165 = call i32 func3(i32 %163.ret, i32 %92)
  166 = call i32 func2(i32 %88, i32 %165)
  167 = call i32 func3(i32 %160.ret, i32 %166)
  174 = call i32 func1(i32 %167, i32 %119.load, i32 %122.load)
  178 = call i32 func2(i32 %174, i32 %126.load)
  58265 = sub i32 0, i32 %137.load
  189 = call i32 func3(i32 %134.load, i32 %58265)
  58270 = sub i32 0, i32 %143.load
  194 = call i32 func2(i32 %189, i32 %58270)
  77340 = icmp ne i32 %151.load, i32 0
  78341 = xor i1 %77340, i1 1
  79342 = zext i1 %78341 to i32
  80343 = icmp ne i32 %79342, i32 0
  br i1 %80343, bb %func7.then81345, bb %func7.else83347
while.exit.split.split.split.split.split338:
  201.ret = phi [bb %func7.then81345, i32 1, bb %func7.else83347, i32 0]
  202 = call i32 func1(i32 %194, i32 %147.load, i32 %201.ret)
  58275 = sub i32 0, i32 %154.load
  207 = call i32 func2(i32 %202, i32 %58275)
  209 = call i32 func3(i32 %207, i32 %86)
  210 = call i32 func1(i32 %178, i32 %129.load, i32 %209)
  ret i32 %210
func6.select.then:
  69219 = icmp ne i32 %58250, i32 0
  br bb %func6.select.exit
func6.select.else:
  br bb %func6.select.exit
func6.select.exit:
  select.phi224 = phi [bb %func6.select.else, i1 0, bb %func6.select.then, i1 %69219]
  br i1 %select.phi224, bb %func6.then71, bb %func6.else73
func6.then71:
  br bb %while.exit.split
func6.else73:
  br bb %while.exit.split
func6.select.then235:
  69236 = icmp ne i32 %131.ret, i32 0
  br bb %func6.select.exit240
func6.select.else238:
  br bb %func6.select.exit240
func6.select.exit240:
  select.phi241 = phi [bb %func6.select.else238, i1 0, bb %func6.select.then235, i1 %69236]
  br i1 %select.phi241, bb %func6.then71243, bb %func6.else73245
func6.then71243:
  br bb %while.exit.split.split
func6.else73245:
  br bb %while.exit.split.split
func7.then81:
  br bb %while.exit.split278
func7.else83:
  br bb %while.exit.split278
func7.then81297:
  br bb %while.exit.split.split253.split.split
func7.else83299:
  br bb %while.exit.split.split253.split.split
func7.then81309:
  br bb %while.exit.split.split.split302
func7.else83311:
  br bb %while.exit.split.split.split302
func7.then81321:
  br bb %while.exit.split.split.split302.split
func7.else83323:
  br bb %while.exit.split.split.split302.split
func7.then81333:
  br bb %while.exit.split.split.split302.split.split
func7.else83335:
  br bb %while.exit.split.split.split302.split.split
func7.then81345:
  br bb %while.exit.split.split.split.split.split338
func7.else83347:
  br bb %while.exit.split.split.split.split.split338
func4.then50:
  br bb %while.exit.split.split.split302.split350
func4.else52:
  br bb %while.exit.split.split.split302.split350
func4.then50363:
  br bb %while.exit.split.split.split302.split.split359
func4.else52365:
  br bb %while.exit.split.split.split302.split.split359
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

pure i32 func1(i32 x, i32 y, i32 z) {
entry:
  5 = icmp eq i32 %z, i32 0
  br i1 %5, bb %then, bb %else
then:
  11 = mul i32 %x, i32 %y
  ret i32 %11
else:
  15 = sub i32 %y, i32 %z
  16 = call i32 func1(i32 %x, i32 %15, i32 0)
  ret i32 %16
}

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


