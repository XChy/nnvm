pure i32 func6(i32 x, i32 y) {
entry59:  pred()
  63 = icmp ne i32 %x, i32 0
  br i1 %63, bb %select.then, bb %select.else
select.then:  pred(entry59)
  69 = icmp ne i32 %y, i32 0
  br bb %select.exit
select.else:  pred(entry59)
  br bb %select.exit
select.exit:  pred(select.then, select.else)
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %69]
  br i1 %select.phi, bb %then71, bb %else73
then71:  pred(select.exit)
  ret i32 1
else73:  pred(select.exit)
  ret i32 0
}

pure i32 func5(i32 x) {
entry55:  pred()
  58 = sub i32 0, i32 %x
  ret i32 %58
}

pure i32 func2(i32 x, i32 y) {
entry17:  pred()
  21 = icmp ne i32 %y, i32 0
  br i1 %21, bb %then22, bb %else24
then22:  pred(entry17)
  27 = srem i32 %x, i32 %y
  28 = call i32 func2(i32 %27, i32 0)
  ret i32 %28
else24:  pred(entry17)
  ret i32 %x
}

external i32 getint()

pure i32 func3(i32 x, i32 y) {
entry30:  pred()
  34 = icmp eq i32 %y, i32 0
  br i1 %34, bb %then35, bb %else37
then35:  pred(entry30)
  39 = add i32 %x, i32 1
  ret i32 %39
else37:  pred(entry30)
  42 = add i32 %x, i32 %y
  43 = call i32 func3(i32 %42, i32 0)
  ret i32 %43
}

external i32 getch()

external void putint(i32 )

pure i32 func7(i32 x) {
entry74:  pred()
  77 = icmp ne i32 %x, i32 0
  78 = xor i1 %77, i1 -1
  79 = zext i1 %78 to i32
  80 = icmp ne i32 %79, i32 0
  br i1 %80, bb %then81, bb %else83
then81:  pred(entry74)
  ret i32 1
else83:  pred(entry74)
  ret i32 0
}

pure i32 func4(i32 x, i32 y, i32 z) {
entry44:  pred()
  49 = icmp ne i32 %x, i32 0
  br i1 %49, bb %then50, bb %else52
then50:  pred(entry44)
  ret i32 %y
else52:  pred(entry44)
  ret i32 %z
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry84:  pred()
  %arr = stack 40
  86 = call i32 getint()
  88 = call i32 getint()
  90 = call i32 getint()
  92 = call i32 getint()
  br bb %while.body
while.body:  pred(while.body, entry84)
  i.phi372 = phi [bb %while.body, i32 %108, bb %entry84, i32 0]
  216 = shl i32 %i.phi372, i32 2
  103 = ptradd ptr %arr, i32 %216
  105 = call i32 getint()
  store i32 %105 to ptr %103
  108 = add i32 %i.phi372, i32 1
  99 = icmp slt i32 %108, i32 10
  br i1 %99, bb %while.body, bb %while.exit
while.exit:  pred(while.body)
  77283 = icmp ne i32 %86, i32 0
  78284 = xor i1 %77283, i1 -1
  79285 = zext i1 %78284 to i32
  80286 = icmp ne i32 %79285, i32 0
  br i1 %80286, bb %func7.then81, bb %func7.else83
while.exit.split281:  pred(func7.then81, func7.else83)
  111.ret = phi [bb %func7.then81, i32 1, bb %func7.else83, i32 0]
  58253 = sub i32 0, i32 %88
  63219 = icmp ne i32 %111.ret, i32 0
  br i1 %63219, bb %func6.select.then, bb %func6.select.else
while.exit.split:  pred(func6.then71, func6.else73)
  114.ret = phi [bb %func6.then71, i32 1, bb %func6.else73, i32 0]
  116 = call i32 func2(i32 %114.ret, i32 %90)
  118 = call i32 func3(i32 %116, i32 %92)
  58258 = sub i32 0, i32 %118
  121.load = load i32 from ptr %arr
  124 = ptradd ptr %arr, i32 4
  124.load = load i32 from ptr %124
  58263 = sub i32 0, i32 %124.load
  128 = ptradd ptr %arr, i32 8
  128.load = load i32 from ptr %128
  131 = ptradd ptr %arr, i32 12
  131.load = load i32 from ptr %131
  77295 = icmp ne i32 %131.load, i32 0
  78296 = xor i1 %77295, i1 -1
  79297 = zext i1 %78296 to i32
  80298 = icmp ne i32 %79297, i32 0
  br i1 %80298, bb %func7.then81300, bb %func7.else83302
while.exit.split.split256.split.split:  pred(func7.then81300, func7.else83302)
  133.ret = phi [bb %func7.then81300, i32 1, bb %func7.else83302, i32 0]
  63236 = icmp ne i32 %128.load, i32 0
  br i1 %63236, bb %func6.select.then238, bb %func6.select.else241
while.exit.split.split:  pred(func6.then71246, func6.else73248)
  134.ret = phi [bb %func6.then71246, i32 1, bb %func6.else73248, i32 0]
  136 = ptradd ptr %arr, i32 16
  136.load = load i32 from ptr %136
  139 = ptradd ptr %arr, i32 20
  139.load = load i32 from ptr %139
  77307 = icmp ne i32 %139.load, i32 0
  78308 = xor i1 %77307, i1 -1
  79309 = zext i1 %78308 to i32
  80310 = icmp ne i32 %79309, i32 0
  br i1 %80310, bb %func7.then81312, bb %func7.else83314
while.exit.split.split.split305:  pred(func7.then81312, func7.else83314)
  141.ret = phi [bb %func7.then81312, i32 1, bb %func7.else83314, i32 0]
  142 = call i32 func2(i32 %136.load, i32 %141.ret)
  49355 = icmp ne i32 %58263, i32 0
  br i1 %49355, bb %func4.then50, bb %func4.else52
while.exit.split.split.split305.split353:  pred(func4.then50, func4.else52)
  143.ret = phi [bb %func4.then50, i32 %134.ret, bb %func4.else52, i32 %142]
  145 = ptradd ptr %arr, i32 24
  145.load = load i32 from ptr %145
  147 = call i32 func3(i32 %143.ret, i32 %145.load)
  149 = ptradd ptr %arr, i32 28
  149.load = load i32 from ptr %149
  151 = call i32 func2(i32 %147, i32 %149.load)
  153 = ptradd ptr %arr, i32 32
  153.load = load i32 from ptr %153
  156 = ptradd ptr %arr, i32 36
  156.load = load i32 from ptr %156
  77319 = icmp ne i32 %156.load, i32 0
  78320 = xor i1 %77319, i1 -1
  79321 = zext i1 %78320 to i32
  80322 = icmp ne i32 %79321, i32 0
  br i1 %80322, bb %func7.then81324, bb %func7.else83326
while.exit.split.split.split305.split:  pred(func7.then81324, func7.else83326)
  158.ret = phi [bb %func7.then81324, i32 1, bb %func7.else83326, i32 0]
  159 = call i32 func3(i32 %153.load, i32 %158.ret)
  161 = call i32 func1(i32 %151, i32 %159, i32 %86)
  49364 = icmp ne i32 %58258, i32 0
  br i1 %49364, bb %func4.then50366, bb %func4.else52368
while.exit.split.split.split305.split.split362:  pred(func4.then50366, func4.else52368)
  162.ret = phi [bb %func4.then50366, i32 %121.load, bb %func4.else52368, i32 %161]
  77331 = icmp ne i32 %90, i32 0
  78332 = xor i1 %77331, i1 -1
  79333 = zext i1 %78332 to i32
  80334 = icmp ne i32 %79333, i32 0
  br i1 %80334, bb %func7.then81336, bb %func7.else83338
while.exit.split.split.split305.split.split:  pred(func7.then81336, func7.else83338)
  165.ret = phi [bb %func7.then81336, i32 1, bb %func7.else83338, i32 0]
  167 = call i32 func3(i32 %165.ret, i32 %92)
  168 = call i32 func2(i32 %88, i32 %167)
  169 = call i32 func3(i32 %162.ret, i32 %168)
  176 = call i32 func1(i32 %169, i32 %121.load, i32 %124.load)
  180 = call i32 func2(i32 %176, i32 %128.load)
  58268 = sub i32 0, i32 %139.load
  191 = call i32 func3(i32 %136.load, i32 %58268)
  58273 = sub i32 0, i32 %145.load
  196 = call i32 func2(i32 %191, i32 %58273)
  77343 = icmp ne i32 %153.load, i32 0
  78344 = xor i1 %77343, i1 -1
  79345 = zext i1 %78344 to i32
  80346 = icmp ne i32 %79345, i32 0
  br i1 %80346, bb %func7.then81348, bb %func7.else83350
while.exit.split.split.split.split.split341:  pred(func7.then81348, func7.else83350)
  203.ret = phi [bb %func7.then81348, i32 1, bb %func7.else83350, i32 0]
  204 = call i32 func1(i32 %196, i32 %149.load, i32 %203.ret)
  58278 = sub i32 0, i32 %156.load
  209 = call i32 func2(i32 %204, i32 %58278)
  211 = call i32 func3(i32 %209, i32 %86)
  212 = call i32 func1(i32 %180, i32 %131.load, i32 %211)
  ret i32 %212
func6.select.then:  pred(while.exit.split281)
  69222 = icmp ne i32 %58253, i32 0
  br bb %func6.select.exit
func6.select.else:  pred(while.exit.split281)
  br bb %func6.select.exit
func6.select.exit:  pred(func6.select.then, func6.select.else)
  select.phi227 = phi [bb %func6.select.else, i1 0, bb %func6.select.then, i1 %69222]
  br i1 %select.phi227, bb %func6.then71, bb %func6.else73
func6.then71:  pred(func6.select.exit)
  br bb %while.exit.split
func6.else73:  pred(func6.select.exit)
  br bb %while.exit.split
func6.select.then238:  pred(while.exit.split.split256.split.split)
  69239 = icmp ne i32 %133.ret, i32 0
  br bb %func6.select.exit243
func6.select.else241:  pred(while.exit.split.split256.split.split)
  br bb %func6.select.exit243
func6.select.exit243:  pred(func6.select.then238, func6.select.else241)
  select.phi244 = phi [bb %func6.select.else241, i1 0, bb %func6.select.then238, i1 %69239]
  br i1 %select.phi244, bb %func6.then71246, bb %func6.else73248
func6.then71246:  pred(func6.select.exit243)
  br bb %while.exit.split.split
func6.else73248:  pred(func6.select.exit243)
  br bb %while.exit.split.split
func7.then81:  pred(while.exit)
  br bb %while.exit.split281
func7.else83:  pred(while.exit)
  br bb %while.exit.split281
func7.then81300:  pred(while.exit.split)
  br bb %while.exit.split.split256.split.split
func7.else83302:  pred(while.exit.split)
  br bb %while.exit.split.split256.split.split
func7.then81312:  pred(while.exit.split.split)
  br bb %while.exit.split.split.split305
func7.else83314:  pred(while.exit.split.split)
  br bb %while.exit.split.split.split305
func7.then81324:  pred(while.exit.split.split.split305.split353)
  br bb %while.exit.split.split.split305.split
func7.else83326:  pred(while.exit.split.split.split305.split353)
  br bb %while.exit.split.split.split305.split
func7.then81336:  pred(while.exit.split.split.split305.split.split362)
  br bb %while.exit.split.split.split305.split.split
func7.else83338:  pred(while.exit.split.split.split305.split.split362)
  br bb %while.exit.split.split.split305.split.split
func7.then81348:  pred(while.exit.split.split.split305.split.split)
  br bb %while.exit.split.split.split.split.split341
func7.else83350:  pred(while.exit.split.split.split305.split.split)
  br bb %while.exit.split.split.split.split.split341
func4.then50:  pred(while.exit.split.split.split305)
  br bb %while.exit.split.split.split305.split353
func4.else52:  pred(while.exit.split.split.split305)
  br bb %while.exit.split.split.split305.split353
func4.then50366:  pred(while.exit.split.split.split305.split)
  br bb %while.exit.split.split.split305.split.split362
func4.else52368:  pred(while.exit.split.split.split305.split)
  br bb %while.exit.split.split.split305.split.split362
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

pure i32 func1(i32 x, i32 y, i32 z) {
entry:  pred()
  5 = icmp eq i32 %z, i32 0
  br i1 %5, bb %then, bb %else
then:  pred(entry)
  11 = mul i32 %x, i32 %y
  ret i32 %11
else:  pred(entry)
  15 = sub i32 %y, i32 %z
  16 = call i32 func1(i32 %x, i32 %15, i32 0)
  ret i32 %16
}

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


