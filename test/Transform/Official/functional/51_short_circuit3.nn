global ptr b init with i32 0
global ptr d init with i32 0
global ptr a init with i32 0
i32 set_d(i32 val) {
entry8:
  store i32 %val to ptr @d
  ret i32 %val
}

i32 set_b(i32 val) {
entry4:
  store i32 %val to ptr @b
  ret i32 %val
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry12:
  store i32 2 to ptr @a
  store i32 3 to ptr @b
  13 = call i32 set_a(i32 0)
  14 = icmp ne i32 %13, i32 0
  br i1 %14, bb %select.then, bb %select.else
select.then:
  19 = call i32 set_b(i32 1)
  20 = icmp ne i32 %19, i32 0
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  243 = phi [bb %select.else, i1 0, bb %select.then, i1 %20]
  br i1 %243, bb %then, bb %if.exit
then:
  br bb %if.exit
if.exit:
  a.load24 = load i32 from ptr @a
  call void putint(i32 %a.load24)
  call void putch(i32 32)
  b.load27 = load i32 from ptr @b
  call void putint(i32 %b.load27)
  call void putch(i32 32)
  store i32 2 to ptr @a
  store i32 3 to ptr @b
  30 = call i32 set_a(i32 0)
  31 = icmp ne i32 %30, i32 0
  br i1 %31, bb %select.then32, bb %select.else33
select.then32:
  36 = call i32 set_b(i32 1)
  37 = icmp ne i32 %36, i32 0
  br bb %select.exit34
select.else33:
  br bb %select.exit34
select.exit34:
  230 = phi [bb %select.else33, i1 0, bb %select.then32, i1 %37]
  br i1 %230, bb %then39, bb %if.exit40
then39:
  br bb %if.exit40
if.exit40:
  a.load41 = load i32 from ptr @a
  call void putint(i32 %a.load41)
  call void putch(i32 32)
  b.load44 = load i32 from ptr @b
  call void putint(i32 %b.load44)
  call void putch(i32 10)
  store i32 2 to ptr @d
  47 = icmp sge i32 1, i32 1
  br i1 %47, bb %select.then48, bb %select.else49
select.then48:
  52 = call i32 set_d(i32 3)
  53 = icmp ne i32 %52, i32 0
  br bb %select.exit50
select.else49:
  br bb %select.exit50
select.exit50:
  241 = phi [bb %select.else49, i1 0, bb %select.then48, i1 %53]
  br i1 %241, bb %then55, bb %if.exit56
then55:
  br bb %if.exit56
if.exit56:
  d.load57 = load i32 from ptr @d
  call void putint(i32 %d.load57)
  call void putch(i32 32)
  60 = icmp sle i32 1, i32 1
  br i1 %60, bb %select.then61, bb %select.else62
select.then61:
  br bb %select.exit63
select.else62:
  65 = call i32 set_d(i32 4)
  66 = icmp ne i32 %65, i32 0
  67 = icmp ne i1 %66, i1 0
  br bb %select.exit63
select.exit63:
  231 = phi [bb %select.else62, i1 %67, bb %select.then61, i1 1]
  br i1 %231, bb %then69, bb %if.exit70
then69:
  br bb %if.exit70
if.exit70:
  d.load71 = load i32 from ptr @d
  call void putint(i32 %d.load71)
  call void putch(i32 10)
  74 = add i32 2, i32 1
  75 = sub i32 3, i32 %74
  76 = icmp sge i32 16, i32 %75
  br i1 %76, bb %then77, bb %if.exit78
then77:
  call void putch(i32 65)
  br bb %if.exit78
if.exit78:
  80 = sub i32 25, i32 7
  81 = mul i32 6, i32 3
  82 = sub i32 36, i32 %81
  83 = icmp ne i32 %80, i32 %82
  br i1 %83, bb %then84, bb %if.exit85
then84:
  call void putch(i32 66)
  br bb %if.exit85
if.exit85:
  87 = icmp slt i32 1, i32 8
  88 = srem i32 7, i32 2
  89 = zext i1 %87 to i32
  90 = icmp ne i32 %89, i32 %88
  br i1 %90, bb %then91, bb %if.exit92
then91:
  call void putch(i32 67)
  br bb %if.exit92
if.exit92:
  94 = icmp sgt i32 3, i32 4
  95 = zext i1 %94 to i32
  96 = icmp eq i32 %95, i32 0
  br i1 %96, bb %then97, bb %if.exit98
then97:
  call void putch(i32 68)
  br bb %if.exit98
if.exit98:
  100 = icmp sle i32 102, i32 63
  101 = zext i1 %100 to i32
  102 = icmp eq i32 1, i32 %101
  br i1 %102, bb %then103, bb %if.exit104
then103:
  call void putch(i32 69)
  br bb %if.exit104
if.exit104:
  106 = sub i32 5, i32 6
  107 = icmp ne i32 0, i32 0
  108 =  i1 %107, i1 1
  109 = zext i1 %108 to i32
  110 = sub i32 0, i32 %109
  111 = icmp eq i32 %106, i32 %110
  br i1 %111, bb %then112, bb %if.exit113
then112:
  call void putch(i32 70)
  br bb %if.exit113
if.exit113:
  call void putch(i32 10)
  br bb %while.cond
while.cond:
  235 = phi [bb %if.exit113, i1 ub, bb %while.body, i1 %234]
  125 = icmp ne i32 0, i32 0
  br i1 %125, bb %select.then126, bb %select.else127
while.body:
  call void putch(i32 32)
  br bb %while.cond
while.exit:
  136 = icmp ne i32 0, i32 0
  br i1 %136, bb %select.then137, bb %select.else138
select.then126:
  131 = icmp ne i32 1, i32 0
  br bb %select.exit128
select.else127:
  br bb %select.exit128
select.exit128:
  234 = phi [bb %select.else127, i1 0, bb %select.then126, i1 %131]
  133 = icmp ne i1 %234, i1 0
  br i1 %133, bb %while.body, bb %while.exit
select.then137:
  br bb %select.exit139
select.else138:
  142 = icmp ne i32 1, i32 0
  143 = icmp ne i1 %142, i1 0
  br bb %select.exit139
select.exit139:
  238 = phi [bb %select.else138, i1 %143, bb %select.then137, i1 1]
  br i1 %238, bb %then145, bb %if.exit146
then145:
  call void putch(i32 67)
  br bb %if.exit146
if.exit146:
  150 = icmp sge i32 0, i32 1
  br i1 %150, bb %select.then151, bb %select.else152
select.then151:
  br bb %select.exit153
select.else152:
  157 = icmp sle i32 1, i32 0
  158 = icmp ne i1 %157, i1 0
  br bb %select.exit153
select.exit153:
  242 = phi [bb %select.else152, i1 %158, bb %select.then151, i1 1]
  br i1 %242, bb %then160, bb %if.exit161
then160:
  call void putch(i32 72)
  br bb %if.exit161
if.exit161:
  165 = icmp sge i32 2, i32 1
  br i1 %165, bb %select.then166, bb %select.else167
select.then166:
  172 = icmp ne i32 4, i32 3
  br bb %select.exit168
select.else167:
  br bb %select.exit168
select.exit168:
  240 = phi [bb %select.else167, i1 0, bb %select.then166, i1 %172]
  br i1 %240, bb %then174, bb %if.exit175
then174:
  call void putch(i32 73)
  br bb %if.exit175
if.exit175:
  179 = icmp ne i32 1, i32 0
  180 =  i1 %179, i1 1
  181 = zext i1 %180 to i32
  182 = icmp eq i32 0, i32 %181
  br i1 %182, bb %select.then183, bb %select.else184
select.then183:
  189 = icmp slt i32 3, i32 3
  br bb %select.exit185
select.else184:
  br bb %select.exit185
select.exit185:
  237 = phi [bb %select.else184, i1 0, bb %select.then183, i1 %189]
  br i1 %237, bb %select.then191, bb %select.else192
select.then191:
  br bb %select.exit193
select.else192:
  197 = icmp sge i32 4, i32 4
  198 = icmp ne i1 %197, i1 0
  br bb %select.exit193
select.exit193:
  239 = phi [bb %select.else192, i1 %198, bb %select.then191, i1 1]
  br i1 %239, bb %then200, bb %if.exit201
then200:
  call void putch(i32 74)
  br bb %if.exit201
if.exit201:
  205 = icmp ne i32 1, i32 0
  206 =  i1 %205, i1 1
  207 = zext i1 %206 to i32
  208 = icmp eq i32 0, i32 %207
  br i1 %208, bb %select.then209, bb %select.else210
select.then209:
  br bb %select.exit211
select.else210:
  215 = icmp slt i32 3, i32 3
  br i1 %215, bb %select.then216, bb %select.else217
select.exit211:
  236 = phi [bb %select.exit218, i1 %224, bb %select.then209, i1 1]
  233 = phi [bb %select.exit218, i1 %232, bb %select.then209, i1 ub]
  br i1 %236, bb %then226, bb %if.exit227
select.then216:
  222 = icmp sge i32 4, i32 4
  br bb %select.exit218
select.else217:
  br bb %select.exit218
select.exit218:
  232 = phi [bb %select.else217, i1 0, bb %select.then216, i1 %222]
  224 = icmp ne i1 %232, i1 0
  br bb %select.exit211
then226:
  call void putch(i32 75)
  br bb %if.exit227
if.exit227:
  call void putch(i32 10)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 set_a(i32 val) {
entry:
  store i32 %val to ptr @a
  ret i32 %val
}


