global ptr len init with i32 20
i32 main() {
entry:
  %result = stack 160
  %c2 = stack 100
  %c1 = stack 100
  %mult2 = stack 80
  %mult1 = stack 80
  arr.index = ptradd ptr %mult1, i32 0
  store i32 1 to ptr %arr.index
  arr.index8 = ptradd ptr %mult1, i32 4
  store i32 2 to ptr %arr.index8
  arr.index9 = ptradd ptr %mult1, i32 8
  store i32 3 to ptr %arr.index9
  arr.index10 = ptradd ptr %mult1, i32 12
  store i32 4 to ptr %arr.index10
  arr.index11 = ptradd ptr %mult1, i32 16
  store i32 5 to ptr %arr.index11
  arr.index12 = ptradd ptr %mult1, i32 20
  store i32 6 to ptr %arr.index12
  arr.index13 = ptradd ptr %mult1, i32 24
  store i32 7 to ptr %arr.index13
  arr.index14 = ptradd ptr %mult1, i32 28
  store i32 8 to ptr %arr.index14
  arr.index15 = ptradd ptr %mult1, i32 32
  store i32 9 to ptr %arr.index15
  arr.index16 = ptradd ptr %mult1, i32 36
  store i32 0 to ptr %arr.index16
  arr.index17 = ptradd ptr %mult1, i32 40
  store i32 1 to ptr %arr.index17
  arr.index18 = ptradd ptr %mult1, i32 44
  store i32 2 to ptr %arr.index18
  arr.index19 = ptradd ptr %mult1, i32 48
  store i32 3 to ptr %arr.index19
  arr.index20 = ptradd ptr %mult1, i32 52
  store i32 4 to ptr %arr.index20
  arr.index21 = ptradd ptr %mult1, i32 56
  store i32 5 to ptr %arr.index21
  arr.index22 = ptradd ptr %mult1, i32 60
  store i32 6 to ptr %arr.index22
  arr.index23 = ptradd ptr %mult1, i32 64
  store i32 7 to ptr %arr.index23
  arr.index24 = ptradd ptr %mult1, i32 68
  store i32 8 to ptr %arr.index24
  arr.index25 = ptradd ptr %mult1, i32 72
  store i32 9 to ptr %arr.index25
  arr.index26 = ptradd ptr %mult1, i32 76
  store i32 0 to ptr %arr.index26
  arr.index28 = ptradd ptr %mult2, i32 0
  store i32 2 to ptr %arr.index28
  arr.index29 = ptradd ptr %mult2, i32 4
  store i32 3 to ptr %arr.index29
  arr.index30 = ptradd ptr %mult2, i32 8
  store i32 4 to ptr %arr.index30
  arr.index31 = ptradd ptr %mult2, i32 12
  store i32 2 to ptr %arr.index31
  arr.index32 = ptradd ptr %mult2, i32 16
  store i32 5 to ptr %arr.index32
  arr.index33 = ptradd ptr %mult2, i32 20
  store i32 7 to ptr %arr.index33
  arr.index34 = ptradd ptr %mult2, i32 24
  store i32 9 to ptr %arr.index34
  arr.index35 = ptradd ptr %mult2, i32 28
  store i32 9 to ptr %arr.index35
  arr.index36 = ptradd ptr %mult2, i32 32
  store i32 0 to ptr %arr.index36
  arr.index37 = ptradd ptr %mult2, i32 36
  store i32 1 to ptr %arr.index37
  arr.index38 = ptradd ptr %mult2, i32 40
  store i32 9 to ptr %arr.index38
  arr.index39 = ptradd ptr %mult2, i32 44
  store i32 8 to ptr %arr.index39
  arr.index40 = ptradd ptr %mult2, i32 48
  store i32 7 to ptr %arr.index40
  arr.index41 = ptradd ptr %mult2, i32 52
  store i32 6 to ptr %arr.index41
  arr.index42 = ptradd ptr %mult2, i32 56
  store i32 4 to ptr %arr.index42
  arr.index43 = ptradd ptr %mult2, i32 60
  store i32 3 to ptr %arr.index43
  arr.index44 = ptradd ptr %mult2, i32 64
  store i32 2 to ptr %arr.index44
  arr.index45 = ptradd ptr %mult2, i32 68
  store i32 1 to ptr %arr.index45
  arr.index46 = ptradd ptr %mult2, i32 72
  store i32 2 to ptr %arr.index46
  arr.index47 = ptradd ptr %mult2, i32 76
  store i32 2 to ptr %arr.index47
  len.load = load i32 from ptr @len
  len.load51 = load i32 from ptr @len
  br bb %init.cond
init.cond:
  cnt_ptr.phi = phi [bb %entry, i32 40, bb %init, i32 %cnt.dec]
  60 = icmp ne i32 %cnt_ptr.phi, i32 0
  br i1 %60, bb %init, bb %init.exit
init:
  cnt.dec = sub i32 %cnt_ptr.phi, i32 1
  offset = mul i32 %cnt.dec, i32 4
  arr.index64 = add i32 0, i32 %offset
  arr.index65 = ptradd ptr %result, ptr %arr.index64
  store i32 0 to ptr %arr.index65
  br bb %init.cond
init.exit:
  br bb %while.cond
while.cond:
  i.phi216 = phi [bb %init.exit, i32 0, bb %while.body, i32 %81]
  71 = icmp slt i32 %i.phi216, i32 %len.load
  72 = icmp ne i1 %71, i1 0
  br i1 %72, bb %while.body, bb %while.exit
while.body:
  74 = mul i32 %i.phi216, i32 4
  75 = ptradd ptr %c1, i32 %74
  78 = ptradd ptr %mult1, i32 %74
  78.load = load i32 from ptr %78
  store i32 %78.load to ptr %75
  81 = add i32 %i.phi216, i32 1
  br bb %while.cond
while.exit:
  br bb %while.cond82
while.cond82:
  i.phi215 = phi [bb %while.exit, i32 0, bb %while.body83, i32 %97]
  87 = icmp slt i32 %i.phi215, i32 %len.load51
  88 = icmp ne i1 %87, i1 0
  br i1 %88, bb %while.body83, bb %while.exit84
while.body83:
  90 = mul i32 %i.phi215, i32 4
  91 = ptradd ptr %c2, i32 %90
  94 = ptradd ptr %mult2, i32 %90
  94.load = load i32 from ptr %94
  store i32 %94.load to ptr %91
  97 = add i32 %i.phi215, i32 1
  br bb %while.cond82
while.exit84:
  100 = add i32 %len.load, i32 %len.load51
  101 = sub i32 %100, i32 1
  br bb %while.cond102
while.cond102:
  i.phi214 = phi [bb %while.exit84, i32 0, bb %while.body103, i32 %113]
  107 = icmp sle i32 %i.phi214, i32 %101
  108 = icmp ne i1 %107, i1 0
  br i1 %108, bb %while.body103, bb %while.exit104
while.body103:
  110 = mul i32 %i.phi214, i32 4
  111 = ptradd ptr %result, i32 %110
  store i32 0 to ptr %111
  113 = add i32 %i.phi214, i32 1
  br bb %while.cond102
while.exit104:
  115 = sub i32 %len.load51, i32 1
  br bb %while.cond116
while.cond116:
  n.phi220 = phi [bb %while.exit104, i32 %101, bb %while.exit131, i32 %179]
  temp.phi218 = phi [bb %while.exit104, i32 0, bb %while.exit131, i32 %temp.phi]
  i.phi213 = phi [bb %while.exit104, i32 %115, bb %while.exit131, i32 %181]
  121 = icmp sgt i32 %i.phi213, i32 -1
  122 = icmp ne i1 %121, i1 0
  br i1 %122, bb %while.body117, bb %while.exit118
while.body117:
  124 = mul i32 %i.phi213, i32 4
  125 = ptradd ptr %c2, i32 %124
  125.load = load i32 from ptr %125
  128 = sub i32 %len.load, i32 1
  br bb %while.cond129
while.exit118:
  183 = ptradd ptr %result, i32 0
  183.load = load i32 from ptr %183
  185 = icmp ne i32 %183.load, i32 0
  br i1 %185, bb %then186, bb %if.exit187
while.cond129:
  n.phi = phi [bb %while.body117, i32 %n.phi220, bb %if.exit, i32 %175]
  temp.phi = phi [bb %while.body117, i32 %temp.phi218, bb %if.exit, i32 %146]
  j.phi = phi [bb %while.body117, i32 %128, bb %if.exit, i32 %173]
  134 = icmp sgt i32 %j.phi, i32 -1
  135 = icmp ne i1 %134, i1 0
  br i1 %135, bb %while.body130, bb %while.exit131
while.body130:
  137 = mul i32 %n.phi, i32 4
  138 = ptradd ptr %result, i32 %137
  138.load = load i32 from ptr %138
  142 = mul i32 %j.phi, i32 4
  143 = ptradd ptr %c1, i32 %142
  143.load = load i32 from ptr %143
  145 = mul i32 %125.load, i32 %143.load
  146 = add i32 %138.load, i32 %145
  148 = icmp sge i32 %146, i32 10
  br i1 %148, bb %then, bb %else
while.exit131:
  178 = add i32 %n.phi, i32 %len.load
  179 = sub i32 %178, i32 1
  181 = sub i32 %i.phi213, i32 1
  br bb %while.cond116
then:
  store i32 %146 to ptr %138
  157 = sub i32 %n.phi, i32 1
  158 = mul i32 %157, i32 4
  159 = ptradd ptr %result, i32 %158
  163.load = load i32 from ptr %159
  166 = sdiv i32 %146, i32 10
  167 = add i32 %163.load, i32 %166
  store i32 %167 to ptr %159
  br bb %if.exit
if.exit:
  173 = sub i32 %j.phi, i32 1
  175 = sub i32 %n.phi, i32 1
  br bb %while.cond129
else:
  store i32 %146 to ptr %138
  br bb %if.exit
then186:
  189.load = load i32 from ptr %183
  call void putint(i32 %189.load)
  br bb %if.exit187
if.exit187:
  br bb %while.cond192
while.cond192:
  i.phi = phi [bb %if.exit187, i32 1, bb %while.body193, i32 %208]
  200 = icmp sle i32 %i.phi, i32 %101
  201 = icmp ne i1 %200, i1 0
  br i1 %201, bb %while.body193, bb %while.exit194
while.body193:
  203 = mul i32 %i.phi, i32 4
  204 = ptradd ptr %result, i32 %203
  204.load = load i32 from ptr %204
  call void putint(i32 %204.load)
  208 = add i32 %i.phi, i32 1
  br bb %while.cond192
while.exit194:
  ret i32 0
}

external void putfarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putarray(i32 , ptr )

external void _sysy_stoptime(i32 )

external void putch(i32 )

external void putfloat(float )

external i32 getfarray(ptr )

external i32 getarray(ptr )

external void putint(i32 )

external float getfloat()

external i32 getch()

external i32 getint()


