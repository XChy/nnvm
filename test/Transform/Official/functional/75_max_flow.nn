global ptr rev init with 100 x i32 zeros
global ptr cap init with 100 x i32 zeros
global ptr used init with 10 x i32 zeros
global ptr to init with 100 x i32 zeros
global ptr size init with 10 x i32 zeros
immutable global ptr INF init with i32 1879048192
i32 max_flow(i32 s, i32 t) {
entry246:
  br bb %while.cond250
while.cond250:
  flow.phi = phi [bb %entry246, i32 0, bb %if.exit263, i32 %267]
  br bb %my_memset.entry
then262:
  ret i32 %flow.phi
if.exit263:
  267 = add i32 %flow.phi, i32 %259
  br bb %while.cond250
my_memset.entry:
  br bb %my_memset.while.cond
my_memset.while.cond:
  i.phi373 = phi [bb %my_memset.entry, i32 0, bb %my_memset.while.body, i32 %16380]
  9374 = icmp slt i32 %i.phi373, i32 10
  br i1 %9374, bb %my_memset.while.body, bb %my_memset.while.exit
my_memset.while.body:
  12377 = mul i32 %i.phi373, i32 4
  13378 = ptradd ptr @used, i32 %12377
  store i32 0 to ptr %13378
  16380 = add i32 %i.phi373, i32 1
  br bb %my_memset.while.cond
my_memset.while.exit:
  259 = call i32 dfs(i32 %s, i32 %t, i32 1879048192)
  261 = icmp eq i32 %259, i32 0
  br i1 %261, bb %then262, bb %if.exit263
}

i32 dfs(i32 s, i32 t, i32 f) {
entry102:
  108 = icmp eq i32 %s, i32 %t
  br i1 %108, bb %then, bb %if.exit
then:
  ret i32 %f
if.exit:
  113 = mul i32 %s, i32 4
  114 = ptradd ptr @used, i32 %113
  store i32 1 to ptr %114
  br bb %while.cond116
while.cond116:
  d.phi = phi [bb %if.exit, i32 ub, bb %if.exit188, i32 %184, bb %then149, i32 %d.phi, bb %then137, i32 %d.phi]
  min_f.phi300 = phi [bb %if.exit, i32 ub, bb %if.exit188, i32 %min_f.phi, bb %then149, i32 %min_f.phi300, bb %then137, i32 %min_f.phi300]
  i115.phi = phi [bb %if.exit, i32 0, bb %if.exit188, i32 %245, bb %then149, i32 %152, bb %then137, i32 %140]
  122 = ptradd ptr @size, i32 %113
  122.load = load i32 from ptr %122
  124 = icmp slt i32 %i115.phi, i32 %122.load
  br i1 %124, bb %while.body117, bb %while.exit118
while.body117:
  127 = mul i32 %s, i32 40
  128 = ptradd ptr @to, i32 %127
  130 = mul i32 %i115.phi, i32 4
  131 = ptradd ptr %128, i32 %130
  131.load = load i32 from ptr %131
  133 = mul i32 %131.load, i32 4
  134 = ptradd ptr @used, i32 %133
  134.load = load i32 from ptr %134
  136 = icmp ne i32 %134.load, i32 0
  br i1 %136, bb %then137, bb %if.exit138
while.exit118:
  ret i32 0
then137:
  140 = add i32 %i115.phi, i32 1
  br bb %while.cond116
if.exit138:
  143 = ptradd ptr @cap, i32 %127
  146 = ptradd ptr %143, i32 %130
  146.load = load i32 from ptr %146
  148 = icmp sle i32 %146.load, i32 0
  br i1 %148, bb %then149, bb %if.exit150
then149:
  152 = add i32 %i115.phi, i32 1
  br bb %while.cond116
if.exit150:
  160.load = load i32 from ptr %146
  162 = icmp slt i32 %f, i32 %160.load
  br i1 %162, bb %then163, bb %else
then163:
  br bb %if.exit164
if.exit164:
  min_f.phi = phi [bb %else, i32 %172.load, bb %then163, i32 %f]
  180.load = load i32 from ptr %131
  184 = call i32 dfs(i32 %180.load, i32 %t, i32 %min_f.phi)
  186 = icmp sgt i32 %184, i32 0
  br i1 %186, bb %then187, bb %if.exit188
else:
  172.load = load i32 from ptr %146
  br bb %if.exit164
then187:
  200.load = load i32 from ptr %146
  203 = sub i32 %200.load, i32 %184
  store i32 %203 to ptr %146
  209.load = load i32 from ptr %131
  211 = mul i32 %209.load, i32 40
  212 = ptradd ptr @cap, i32 %211
  215 = ptradd ptr @rev, i32 %127
  218 = ptradd ptr %215, i32 %130
  218.load = load i32 from ptr %218
  220 = mul i32 %218.load, i32 4
  221 = ptradd ptr %212, i32 %220
  227.load = load i32 from ptr %131
  229 = mul i32 %227.load, i32 40
  230 = ptradd ptr @cap, i32 %229
  236.load = load i32 from ptr %218
  238 = mul i32 %236.load, i32 4
  239 = ptradd ptr %230, i32 %238
  239.load = load i32 from ptr %239
  242 = add i32 %239.load, i32 %184
  store i32 %242 to ptr %221
  ret i32 %184
if.exit188:
  245 = add i32 %i115.phi, i32 1
  br bb %while.cond116
}

void add_node(i32 u, i32 v, i32 c) {
entry17:
  22 = mul i32 %u, i32 40
  23 = ptradd ptr @to, i32 %22
  25 = mul i32 %u, i32 4
  26 = ptradd ptr @size, i32 %25
  26.load = load i32 from ptr %26
  28 = mul i32 %26.load, i32 4
  29 = ptradd ptr %23, i32 %28
  store i32 %v to ptr %29
  33 = ptradd ptr @cap, i32 %22
  36.load = load i32 from ptr %26
  38 = mul i32 %36.load, i32 4
  39 = ptradd ptr %33, i32 %38
  store i32 %c to ptr %39
  43 = ptradd ptr @rev, i32 %22
  46.load = load i32 from ptr %26
  48 = mul i32 %46.load, i32 4
  49 = ptradd ptr %43, i32 %48
  51 = mul i32 %v, i32 4
  52 = ptradd ptr @size, i32 %51
  52.load = load i32 from ptr %52
  store i32 %52.load to ptr %49
  55 = mul i32 %v, i32 40
  56 = ptradd ptr @to, i32 %55
  59.load = load i32 from ptr %52
  61 = mul i32 %59.load, i32 4
  62 = ptradd ptr %56, i32 %61
  store i32 %u to ptr %62
  66 = ptradd ptr @cap, i32 %55
  69.load = load i32 from ptr %52
  71 = mul i32 %69.load, i32 4
  72 = ptradd ptr %66, i32 %71
  store i32 0 to ptr %72
  75 = ptradd ptr @rev, i32 %55
  78.load = load i32 from ptr %52
  80 = mul i32 %78.load, i32 4
  81 = ptradd ptr %75, i32 %80
  84.load = load i32 from ptr %26
  store i32 %84.load to ptr %81
  91.load = load i32 from ptr %26
  93 = add i32 %91.load, i32 1
  store i32 %93 to ptr %26
  99.load = load i32 from ptr %52
  101 = add i32 %99.load, i32 1
  store i32 %101 to ptr %52
  ret 
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry268:
  271 = call i32 getint()
  272 = call i32 getint()
  br bb %my_memset.entry385
entry268.split:
  br bb %while.cond274
while.cond274:
  E.phi = phi [bb %entry268.split, i32 %272, bb %while.body275, i32 %291]
  278 = icmp sgt i32 %E.phi, i32 0
  br i1 %278, bb %while.body275, bb %while.exit276
while.body275:
  282 = call i32 getint()
  283 = call i32 getint()
  285 = call i32 getint()
  22324 = mul i32 %282, i32 40
  23325 = ptradd ptr @to, i32 %22324
  25326 = mul i32 %282, i32 4
  26327 = ptradd ptr @size, i32 %25326
  26.load328 = load i32 from ptr %26327
  28329 = mul i32 %26.load328, i32 4
  29330 = ptradd ptr %23325, i32 %28329
  store i32 %283 to ptr %29330
  33332 = ptradd ptr @cap, i32 %22324
  36.load333 = load i32 from ptr %26327
  38334 = mul i32 %36.load333, i32 4
  39335 = ptradd ptr %33332, i32 %38334
  store i32 %285 to ptr %39335
  43337 = ptradd ptr @rev, i32 %22324
  46.load338 = load i32 from ptr %26327
  48339 = mul i32 %46.load338, i32 4
  49340 = ptradd ptr %43337, i32 %48339
  51341 = mul i32 %283, i32 4
  52342 = ptradd ptr @size, i32 %51341
  52.load343 = load i32 from ptr %52342
  store i32 %52.load343 to ptr %49340
  55345 = mul i32 %283, i32 40
  56346 = ptradd ptr @to, i32 %55345
  59.load347 = load i32 from ptr %52342
  61348 = mul i32 %59.load347, i32 4
  62349 = ptradd ptr %56346, i32 %61348
  store i32 %282 to ptr %62349
  66351 = ptradd ptr @cap, i32 %55345
  69.load352 = load i32 from ptr %52342
  71353 = mul i32 %69.load352, i32 4
  72354 = ptradd ptr %66351, i32 %71353
  store i32 0 to ptr %72354
  75356 = ptradd ptr @rev, i32 %55345
  78.load357 = load i32 from ptr %52342
  80358 = mul i32 %78.load357, i32 4
  81359 = ptradd ptr %75356, i32 %80358
  84.load360 = load i32 from ptr %26327
  store i32 %84.load360 to ptr %81359
  91.load362 = load i32 from ptr %26327
  93363 = add i32 %91.load362, i32 1
  store i32 %93363 to ptr %26327
  99.load365 = load i32 from ptr %52342
  101366 = add i32 %99.load365, i32 1
  store i32 %101366 to ptr %52342
  291 = sub i32 %E.phi, i32 1
  br bb %while.cond274
while.exit276:
  br bb %max_flow.entry246
max_flow.entry246:
  br bb %max_flow.while.cond250
max_flow.while.cond250:
  flow.phi311 = phi [bb %max_flow.entry246, i32 0, bb %max_flow.if.exit263, i32 %267319]
  br bb %my_memset.entry400
max_flow.then262:
  call void putint(i32 %flow.phi311)
  call void putch(i32 10)
  ret i32 0
max_flow.if.exit263:
  267319 = add i32 %flow.phi311, i32 %259313
  br bb %max_flow.while.cond250
my_memset.entry385:
  br bb %my_memset.while.cond387
my_memset.while.cond387:
  i.phi388 = phi [bb %my_memset.entry385, i32 0, bb %my_memset.while.body391, i32 %16395]
  9389 = icmp slt i32 %i.phi388, i32 10
  br i1 %9389, bb %my_memset.while.body391, bb %my_memset.while.exit397
my_memset.while.body391:
  12392 = mul i32 %i.phi388, i32 4
  13393 = ptradd ptr @size, i32 %12392
  store i32 0 to ptr %13393
  16395 = add i32 %i.phi388, i32 1
  br bb %my_memset.while.cond387
my_memset.while.exit397:
  br bb %entry268.split
my_memset.entry400:
  br bb %my_memset.while.cond402
my_memset.while.cond402:
  i.phi403 = phi [bb %my_memset.entry400, i32 0, bb %my_memset.while.body406, i32 %16410]
  9404 = icmp slt i32 %i.phi403, i32 10
  br i1 %9404, bb %my_memset.while.body406, bb %my_memset.while.exit412
my_memset.while.body406:
  12407 = mul i32 %i.phi403, i32 4
  13408 = ptradd ptr @used, i32 %12407
  store i32 0 to ptr %13408
  16410 = add i32 %i.phi403, i32 1
  br bb %my_memset.while.cond402
my_memset.while.exit412:
  259313 = call i32 dfs(i32 1, i32 %271, i32 1879048192)
  261314 = icmp eq i32 %259313, i32 0
  br i1 %261314, bb %max_flow.then262, bb %max_flow.if.exit263
}

external float getfloat()

external void putfloat(float )

void my_memset(ptr arr, i32 val, i32 n) {
entry:
  br bb %while.cond
while.cond:
  i.phi = phi [bb %entry, i32 0, bb %while.body, i32 %16]
  9 = icmp slt i32 %i.phi, i32 %n
  br i1 %9, bb %while.body, bb %while.exit
while.body:
  12 = mul i32 %i.phi, i32 4
  13 = ptradd ptr %arr, i32 %12
  store i32 %val to ptr %13
  16 = add i32 %i.phi, i32 1
  br bb %while.cond
while.exit:
  ret 
}

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


