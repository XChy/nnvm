global ptr n init with i32 0
global ptr array init with 110 x i32 zeros
void mmerge(i32 a, i32 b) {
entry43:
  48 = call i32 findfa(i32 %a)
  51 = call i32 findfa(i32 %b)
  54 = icmp ne i32 %48, i32 %51
  br i1 %54, bb %then55, bb %if.exit56
then55:
  58 = mul i32 %48, i32 4
  59 = ptradd ptr @array, i32 %58
  store i32 %51 to ptr %59
  br bb %if.exit56
if.exit56:
  ret 
}

i32 findfa(i32 a) {
entry19:
  22 = mul i32 %a, i32 4
  23 = ptradd ptr @array, i32 %22
  23.load = load i32 from ptr %23
  26 = icmp eq i32 %23.load, i32 %a
  br i1 %26, bb %then, bb %else
then:
  ret i32 %a
if.exit:
  unreachable
else:
  32 = mul i32 %a, i32 4
  33 = ptradd ptr @array, i32 %32
  35 = mul i32 %a, i32 4
  36 = ptradd ptr @array, i32 %35
  36.load = load i32 from ptr %36
  38 = call i32 findfa(i32 %36.load)
  store i32 %38 to ptr %33
  40 = mul i32 %a, i32 4
  41 = ptradd ptr @array, i32 %40
  41.load = load i32 from ptr %41
  ret i32 %41.load
}

external i32 getint()

external i32 getch()

void init(i32 n) {
entry:
  br bb %while.cond
while.cond:
  260 = phi [bb %entry, i32 1, bb %while.body, i32 %18]
  9 = mul i32 %n, i32 %n
  10 = add i32 %9, i32 1
  11 = icmp sle i32 %260, i32 %10
  12 = icmp ne i1 %11, i1 0
  br i1 %12, bb %while.body, bb %while.exit
while.body:
  14 = mul i32 %260, i32 4
  15 = ptradd ptr @array, i32 %14
  16 = sub i32 0, i32 1
  store i32 %16 to ptr %15
  18 = add i32 %260, i32 1
  br bb %while.cond
while.exit:
  ret 
}

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry61:
  br bb %while.cond66
while.cond66:
  304 = phi [bb %entry61, i32 ub, bb %if.exit256, i32 %303]
  302 = phi [bb %entry61, i32 ub, bb %if.exit256, i32 %301]
  300 = phi [bb %entry61, i32 ub, bb %if.exit256, i32 %299]
  296 = phi [bb %entry61, i32 ub, bb %if.exit256, i32 %295]
  293 = phi [bb %entry61, i32 ub, bb %if.exit256, i32 %292]
  291 = phi [bb %entry61, i1 ub, bb %if.exit256, i1 %290]
  287 = phi [bb %entry61, i1 ub, bb %if.exit256, i1 %286]
  283 = phi [bb %entry61, i1 ub, bb %if.exit256, i1 %282]
  279 = phi [bb %entry61, i1 ub, bb %if.exit256, i1 %278]
  275 = phi [bb %entry61, i1 ub, bb %if.exit256, i1 %274]
  271 = phi [bb %entry61, i1 ub, bb %if.exit256, i1 %270]
  267 = phi [bb %entry61, i32 ub, bb %if.exit256, i32 %81]
  266 = phi [bb %entry61, i32 ub, bb %if.exit256, i32 %265]
  262 = phi [bb %entry61, i32 ub, bb %if.exit256, i32 10]
  261 = phi [bb %entry61, i32 1, bb %if.exit256, i32 %72]
  70 = icmp ne i32 %261, i32 0
  br i1 %70, bb %while.body67, bb %while.exit68
while.body67:
  72 = sub i32 %261, i32 1
  store i32 4 to ptr @n
  call void init(i32 4)
  n.load78 = load i32 from ptr @n
  n.load79 = load i32 from ptr @n
  80 = mul i32 %n.load78, i32 %n.load79
  81 = add i32 %80, i32 1
  br bb %while.cond82
while.exit68:
  ret i32 0
while.cond82:
  303 = phi [bb %while.body67, i32 0, bb %if.exit97, i32 %249]
  301 = phi [bb %while.body67, i32 %302, bb %if.exit97, i32 %90]
  299 = phi [bb %while.body67, i32 0, bb %if.exit97, i32 %298]
  295 = phi [bb %while.body67, i32 %296, bb %if.exit97, i32 %294]
  292 = phi [bb %while.body67, i32 %293, bb %if.exit97, i32 %89]
  290 = phi [bb %while.body67, i1 %291, bb %if.exit97, i1 %289]
  286 = phi [bb %while.body67, i1 %287, bb %if.exit97, i1 %285]
  282 = phi [bb %while.body67, i1 %283, bb %if.exit97, i1 %281]
  278 = phi [bb %while.body67, i1 %279, bb %if.exit97, i1 %277]
  274 = phi [bb %while.body67, i1 %275, bb %if.exit97, i1 %273]
  270 = phi [bb %while.body67, i1 %271, bb %if.exit97, i1 %269]
  265 = phi [bb %while.body67, i32 %266, bb %if.exit97, i32 %264]
  87 = icmp slt i32 %303, i32 10
  88 = icmp ne i1 %87, i1 0
  br i1 %88, bb %while.body83, bb %while.exit84
while.body83:
  89 = call i32 getint()
  90 = call i32 getint()
  92 = icmp ne i32 %299, i32 0
  93 =  i1 %92, i1 1
  94 = zext i1 %93 to i32
  95 = icmp ne i32 %94, i32 0
  br i1 %95, bb %then96, bb %if.exit97
while.exit84:
  251 = icmp ne i32 %299, i32 0
  252 =  i1 %251, i1 1
  253 = zext i1 %252 to i32
  254 = icmp ne i32 %253, i32 0
  br i1 %254, bb %then255, bb %if.exit256
then96:
  n.load99 = load i32 from ptr @n
  101 = sub i32 %89, i32 1
  102 = mul i32 %n.load99, i32 %101
  104 = add i32 %102, i32 %90
  106 = mul i32 %104, i32 4
  107 = ptradd ptr @array, i32 %106
  store i32 %104 to ptr %107
  110 = icmp eq i32 %89, i32 1
  br i1 %110, bb %then111, bb %if.exit112
if.exit97:
  298 = phi [bb %while.body83, i32 %299, bb %if.exit241, i32 %297]
  294 = phi [bb %while.body83, i32 %295, bb %if.exit241, i32 %104]
  289 = phi [bb %while.body83, i1 %290, bb %if.exit241, i1 %288]
  285 = phi [bb %while.body83, i1 %286, bb %if.exit241, i1 %284]
  281 = phi [bb %while.body83, i1 %282, bb %if.exit241, i1 %280]
  277 = phi [bb %while.body83, i1 %278, bb %if.exit241, i1 %276]
  273 = phi [bb %while.body83, i1 %274, bb %if.exit241, i1 %272]
  269 = phi [bb %while.body83, i1 %270, bb %if.exit241, i1 %268]
  264 = phi [bb %while.body83, i32 %265, bb %if.exit241, i32 %263]
  249 = add i32 %303, i32 1
  br bb %while.cond82
then111:
  113 = mul i32 0, i32 4
  114 = ptradd ptr @array, i32 %113
  store i32 0 to ptr %114
  call void mmerge(i32 %104, i32 0)
  br bb %if.exit112
if.exit112:
  n.load118 = load i32 from ptr @n
  119 = icmp eq i32 %89, i32 %n.load118
  br i1 %119, bb %then120, bb %if.exit121
then120:
  123 = mul i32 %81, i32 4
  124 = ptradd ptr @array, i32 %123
  store i32 %81 to ptr %124
  call void mmerge(i32 %104, i32 %81)
  br bb %if.exit121
if.exit121:
  n.load130 = load i32 from ptr @n
  131 = icmp slt i32 %90, i32 %n.load130
  br i1 %131, bb %select.then, bb %select.else
select.then:
  137 = add i32 %104, i32 1
  138 = mul i32 %137, i32 4
  139 = ptradd ptr @array, i32 %138
  139.load = load i32 from ptr %139
  141 = sub i32 0, i32 1
  142 = icmp ne i32 %139.load, i32 %141
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  284 = phi [bb %select.else, i1 0, bb %select.then, i1 %142]
  br i1 %284, bb %then144, bb %if.exit145
then144:
  148 = add i32 %104, i32 1
  call void mmerge(i32 %104, i32 %148)
  br bb %if.exit145
if.exit145:
  151 = icmp sgt i32 %90, i32 1
  br i1 %151, bb %select.then152, bb %select.else153
select.then152:
  157 = sub i32 %104, i32 1
  158 = mul i32 %157, i32 4
  159 = ptradd ptr @array, i32 %158
  159.load = load i32 from ptr %159
  161 = sub i32 0, i32 1
  162 = icmp ne i32 %159.load, i32 %161
  br bb %select.exit154
select.else153:
  br bb %select.exit154
select.exit154:
  276 = phi [bb %select.else153, i1 0, bb %select.then152, i1 %162]
  br i1 %276, bb %then164, bb %if.exit165
then164:
  168 = sub i32 %104, i32 1
  call void mmerge(i32 %104, i32 %168)
  br bb %if.exit165
if.exit165:
  n.load171 = load i32 from ptr @n
  172 = icmp slt i32 %89, i32 %n.load171
  br i1 %172, bb %select.then173, bb %select.else174
select.then173:
  n.load178 = load i32 from ptr @n
  179 = add i32 %104, i32 %n.load178
  180 = mul i32 %179, i32 4
  181 = ptradd ptr @array, i32 %180
  181.load = load i32 from ptr %181
  183 = sub i32 0, i32 1
  184 = icmp ne i32 %181.load, i32 %183
  br bb %select.exit175
select.else174:
  br bb %select.exit175
select.exit175:
  272 = phi [bb %select.else174, i1 0, bb %select.then173, i1 %184]
  br i1 %272, bb %then186, bb %if.exit187
then186:
  n.load190 = load i32 from ptr @n
  191 = add i32 %104, i32 %n.load190
  call void mmerge(i32 %104, i32 %191)
  br bb %if.exit187
if.exit187:
  194 = icmp sgt i32 %89, i32 1
  br i1 %194, bb %select.then195, bb %select.else196
select.then195:
  n.load200 = load i32 from ptr @n
  201 = sub i32 %104, i32 %n.load200
  202 = mul i32 %201, i32 4
  203 = ptradd ptr @array, i32 %202
  203.load = load i32 from ptr %203
  205 = sub i32 0, i32 1
  206 = icmp ne i32 %203.load, i32 %205
  br bb %select.exit197
select.else196:
  br bb %select.exit197
select.exit197:
  268 = phi [bb %select.else196, i1 0, bb %select.then195, i1 %206]
  br i1 %268, bb %then208, bb %if.exit209
then208:
  n.load212 = load i32 from ptr @n
  213 = sub i32 %104, i32 %n.load212
  call void mmerge(i32 %104, i32 %213)
  br bb %if.exit209
if.exit209:
  215 = mul i32 0, i32 4
  216 = ptradd ptr @array, i32 %215
  216.load = load i32 from ptr %216
  218 = sub i32 0, i32 1
  219 = icmp ne i32 %216.load, i32 %218
  br i1 %219, bb %select.then220, bb %select.else221
select.then220:
  225 = mul i32 %81, i32 4
  226 = ptradd ptr @array, i32 %225
  226.load = load i32 from ptr %226
  228 = sub i32 0, i32 1
  229 = icmp ne i32 %226.load, i32 %228
  br bb %select.exit222
select.else221:
  br bb %select.exit222
select.exit222:
  288 = phi [bb %select.else221, i1 0, bb %select.then220, i1 %229]
  br i1 %288, bb %select.then231, bb %select.else232
select.then231:
  235 = call i32 findfa(i32 0)
  237 = call i32 findfa(i32 %81)
  238 = icmp eq i32 %235, i32 %237
  br bb %select.exit233
select.else232:
  br bb %select.exit233
select.exit233:
  280 = phi [bb %select.else232, i1 0, bb %select.then231, i1 %238]
  br i1 %280, bb %then240, bb %if.exit241
then240:
  244 = add i32 %303, i32 1
  call void putint(i32 %244)
  call void putch(i32 10)
  br bb %if.exit241
if.exit241:
  297 = phi [bb %select.exit233, i32 %299, bb %then240, i32 1]
  263 = phi [bb %select.exit233, i32 %265, bb %then240, i32 %244]
  br bb %if.exit97
then255:
  257 = sub i32 0, i32 1
  call void putint(i32 %257)
  call void putch(i32 10)
  br bb %if.exit256
if.exit256:
  br bb %while.cond66
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


