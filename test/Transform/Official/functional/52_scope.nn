global ptr a init with i32 7
external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry12:
  %i = stack 4
  %result = stack 4
  store i32 0 to ptr %result
  store i32 0 to ptr %i
  br bb %while.cond
while.cond:
  i.load = load i32 from ptr %i
  19 = icmp slt i32 %i.load, i32 100
  20 = icmp ne i1 %19, i1 0
  br i1 %20, bb %while.body, bb %while.exit
while.body:
  21 = call i32 func()
  22 = icmp eq i32 %21, i32 1
  br i1 %22, bb %then23, bb %if.exit24
while.exit:
  result.load29 = load i32 from ptr %result
  30 = icmp slt i32 %result.load29, i32 100
  br i1 %30, bb %then31, bb %else33
then23:
  result.load = load i32 from ptr %result
  26 = add i32 %result.load, i32 1
  store i32 %26 to ptr %result
  br bb %if.exit24
if.exit24:
  i.load27 = load i32 from ptr %i
  28 = add i32 %i.load27, i32 1
  store i32 %28 to ptr %i
  br bb %while.cond
then31:
  call void putint(i32 1)
  br bb %if.exit32
if.exit32:
  ret i32 0
else33:
  call void putint(i32 0)
  br bb %if.exit32
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 func() {
entry:
  %a = stack 4
  %b = stack 4
  a.load = load i32 from ptr @a
  store i32 %a.load to ptr %b
  store i32 1 to ptr %a
  6 = icmp eq i32 1, i32 %a.load
  br i1 %6, bb %then, bb %else
then:
  a.load10 = load i32 from ptr %a
  11 = add i32 %a.load10, i32 1
  store i32 %11 to ptr %a
  ret i32 1
if.exit:
  unreachable
else:
  ret i32 0
}


