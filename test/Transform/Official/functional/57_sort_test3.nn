global ptr n init with i32 0
external i32 getint()

external i32 getch()

external void putint(i32 )

i32 QuickSort(ptr arr, i32 low, i32 high) {
entry:
  5 = icmp slt i32 %low, i32 %high
  br i1 %5, bb %then, bb %if.exit
then:
  14 = mul i32 %low, i32 4
  15 = ptradd ptr %arr, i32 %14
  15.load = load i32 from ptr %15
  br bb %while.cond
if.exit:
  170 = phi [bb %entry, i32 ub, bb %while.exit, i32 %107]
  169 = phi [bb %entry, i1 ub, bb %while.exit, i1 %168]
  165 = phi [bb %entry, i1 ub, bb %while.exit, i1 %164]
  161 = phi [bb %entry, i32 ub, bb %while.exit, i32 %15.load]
  159 = phi [bb %entry, i32 ub, bb %while.exit, i32 %158]
  155 = phi [bb %entry, i32 ub, bb %while.exit, i32 %154]
  ret i32 0
while.cond:
  168 = phi [bb %then, i1 ub, bb %if.exit83, i1 %166]
  164 = phi [bb %then, i1 ub, bb %if.exit83, i1 %162]
  158 = phi [bb %then, i32 %high, bb %if.exit83, i32 %157]
  154 = phi [bb %then, i32 %low, bb %if.exit83, i32 %153]
  22 = icmp slt i32 %154, i32 %158
  23 = icmp ne i1 %22, i1 0
  br i1 %23, bb %while.body, bb %while.exit
while.body:
  br bb %while.cond24
while.exit:
  94 = mul i32 %154, i32 4
  95 = ptradd ptr %arr, i32 %94
  store i32 %15.load to ptr %95
  99 = sub i32 %154, i32 1
  102 = call i32 QuickSort(ptr %arr, i32 %low, i32 %99)
  104 = add i32 %154, i32 1
  107 = call i32 QuickSort(ptr %arr, i32 %104, i32 %high)
  br bb %if.exit
while.cond24:
  163 = phi [bb %while.body, i1 %164, bb %while.body25, i1 %162]
  160 = phi [bb %while.body, i32 %158, bb %while.body25, i32 %44]
  29 = icmp slt i32 %154, i32 %160
  br i1 %29, bb %select.then, bb %select.else
while.body25:
  44 = sub i32 %160, i32 1
  br bb %while.cond24
while.exit26:
  47 = icmp slt i32 %154, i32 %160
  br i1 %47, bb %then48, bb %if.exit49
select.then:
  35 = mul i32 %160, i32 4
  36 = ptradd ptr %arr, i32 %35
  36.load = load i32 from ptr %36
  39 = sub i32 %15.load, i32 1
  40 = icmp sgt i32 %36.load, i32 %39
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  162 = phi [bb %select.else, i1 0, bb %select.then, i1 %40]
  42 = icmp ne i1 %162, i1 0
  br i1 %42, bb %while.body25, bb %while.exit26
then48:
  51 = mul i32 %154, i32 4
  52 = ptradd ptr %arr, i32 %51
  54 = mul i32 %160, i32 4
  55 = ptradd ptr %arr, i32 %54
  55.load = load i32 from ptr %55
  store i32 %55.load to ptr %52
  58 = add i32 %154, i32 1
  br bb %if.exit49
if.exit49:
  156 = phi [bb %while.exit26, i32 %154, bb %then48, i32 %58]
  br bb %while.cond59
while.cond59:
  167 = phi [bb %if.exit49, i1 %168, bb %while.body60, i1 %166]
  153 = phi [bb %if.exit49, i32 %156, bb %while.body60, i32 %78]
  64 = icmp slt i32 %153, i32 %160
  br i1 %64, bb %select.then65, bb %select.else66
while.body60:
  78 = add i32 %153, i32 1
  br bb %while.cond59
while.exit61:
  81 = icmp slt i32 %153, i32 %160
  br i1 %81, bb %then82, bb %if.exit83
select.then65:
  70 = mul i32 %153, i32 4
  71 = ptradd ptr %arr, i32 %70
  71.load = load i32 from ptr %71
  74 = icmp slt i32 %71.load, i32 %15.load
  br bb %select.exit67
select.else66:
  br bb %select.exit67
select.exit67:
  166 = phi [bb %select.else66, i1 0, bb %select.then65, i1 %74]
  76 = icmp ne i1 %166, i1 0
  br i1 %76, bb %while.body60, bb %while.exit61
then82:
  85 = mul i32 %160, i32 4
  86 = ptradd ptr %arr, i32 %85
  88 = mul i32 %153, i32 4
  89 = ptradd ptr %arr, i32 %88
  89.load = load i32 from ptr %89
  store i32 %89.load to ptr %86
  92 = sub i32 %160, i32 1
  br bb %if.exit83
if.exit83:
  157 = phi [bb %while.exit61, i32 %160, bb %then82, i32 %92]
  br bb %while.cond
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry108:
  %a = stack 40
  store i32 10 to ptr @n
  110 = mul i32 0, i32 4
  111 = ptradd ptr %a, i32 %110
  store i32 4 to ptr %111
  112 = mul i32 1, i32 4
  113 = ptradd ptr %a, i32 %112
  store i32 3 to ptr %113
  114 = mul i32 2, i32 4
  115 = ptradd ptr %a, i32 %114
  store i32 9 to ptr %115
  116 = mul i32 3, i32 4
  117 = ptradd ptr %a, i32 %116
  store i32 2 to ptr %117
  118 = mul i32 4, i32 4
  119 = ptradd ptr %a, i32 %118
  store i32 0 to ptr %119
  120 = mul i32 5, i32 4
  121 = ptradd ptr %a, i32 %120
  store i32 1 to ptr %121
  122 = mul i32 6, i32 4
  123 = ptradd ptr %a, i32 %122
  store i32 6 to ptr %123
  124 = mul i32 7, i32 4
  125 = ptradd ptr %a, i32 %124
  store i32 5 to ptr %125
  126 = mul i32 8, i32 4
  127 = ptradd ptr %a, i32 %126
  store i32 7 to ptr %127
  128 = mul i32 9, i32 4
  129 = ptradd ptr %a, i32 %128
  store i32 8 to ptr %129
  134 = call i32 QuickSort(ptr %a, i32 0, i32 9)
  br bb %while.cond135
while.cond135:
  172 = phi [bb %entry108, i32 ub, bb %while.body136, i32 10]
  171 = phi [bb %entry108, i32 %134, bb %while.body136, i32 %152]
  n.load = load i32 from ptr @n
  140 = icmp slt i32 %171, i32 %n.load
  141 = icmp ne i1 %140, i1 0
  br i1 %141, bb %while.body136, bb %while.exit137
while.body136:
  144 = mul i32 %171, i32 4
  145 = ptradd ptr %a, i32 %144
  145.load = load i32 from ptr %145
  call void putint(i32 %145.load)
  call void putch(i32 10)
  152 = add i32 %171, i32 1
  br bb %while.cond135
while.exit137:
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


