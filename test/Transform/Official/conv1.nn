global ptr kernelid init with 10000 x i32 zeros
global ptr b init with 10000000 x i32 zeros
global ptr a init with 10000000 x i32 zeros
global ptr max init with i32 1073741824
i32 convn(i32 kernelid, ptr input, ptr output, i32 n, i32 m, i32 c) {
entry201:
  %curr = stack 4
  %y = stack 4
  %x = stack 4
  %j = stack 4
  %i206 = stack 4
  %c.stack = stack 4
  %m.stack204 = stack 4
  %n.stack203 = stack 4
  %kernelid.stack202 = stack 4
  store i32 %kernelid to ptr %kernelid.stack202
  store i32 %n to ptr %n.stack203
  store i32 %m to ptr %m.stack204
  store i32 %c to ptr %c.stack
  store i32 0 to ptr %i206
  store i32 0 to ptr %j
  br bb %while.cond211
while.cond211:
  214 = icmp eq i32 1, i32 1
  215 = icmp ne i1 %214, i1 0
  br i1 %215, bb %while.body212, bb %while.exit213
while.body212:
  store i32 0 to ptr %j
  br bb %while.cond216
while.exit213:
  ret i32 0
while.cond216:
  219 = icmp eq i32 1, i32 1
  220 = icmp ne i1 %219, i1 0
  br i1 %220, bb %while.body217, bb %while.exit218
while.body217:
  store i32 0 to ptr %curr
  i206.load = load i32 from ptr %i206
  c.stack.load = load i32 from ptr %c.stack
  223 = sdiv i32 %c.stack.load, i32 2
  224 = sub i32 %i206.load, i32 %223
  store i32 %224 to ptr %x
  br bb %while.cond225
while.exit218:
  i206.load282 = load i32 from ptr %i206
  283 = add i32 %i206.load282, i32 1
  store i32 %283 to ptr %i206
  i206.load284 = load i32 from ptr %i206
  n.stack203.load285 = load i32 from ptr %n.stack203
  286 = icmp sge i32 %i206.load284, i32 %n.stack203.load285
  br i1 %286, bb %then287, bb %if.exit288
while.cond225:
  228 = icmp eq i32 1, i32 1
  229 = icmp ne i1 %228, i1 0
  br i1 %229, bb %while.body226, bb %while.exit227
while.body226:
  j.load = load i32 from ptr %j
  c.stack.load231 = load i32 from ptr %c.stack
  232 = sdiv i32 %c.stack.load231, i32 2
  233 = sub i32 %j.load, i32 %232
  store i32 %233 to ptr %y
  br bb %while.cond234
while.exit227:
  i206.load267 = load i32 from ptr %i206
  m.stack204.load268 = load i32 from ptr %m.stack204
  269 = mul i32 %i206.load267, i32 %m.stack204.load268
  j.load270 = load i32 from ptr %j
  271 = add i32 %269, i32 %j.load270
  272 = mul i32 %271, i32 4
  273 = ptradd ptr %output, i32 %272
  curr.load274 = load i32 from ptr %curr
  store i32 %curr.load274 to ptr %273
  j.load275 = load i32 from ptr %j
  276 = add i32 %j.load275, i32 1
  store i32 %276 to ptr %j
  j.load277 = load i32 from ptr %j
  m.stack204.load278 = load i32 from ptr %m.stack204
  279 = icmp sge i32 %j.load277, i32 %m.stack204.load278
  br i1 %279, bb %then280, bb %if.exit281
while.cond234:
  237 = icmp eq i32 1, i32 1
  238 = icmp ne i1 %237, i1 0
  br i1 %238, bb %while.body235, bb %while.exit236
while.body235:
  kernelid.stack202.load = load i32 from ptr %kernelid.stack202
  curr.load = load i32 from ptr %curr
  n.stack203.load = load i32 from ptr %n.stack203
  m.stack204.load = load i32 from ptr %m.stack204
  x.load = load i32 from ptr %x
  y.load = load i32 from ptr %y
  245 = call i32 getvalue(ptr %input, i32 %n.stack203.load, i32 %m.stack204.load, i32 %x.load, i32 %y.load)
  246 = call i32 reduce(i32 %kernelid.stack202.load, i32 %curr.load, i32 %245)
  store i32 %246 to ptr %curr
  y.load247 = load i32 from ptr %y
  248 = add i32 %y.load247, i32 1
  store i32 %248 to ptr %y
  y.load249 = load i32 from ptr %y
  j.load250 = load i32 from ptr %j
  c.stack.load251 = load i32 from ptr %c.stack
  252 = sdiv i32 %c.stack.load251, i32 2
  253 = add i32 %j.load250, i32 %252
  254 = icmp sge i32 %y.load249, i32 %253
  br i1 %254, bb %then255, bb %if.exit256
while.exit236:
  x.load257 = load i32 from ptr %x
  258 = add i32 %x.load257, i32 1
  store i32 %258 to ptr %x
  x.load259 = load i32 from ptr %x
  i206.load260 = load i32 from ptr %i206
  c.stack.load261 = load i32 from ptr %c.stack
  262 = sdiv i32 %c.stack.load261, i32 2
  263 = add i32 %i206.load260, i32 %262
  264 = icmp sge i32 %x.load259, i32 %263
  br i1 %264, bb %then265, bb %if.exit266
then255:
  br bb %while.exit236
if.exit256:
  br bb %while.cond234
then265:
  br bb %while.exit227
if.exit266:
  br bb %while.cond225
then280:
  br bb %while.exit218
if.exit281:
  br bb %while.cond216
then287:
  br bb %while.exit213
if.exit288:
  br bb %while.cond211
}

i32 getvalue(ptr array, i32 n, i32 m, i32 x, i32 y) {
entry158:
  %select185 = stack 1
  %select176 = stack 1
  %select168 = stack 1
  %y.stack162 = stack 4
  %x.stack161 = stack 4
  %m.stack = stack 4
  %n.stack = stack 4
  store i32 %n to ptr %n.stack
  store i32 %m to ptr %m.stack
  store i32 %x to ptr %x.stack161
  store i32 %y to ptr %y.stack162
  x.stack161.load = load i32 from ptr %x.stack161
  164 = icmp slt i32 %x.stack161.load, i32 0
  br i1 %164, bb %select.then165, bb %select.else166
select.then165:
  store i1 1 to ptr %select168
  br bb %select.exit167
select.else166:
  y.stack162.load = load i32 from ptr %y.stack162
  170 = icmp slt i32 %y.stack162.load, i32 0
  171 = icmp ne i1 %170, i1 0
  store i1 %171 to ptr %select168
  br bb %select.exit167
select.exit167:
  172 = load i1 from ptr %select168
  br i1 %172, bb %select.then173, bb %select.else174
select.then173:
  store i1 1 to ptr %select176
  br bb %select.exit175
select.else174:
  x.stack161.load177 = load i32 from ptr %x.stack161
  n.stack.load = load i32 from ptr %n.stack
  179 = icmp sge i32 %x.stack161.load177, i32 %n.stack.load
  180 = icmp ne i1 %179, i1 0
  store i1 %180 to ptr %select176
  br bb %select.exit175
select.exit175:
  181 = load i1 from ptr %select176
  br i1 %181, bb %select.then182, bb %select.else183
select.then182:
  store i1 1 to ptr %select185
  br bb %select.exit184
select.else183:
  y.stack162.load186 = load i32 from ptr %y.stack162
  m.stack.load = load i32 from ptr %m.stack
  188 = icmp sge i32 %y.stack162.load186, i32 %m.stack.load
  189 = icmp ne i1 %188, i1 0
  store i1 %189 to ptr %select185
  br bb %select.exit184
select.exit184:
  190 = load i1 from ptr %select185
  br i1 %190, bb %then191, bb %if.exit192
then191:
  ret i32 0
if.exit192:
  x.stack161.load193 = load i32 from ptr %x.stack161
  m.stack.load194 = load i32 from ptr %m.stack
  195 = mul i32 %x.stack161.load193, i32 %m.stack.load194
  y.stack162.load196 = load i32 from ptr %y.stack162
  197 = add i32 %195, i32 %y.stack162.load196
  198 = mul i32 %197, i32 4
  199 = ptradd ptr %array, i32 %198
  199.load = load i32 from ptr %199
  ret i32 %199.load
}

i32 reduce(i32 kernelid, i32 x, i32 y) {
entry22:
  %select140 = stack 1
  %i124 = stack 4
  %ret123 = stack 4
  %select = stack 1
  %i84 = stack 4
  %ret83 = stack 4
  %i = stack 4
  %ret = stack 4
  %y.stack = stack 4
  %x.stack = stack 4
  %kernelid.stack = stack 4
  store i32 %kernelid to ptr %kernelid.stack
  store i32 %x to ptr %x.stack
  store i32 %y to ptr %y.stack
  kernelid.stack.load = load i32 from ptr %kernelid.stack
  27 = icmp eq i32 %kernelid.stack.load, i32 0
  br i1 %27, bb %then, bb %if.exit
then:
  x.stack.load = load i32 from ptr %x.stack
  y.stack.load = load i32 from ptr %y.stack
  32 = add i32 %x.stack.load, i32 %y.stack.load
  33 = call i32 checkrange(i32 %32)
  ret i32 %33
if.exit:
  kernelid.stack.load34 = load i32 from ptr %kernelid.stack
  35 = icmp eq i32 %kernelid.stack.load34, i32 1
  br i1 %35, bb %then36, bb %if.exit37
then36:
  store i32 0 to ptr %ret
  store i32 1 to ptr %i
  br bb %while.cond40
if.exit37:
  kernelid.stack.load67 = load i32 from ptr %kernelid.stack
  68 = icmp eq i32 %kernelid.stack.load67, i32 2
  br i1 %68, bb %then69, bb %if.exit70
while.cond40:
  i.load = load i32 from ptr %i
  max.load44 = load i32 from ptr @max
  45 = icmp slt i32 %i.load, i32 %max.load44
  46 = icmp ne i1 %45, i1 0
  br i1 %46, bb %while.body41, bb %while.exit42
while.body41:
  x.stack.load47 = load i32 from ptr %x.stack
  i.load48 = load i32 from ptr %i
  49 = sdiv i32 %x.stack.load47, i32 %i.load48
  50 = srem i32 %49, i32 2
  y.stack.load51 = load i32 from ptr %y.stack
  i.load52 = load i32 from ptr %i
  53 = sdiv i32 %y.stack.load51, i32 %i.load52
  54 = srem i32 %53, i32 2
  55 = icmp eq i32 %50, i32 %54
  br i1 %55, bb %then56, bb %else
while.exit42:
  ret.load66 = load i32 from ptr %ret
  ret i32 %ret.load66
then56:
  ret.load = load i32 from ptr %ret
  60 = mul i32 %ret.load, i32 2
  store i32 %60 to ptr %ret
  br bb %if.exit57
if.exit57:
  i.load64 = load i32 from ptr %i
  65 = mul i32 %i.load64, i32 2
  store i32 %65 to ptr %i
  br bb %while.cond40
else:
  ret.load61 = load i32 from ptr %ret
  62 = mul i32 %ret.load61, i32 2
  63 = add i32 %62, i32 1
  store i32 %63 to ptr %ret
  br bb %if.exit57
then69:
  x.stack.load71 = load i32 from ptr %x.stack
  y.stack.load72 = load i32 from ptr %y.stack
  73 = icmp sgt i32 %x.stack.load71, i32 %y.stack.load72
  br i1 %73, bb %then74, bb %else76
if.exit70:
  kernelid.stack.load79 = load i32 from ptr %kernelid.stack
  80 = icmp eq i32 %kernelid.stack.load79, i32 3
  br i1 %80, bb %then81, bb %if.exit82
then74:
  x.stack.load77 = load i32 from ptr %x.stack
  ret i32 %x.stack.load77
if.exit75:
  br bb %if.exit70
else76:
  y.stack.load78 = load i32 from ptr %y.stack
  ret i32 %y.stack.load78
then81:
  store i32 0 to ptr %ret83
  store i32 1 to ptr %i84
  br bb %while.cond85
if.exit82:
  kernelid.stack.load119 = load i32 from ptr %kernelid.stack
  120 = icmp eq i32 %kernelid.stack.load119, i32 4
  br i1 %120, bb %then121, bb %if.exit122
while.cond85:
  i84.load = load i32 from ptr %i84
  max.load89 = load i32 from ptr @max
  90 = icmp slt i32 %i84.load, i32 %max.load89
  91 = icmp ne i1 %90, i1 0
  br i1 %91, bb %while.body86, bb %while.exit87
while.body86:
  x.stack.load92 = load i32 from ptr %x.stack
  i84.load93 = load i32 from ptr %i84
  94 = sdiv i32 %x.stack.load92, i32 %i84.load93
  95 = srem i32 %94, i32 2
  96 = icmp eq i32 %95, i32 1
  br i1 %96, bb %select.then, bb %select.else
while.exit87:
  ret83.load118 = load i32 from ptr %ret83
  ret i32 %ret83.load118
select.then:
  store i1 1 to ptr %select
  br bb %select.exit
select.else:
  y.stack.load101 = load i32 from ptr %y.stack
  i84.load102 = load i32 from ptr %i84
  103 = sdiv i32 %y.stack.load101, i32 %i84.load102
  104 = srem i32 %103, i32 2
  105 = icmp eq i32 %104, i32 1
  106 = icmp ne i1 %105, i1 0
  store i1 %106 to ptr %select
  br bb %select.exit
select.exit:
  107 = load i1 from ptr %select
  br i1 %107, bb %then108, bb %else110
then108:
  ret83.load = load i32 from ptr %ret83
  112 = mul i32 %ret83.load, i32 2
  113 = add i32 %112, i32 1
  store i32 %113 to ptr %ret83
  br bb %if.exit109
if.exit109:
  i84.load116 = load i32 from ptr %i84
  117 = mul i32 %i84.load116, i32 2
  store i32 %117 to ptr %i84
  br bb %while.cond85
else110:
  ret83.load114 = load i32 from ptr %ret83
  115 = mul i32 %ret83.load114, i32 2
  store i32 %115 to ptr %ret83
  br bb %if.exit109
then121:
  store i32 0 to ptr %ret123
  store i32 1 to ptr %i124
  br bb %while.cond125
if.exit122:
  ret i32 0
while.cond125:
  i124.load = load i32 from ptr %i124
  max.load129 = load i32 from ptr @max
  130 = icmp slt i32 %i124.load, i32 %max.load129
  131 = icmp ne i1 %130, i1 0
  br i1 %131, bb %while.body126, bb %while.exit127
while.body126:
  x.stack.load132 = load i32 from ptr %x.stack
  i124.load133 = load i32 from ptr %i124
  134 = sdiv i32 %x.stack.load132, i32 %i124.load133
  135 = srem i32 %134, i32 2
  136 = icmp eq i32 %135, i32 1
  br i1 %136, bb %select.then137, bb %select.else138
while.exit127:
  ret123.load157 = load i32 from ptr %ret123
  ret i32 %ret123.load157
select.then137:
  y.stack.load141 = load i32 from ptr %y.stack
  i124.load142 = load i32 from ptr %i124
  143 = sdiv i32 %y.stack.load141, i32 %i124.load142
  144 = srem i32 %143, i32 2
  145 = icmp eq i32 %144, i32 1
  store i1 %145 to ptr %select140
  br bb %select.exit139
select.else138:
  store i1 0 to ptr %select140
  br bb %select.exit139
select.exit139:
  146 = load i1 from ptr %select140
  br i1 %146, bb %then147, bb %else149
then147:
  ret123.load = load i32 from ptr %ret123
  151 = mul i32 %ret123.load, i32 2
  152 = add i32 %151, i32 1
  store i32 %152 to ptr %ret123
  br bb %if.exit148
if.exit148:
  i124.load155 = load i32 from ptr %i124
  156 = mul i32 %i124.load155, i32 2
  store i32 %156 to ptr %i124
  br bb %while.cond125
else149:
  ret123.load153 = load i32 from ptr %ret123
  154 = mul i32 %ret123.load153, i32 2
  store i32 %154 to ptr %ret123
  br bb %if.exit148
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 main() {
entry308:
  %i319 = stack 4
  %task = stack 4
  %m = stack 4
  %n = stack 4
  %c = stack 4
  310 = call i32 getint()
  store i32 %310 to ptr %c
  312 = call i32 getint()
  store i32 %312 to ptr %n
  314 = call i32 getint()
  store i32 %314 to ptr %m
  315 = call i32 getarray(ptr @a)
  317 = call i32 getarray(ptr @kernelid)
  store i32 %317 to ptr %task
  call void _sysy_starttime(i32 109)
  store i32 0 to ptr %i319
  br bb %while.cond320
while.cond320:
  i319.load = load i32 from ptr %i319
  task.load = load i32 from ptr %task
  325 = icmp slt i32 %i319.load, i32 %task.load
  326 = icmp ne i1 %325, i1 0
  br i1 %326, bb %while.body321, bb %while.exit322
while.body321:
  i319.load327 = load i32 from ptr %i319
  328 = mul i32 %i319.load327, i32 4
  329 = ptradd ptr @kernelid, i32 %328
  329.load = load i32 from ptr %329
  n.load = load i32 from ptr %n
  m.load = load i32 from ptr %m
  c.load = load i32 from ptr %c
  334 = call i32 convn(i32 %329.load, ptr @a, ptr @b, i32 %n.load, i32 %m.load, i32 %c.load)
  n.load335 = load i32 from ptr %n
  m.load336 = load i32 from ptr %m
  337 = mul i32 %n.load335, i32 %m.load336
  call void memmove(ptr @a, ptr @b, i32 %337)
  i319.load339 = load i32 from ptr %i319
  340 = add i32 %i319.load339, i32 1
  store i32 %340 to ptr %i319
  br bb %while.cond320
while.exit322:
  call void _sysy_starttime(i32 116)
  n.load342 = load i32 from ptr %n
  m.load343 = load i32 from ptr %m
  344 = mul i32 %n.load342, i32 %m.load343
  call void putarray(i32 %344, ptr @a)
  ret i32 0
}

void memmove(ptr dst, ptr src, i32 n) {
entry289:
  %i291 = stack 4
  %n.stack290 = stack 4
  store i32 %n to ptr %n.stack290
  store i32 0 to ptr %i291
  br bb %while.cond292
while.cond292:
  i291.load = load i32 from ptr %i291
  n.stack290.load = load i32 from ptr %n.stack290
  297 = icmp slt i32 %i291.load, i32 %n.stack290.load
  298 = icmp ne i1 %297, i1 0
  br i1 %298, bb %while.body293, bb %while.exit294
while.body293:
  i291.load299 = load i32 from ptr %i291
  300 = mul i32 %i291.load299, i32 4
  301 = ptradd ptr %dst, i32 %300
  i291.load302 = load i32 from ptr %i291
  303 = mul i32 %i291.load302, i32 4
  304 = ptradd ptr %src, i32 %303
  304.load = load i32 from ptr %304
  store i32 %304.load to ptr %301
  i291.load306 = load i32 from ptr %i291
  307 = add i32 %i291.load306, i32 1
  store i32 %307 to ptr %i291
  br bb %while.cond292
while.exit294:
  ret 
}

external float getfloat()

external void putfloat(float )

i32 checkrange(i32 num) {
entry:
  %num.stack = stack 4
  store i32 %num to ptr %num.stack
  br bb %while.cond
while.cond:
  num.stack.load = load i32 from ptr %num.stack
  max.load = load i32 from ptr @max
  7 = icmp sgt i32 %num.stack.load, i32 %max.load
  8 = icmp ne i1 %7, i1 0
  br i1 %8, bb %while.body, bb %while.exit
while.body:
  num.stack.load9 = load i32 from ptr %num.stack
  max.load10 = load i32 from ptr @max
  11 = sub i32 %num.stack.load9, i32 %max.load10
  store i32 %11 to ptr %num.stack
  br bb %while.cond
while.exit:
  br bb %while.cond12
while.cond12:
  num.stack.load15 = load i32 from ptr %num.stack
  16 = icmp slt i32 %num.stack.load15, i32 0
  17 = icmp ne i1 %16, i1 0
  br i1 %17, bb %while.body13, bb %while.exit14
while.body13:
  num.stack.load18 = load i32 from ptr %num.stack
  max.load19 = load i32 from ptr @max
  20 = add i32 %num.stack.load18, i32 %max.load19
  store i32 %20 to ptr %num.stack
  br bb %while.cond12
while.exit14:
  num.stack.load21 = load i32 from ptr %num.stack
  ret i32 %num.stack.load21
}


