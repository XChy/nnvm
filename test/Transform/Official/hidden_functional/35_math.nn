immutable global ptr e init with float 2.718282
float my_powf(float a, float x) {
entry309:
  298430 = si2f i32 1 to float
  107742 = fsub float %a, float %298430
  108743 = si2f i32 2 to float
  109744 = fdiv float %107742, float %108743
  110745 = fadd float %298430, float %109744
  881388 = fdiv float %298430, float %298430
  881394 = fdiv float %298430, float %110745
  119751 = si2f i32 4 to float
  120752 = fmul float %119751, float %881394
  121753 = fadd float %881388, float %120752
  881400 = fdiv float %298430, float %a
  124755 = fadd float %121753, float %881400
  128756 = fmul float %124755, float %107742
  129757 = si2f i32 6 to float
  130758 = fdiv float %128756, float %129757
  br bb %asr4.entry215477.split
asr4.entry215477.split:
  228479 = call float asr5(float %298430, float %a, float 0.000000, float %130758, i32 1)
  315 = fmul float %x, float %228479
  316 = call float my_exp(float %315)
  ret float %316
}

float my_log(float a, float N) {
entry301:
  298418 = si2f i32 1 to float
  107664 = fsub float %N, float %298418
  108665 = si2f i32 2 to float
  109666 = fdiv float %107664, float %108665
  110667 = fadd float %298418, float %109666
  881352 = fdiv float %298418, float %298418
  881358 = fdiv float %298418, float %110667
  119673 = si2f i32 4 to float
  120674 = fmul float %119673, float %881358
  121675 = fadd float %881352, float %120674
  881364 = fdiv float %298418, float %N
  124677 = fadd float %121675, float %881364
  128678 = fmul float %124677, float %107664
  129679 = si2f i32 6 to float
  130680 = fdiv float %128678, float %129679
  br bb %asr4.entry215465.split
asr4.entry215465.split:
  228467 = call float asr5(float %298418, float %N, float 0.000000, float %130680, i32 1)
  107703 = fsub float %a, float %298418
  109705 = fdiv float %107703, float %108665
  110706 = fadd float %298418, float %109705
  881376 = fdiv float %298418, float %110706
  120713 = fmul float %119673, float %881376
  121714 = fadd float %881352, float %120713
  881382 = fdiv float %298418, float %a
  124716 = fadd float %121714, float %881382
  128717 = fmul float %124716, float %107703
  130719 = fdiv float %128717, float %129679
  br bb %asr4.entry215471.split
asr4.entry215471.split:
  228473 = call float asr5(float %298418, float %a, float 0.000000, float %130719, i32 1)
  308 = fdiv float %228467, float %228473
  ret float %308
}

float my_ln(float x) {
entry296:
  298 = si2f i32 1 to float
  107625 = fsub float %x, float %298
  108626 = si2f i32 2 to float
  109627 = fdiv float %107625, float %108626
  110628 = fadd float %298, float %109627
  881334 = fdiv float %298, float %298
  881340 = fdiv float %298, float %110628
  119634 = si2f i32 4 to float
  120635 = fmul float %119634, float %881340
  121636 = fadd float %881334, float %120635
  881346 = fdiv float %298, float %x
  124638 = fadd float %121636, float %881346
  128639 = fmul float %124638, float %107625
  129640 = si2f i32 6 to float
  130641 = fdiv float %128639, float %129640
  br bb %asr4.entry215.split
asr4.entry215.split:
  228461 = call float asr5(float %298, float %x, float 0.000000, float %130641, i32 1)
  ret float %228461
}

float my_exp(float x) {
entry267:
  270 = si2f i32 0 to float
  271 = fcmp olt float %x, float %270
  br i1 %271, bb %then272, bb %if.exit273
then272:
  275 = fneg float %x
  276 = call float my_exp(float %275)
  277 = si2f i32 1 to float
  278 = fdiv float %277, float %276
  ret float %278
if.exit273:
  281 = f2si float %x to i32
  284 = si2f i32 %281 to float
  285 = fsub float %x, float %284
  289 = call float my_pow(float 2.718282, i32 %281)
  292 = call float eee(float %285)
  295 = fmul float %289, float %292
  ret float %295
}

float eee(float x) {
entry229:
  232 = fcmp ogt float %x, float 0.001000
  br i1 %232, bb %then233, bb %if.exit234
then233:
  237 = si2f i32 2 to float
  238 = fdiv float %x, float %237
  239 = call float eee(float %238)
  242 = fmul float %239, float %239
  ret float %242
if.exit234:
  244 = si2f i32 1 to float
  245 = fadd float %244, float %x
  248 = fmul float %x, float %x
  249 = si2f i32 2 to float
  250 = fdiv float %248, float %249
  251 = fadd float %245, float %250
  253 = call float my_pow(float %x, i32 3)
  254 = si2f i32 6 to float
  255 = fdiv float %253, float %254
  256 = fadd float %251, float %255
  258 = call float my_pow(float %x, i32 4)
  259 = si2f i32 24 to float
  260 = fdiv float %258, float %259
  261 = fadd float %256, float %260
  263 = call float my_pow(float %x, i32 5)
  264 = si2f i32 120 to float
  265 = fdiv float %263, float %264
  266 = fadd float %261, float %265
  ret float %266
}

float asr4(float a, float b, float eps, i32 flag) {
entry215:
  107586 = fsub float %b, float %a
  108587 = si2f i32 2 to float
  109588 = fdiv float %107586, float %108587
  110589 = fadd float %a, float %109588
  112590 = icmp eq i32 %flag, i32 1
  br i1 %112590, bb %simpson.then113592, bb %simpson.if.exit114604
entry215.split:
  226.ret = phi [bb %simpson.then113592, float %130602, bb %simpson.then133607, float %150617, bb %simpson.if.exit134619, float %151620]
  228 = call float asr5(float %a, float %b, float %eps, float %226.ret, i32 %flag)
  ret float %228
simpson.then113592:
  871315 = si2f i32 1 to float
  881316 = fdiv float %871315, float %a
  881322 = fdiv float %871315, float %110589
  119595 = si2f i32 4 to float
  120596 = fmul float %119595, float %881322
  121597 = fadd float %881316, float %120596
  881328 = fdiv float %871315, float %b
  124599 = fadd float %121597, float %881328
  128600 = fmul float %124599, float %107586
  129601 = si2f i32 6 to float
  130602 = fdiv float %128600, float %129601
  br bb %entry215.split
simpson.if.exit114604:
  132605 = icmp eq i32 %flag, i32 2
  br i1 %132605, bb %simpson.then133607, bb %simpson.if.exit134619
simpson.then133607:
  931018 = fmul float %a, float %a
  941019 = si2f i32 1 to float
  951020 = fsub float %941019, float %931018
  961021 = call float my_sqrt(float %951020)
  981022 = fdiv float %941019, float %961021
  931027 = fmul float %110589, float %110589
  951029 = fsub float %941019, float %931027
  961030 = call float my_sqrt(float %951029)
  981031 = fdiv float %941019, float %961030
  139610 = si2f i32 4 to float
  140611 = fmul float %139610, float %981031
  141612 = fadd float %981022, float %140611
  931036 = fmul float %b, float %b
  951038 = fsub float %941019, float %931036
  961039 = call float my_sqrt(float %951038)
  981040 = fdiv float %941019, float %961039
  144614 = fadd float %141612, float %981040
  148615 = fmul float %144614, float %107586
  149616 = si2f i32 6 to float
  150617 = fdiv float %148615, float %149616
  br bb %entry215.split
simpson.if.exit134619:
  151620 = si2f i32 0 to float
  br bb %entry215.split
}

float asr5(float a, float b, float eps, float A, i32 flag) {
entry152:
  162 = fsub float %b, float %a
  163 = si2f i32 2 to float
  164 = fdiv float %162, float %163
  165 = fadd float %a, float %164
  107508 = fsub float %165, float %a
  109510 = fdiv float %107508, float %163
  110511 = fadd float %a, float %109510
  112512 = icmp eq i32 %flag, i32 1
  br i1 %112512, bb %simpson.then113, bb %simpson.if.exit114
entry152.split:
  170.ret = phi [bb %simpson.then113, float %130524, bb %simpson.then133, float %150539, bb %simpson.if.exit134, float %151542]
  107547 = fsub float %b, float %165
  109549 = fdiv float %107547, float %163
  110550 = fadd float %165, float %109549
  br i1 %112512, bb %simpson.then113553, bb %simpson.if.exit114565
entry152.split.split:
  175.ret = phi [bb %simpson.then113553, float %130563, bb %simpson.then133568, float %150578, bb %simpson.if.exit134580, float %151581]
  178 = fadd float %170.ret, float %175.ret
  180 = fsub float %178, float %A
  31477 = si2f i32 0 to float
  41478 = fcmp ogt float %180, float %31477
  br i1 %41478, bb %my_fabs.then, bb %my_fabs.if.exit
entry152.split.split.split:
  181.ret = phi [bb %my_fabs.then, float %180, bb %my_fabs.if.exit, float %91483]
  183 = si2f i32 15 to float
  184 = fmul float %183, float %eps
  185 = fcmp ole float %181.ret, float %184
  br i1 %185, bb %then186, bb %if.exit187
then186:
  196 = fdiv float %180, float 15.000000
  197 = fadd float %178, float %196
  ret float %197
if.exit187:
  202 = fdiv float %eps, float %163
  205 = call float asr5(float %a, float %165, float %202, float %170.ret, i32 %flag)
  213 = call float asr5(float %165, float %b, float %202, float %175.ret, i32 %flag)
  214 = fadd float %205, float %213
  ret float %214
simpson.then113:
  871279 = si2f i32 1 to float
  881280 = fdiv float %871279, float %a
  881286 = fdiv float %871279, float %110511
  119517 = si2f i32 4 to float
  120518 = fmul float %119517, float %881286
  121519 = fadd float %881280, float %120518
  881292 = fdiv float %871279, float %165
  124521 = fadd float %121519, float %881292
  128522 = fmul float %124521, float %107508
  129523 = si2f i32 6 to float
  130524 = fdiv float %128522, float %129523
  br bb %entry152.split
simpson.if.exit114:
  132527 = icmp eq i32 %flag, i32 2
  br i1 %132527, bb %simpson.then133, bb %simpson.if.exit134
simpson.then133:
  93964 = fmul float %a, float %a
  94965 = si2f i32 1 to float
  95966 = fsub float %94965, float %93964
  96967 = call float my_sqrt(float %95966)
  98968 = fdiv float %94965, float %96967
  93973 = fmul float %110511, float %110511
  95975 = fsub float %94965, float %93973
  96976 = call float my_sqrt(float %95975)
  98977 = fdiv float %94965, float %96976
  139532 = si2f i32 4 to float
  140533 = fmul float %139532, float %98977
  141534 = fadd float %98968, float %140533
  93982 = fmul float %165, float %165
  95984 = fsub float %94965, float %93982
  96985 = call float my_sqrt(float %95984)
  98986 = fdiv float %94965, float %96985
  144536 = fadd float %141534, float %98986
  148537 = fmul float %144536, float %107508
  149538 = si2f i32 6 to float
  150539 = fdiv float %148537, float %149538
  br bb %entry152.split
simpson.if.exit134:
  151542 = si2f i32 0 to float
  br bb %entry152.split
simpson.then113553:
  871297 = si2f i32 1 to float
  881298 = fdiv float %871297, float %165
  881304 = fdiv float %871297, float %110550
  119556 = si2f i32 4 to float
  120557 = fmul float %119556, float %881304
  121558 = fadd float %881298, float %120557
  881310 = fdiv float %871297, float %b
  124560 = fadd float %121558, float %881310
  128561 = fmul float %124560, float %107547
  129562 = si2f i32 6 to float
  130563 = fdiv float %128561, float %129562
  br bb %entry152.split.split
simpson.if.exit114565:
  132566 = icmp eq i32 %flag, i32 2
  br i1 %132566, bb %simpson.then133568, bb %simpson.if.exit134580
simpson.then133568:
  93991 = fmul float %165, float %165
  94992 = si2f i32 1 to float
  95993 = fsub float %94992, float %93991
  96994 = call float my_sqrt(float %95993)
  98995 = fdiv float %94992, float %96994
  931000 = fmul float %110550, float %110550
  951002 = fsub float %94992, float %931000
  961003 = call float my_sqrt(float %951002)
  981004 = fdiv float %94992, float %961003
  139571 = si2f i32 4 to float
  140572 = fmul float %139571, float %981004
  141573 = fadd float %98995, float %140572
  931009 = fmul float %b, float %b
  951011 = fsub float %94992, float %931009
  961012 = call float my_sqrt(float %951011)
  981013 = fdiv float %94992, float %961012
  144575 = fadd float %141573, float %981013
  148576 = fmul float %144575, float %107547
  149577 = si2f i32 6 to float
  150578 = fdiv float %148576, float %149577
  br bb %entry152.split.split
simpson.if.exit134580:
  151581 = si2f i32 0 to float
  br bb %entry152.split.split
my_fabs.then:
  br bb %entry152.split.split.split
my_fabs.if.exit:
  91483 = fneg float %180
  br bb %entry152.split.split.split
}

float simpson(float a, float b, i32 flag) {
entry99:
  107 = fsub float %b, float %a
  108 = si2f i32 2 to float
  109 = fdiv float %107, float %108
  110 = fadd float %a, float %109
  112 = icmp eq i32 %flag, i32 1
  br i1 %112, bb %then113, bb %if.exit114
then113:
  871261 = si2f i32 1 to float
  881262 = fdiv float %871261, float %a
  881268 = fdiv float %871261, float %110
  119 = si2f i32 4 to float
  120 = fmul float %119, float %881268
  121 = fadd float %881262, float %120
  881274 = fdiv float %871261, float %b
  124 = fadd float %121, float %881274
  128 = fmul float %124, float %107
  129 = si2f i32 6 to float
  130 = fdiv float %128, float %129
  ret float %130
if.exit114:
  132 = icmp eq i32 %flag, i32 2
  br i1 %132, bb %then133, bb %if.exit134
then133:
  93937 = fmul float %a, float %a
  94938 = si2f i32 1 to float
  95939 = fsub float %94938, float %93937
  96940 = call float my_sqrt(float %95939)
  98941 = fdiv float %94938, float %96940
  93946 = fmul float %110, float %110
  95948 = fsub float %94938, float %93946
  96949 = call float my_sqrt(float %95948)
  98950 = fdiv float %94938, float %96949
  139 = si2f i32 4 to float
  140 = fmul float %139, float %98950
  141 = fadd float %98941, float %140
  93955 = fmul float %b, float %b
  95957 = fsub float %94938, float %93955
  96958 = call float my_sqrt(float %95957)
  98959 = fdiv float %94938, float %96958
  144 = fadd float %141, float %98959
  148 = fmul float %144, float %107
  149 = si2f i32 6 to float
  150 = fdiv float %148, float %149
  ret float %150
if.exit134:
  151 = si2f i32 0 to float
  ret float %151
}

float F2(float x) {
entry89:
  93 = fmul float %x, float %x
  94 = si2f i32 1 to float
  95 = fsub float %94, float %93
  96 = call float my_sqrt(float %95)
  98 = fdiv float %94, float %96
  ret float %98
}

pure float my_sqrt(float x) {
entry43:
  46 = si2f i32 100 to float
  47 = fcmp ogt float %x, float %46
  br i1 %47, bb %then48, bb %if.exit49
then48:
  52 = fdiv float %x, float %46
  53 = call float my_sqrt(float %52)
  54 = fmul float 10.000000, float %53
  ret float %54
if.exit49:
  57 = si2f i32 8 to float
  58 = fdiv float %x, float %57
  59 = fadd float %58, float 0.500000
  61 = si2f i32 2 to float
  62 = fmul float %61, float %x
  64 = si2f i32 4 to float
  65 = fadd float %64, float %x
  66 = fdiv float %62, float %65
  67 = fadd float %59, float %66
  br bb %while.cond69
while.cond69:
  c.phi = phi [bb %if.exit49, i32 10, bb %while.body70, i32 %82]
  t.phi = phi [bb %if.exit49, float %67, bb %while.body70, float %80]
  73 = icmp ne i32 %c.phi, i32 0
  br i1 %73, bb %while.body70, bb %while.exit71
while.body70:
  77 = fdiv float %x, float %t.phi
  78 = fadd float %t.phi, float %77
  80 = fdiv float %78, float %61
  82 = sub i32 %c.phi, i32 1
  br bb %while.cond69
while.exit71:
  ret float %t.phi
}

pure float F1(float x) {
entry84:
  87 = si2f i32 1 to float
  88 = fdiv float %87, float %x
  ret float %88
}

pure float my_pow(float a, i32 n) {
entry10:
  14 = icmp slt i32 %n, i32 0
  br i1 %14, bb %then15, bb %if.exit16
then15:
  19 = sub i32 0, i32 %n
  20 = call float my_pow(float %a, i32 %19)
  21 = si2f i32 1 to float
  22 = fdiv float %21, float %20
  ret float %22
if.exit16:
  br bb %while.cond
while.cond:
  res.phi395 = phi [bb %if.exit16, float 1.000000, bb %if.exit33, float %res.phi]
  n.stack.phi = phi [bb %if.exit16, i32 %n, bb %if.exit33, i32 %401]
  a.stack.phi = phi [bb %if.exit16, float %a, bb %if.exit33, float %39]
  28 = icmp ne i32 %n.stack.phi, i32 0
  br i1 %28, bb %while.body, bb %while.exit
while.body:
  30 = srem i32 %n.stack.phi, i32 2
  31 = icmp ne i32 %30, i32 0
  br i1 %31, bb %then32, bb %if.exit33
while.exit:
  ret float %res.phi395
then32:
  36 = fmul float %res.phi395, float %a.stack.phi
  br bb %if.exit33
if.exit33:
  res.phi = phi [bb %while.body, float %res.phi395, bb %then32, float %36]
  39 = fmul float %a.stack.phi, float %a.stack.phi
  401 = ashr i32 %n.stack.phi, i32 1
  br bb %while.cond
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry317:
  319 = call i32 getint()
  br bb %while.cond320
while.cond320:
  num.phi = phi [bb %entry317, i32 %319, bb %if.exit380, i32 %389]
  324 = icmp ne i32 %num.phi, i32 0
  br i1 %324, bb %while.body321, bb %while.exit322
while.body321:
  326 = call float getfloat()
  328 = call float getfloat()
  31488 = si2f i32 0 to float
  41489 = fcmp ogt float %326, float %31488
  br i1 %41489, bb %my_fabs.then1491, bb %my_fabs.if.exit1493
while.body321.split:
  330.ret = phi [bb %my_fabs.then1491, float %326, bb %my_fabs.if.exit1493, float %91494]
  call void putfloat(float %330.ret)
  call void putch(i32 32)
  334 = call float my_pow(float %326, i32 2)
  call void putfloat(float %334)
  call void putch(i32 32)
  338 = call float my_sqrt(float %326)
  call void putfloat(float %338)
  call void putch(i32 32)
  342 = call float my_exp(float %326)
  call void putfloat(float %342)
  call void putch(i32 32)
  br i1 %41489, bb %then348, bb %else
while.exit322:
  ret i32 0
then348:
  298436 = si2f i32 1 to float
  107781 = fsub float %326, float %298436
  108782 = si2f i32 2 to float
  109783 = fdiv float %107781, float %108782
  110784 = fadd float %298436, float %109783
  881406 = fdiv float %298436, float %298436
  881412 = fdiv float %298436, float %110784
  119790 = si2f i32 4 to float
  120791 = fmul float %119790, float %881412
  121792 = fadd float %881406, float %120791
  881418 = fdiv float %298436, float %326
  124794 = fadd float %121792, float %881418
  128795 = fmul float %124794, float %107781
  129796 = si2f i32 6 to float
  130797 = fdiv float %128795, float %129796
  br bb %asr4.entry215483.split
if.exit349:
  call void putch(i32 32)
  br i1 %41489, bb %select.then, bb %select.else
else:
  call void putch(i32 45)
  br bb %if.exit349
select.then:
  365 = fcmp ogt float %328, float %31488
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %365]
  br i1 %select.phi, bb %then367, bb %else369
then367:
  298448 = si2f i32 1 to float
  107859 = fsub float %328, float %298448
  108860 = si2f i32 2 to float
  109861 = fdiv float %107859, float %108860
  110862 = fadd float %298448, float %109861
  881442 = fdiv float %298448, float %298448
  881448 = fdiv float %298448, float %110862
  119868 = si2f i32 4 to float
  120869 = fmul float %119868, float %881448
  121870 = fadd float %881442, float %120869
  881454 = fdiv float %298448, float %328
  124872 = fadd float %121870, float %881454
  128873 = fmul float %124872, float %107859
  129874 = si2f i32 6 to float
  130875 = fdiv float %128873, float %129874
  br bb %asr4.entry215495.split
if.exit368:
  call void putch(i32 32)
  br i1 %41489, bb %then379, bb %else381
else369:
  call void putch(i32 45)
  br bb %if.exit368
then379:
  298442 = si2f i32 1 to float
  107820 = fsub float %326, float %298442
  108821 = si2f i32 2 to float
  109822 = fdiv float %107820, float %108821
  110823 = fadd float %298442, float %109822
  881424 = fdiv float %298442, float %298442
  881430 = fdiv float %298442, float %110823
  119829 = si2f i32 4 to float
  120830 = fmul float %119829, float %881430
  121831 = fadd float %881424, float %120830
  881436 = fdiv float %298442, float %326
  124833 = fadd float %121831, float %881436
  128834 = fmul float %124833, float %107820
  129835 = si2f i32 6 to float
  130836 = fdiv float %128834, float %129835
  br bb %asr4.entry215489.split
if.exit380:
  call void putch(i32 10)
  389 = sub i32 %num.phi, i32 1
  br bb %while.cond320
else381:
  call void putch(i32 45)
  br bb %if.exit380
asr4.entry215483.split:
  228485 = call float asr5(float %298436, float %326, float 0.000000, float %130797, i32 1)
  call void putfloat(float %228485)
  br bb %if.exit349
asr4.entry215489.split:
  228491 = call float asr5(float %298442, float %326, float 0.000000, float %130836, i32 1)
  315405 = fmul float %328, float %228491
  316406 = call float my_exp(float %315405)
  call void putfloat(float %316406)
  br bb %if.exit380
asr4.entry215495.split:
  228497 = call float asr5(float %298448, float %328, float 0.000000, float %130875, i32 1)
  107898 = fsub float %326, float %298448
  109900 = fdiv float %107898, float %108860
  110901 = fadd float %298448, float %109900
  881466 = fdiv float %298448, float %110901
  120908 = fmul float %119868, float %881466
  121909 = fadd float %881442, float %120908
  881472 = fdiv float %298448, float %326
  124911 = fadd float %121909, float %881472
  128912 = fmul float %124911, float %107898
  130914 = fdiv float %128912, float %129874
  br bb %asr4.entry215501.split
asr4.entry215501.split:
  228503 = call float asr5(float %298448, float %326, float 0.000000, float %130914, i32 1)
  308413 = fdiv float %228497, float %228503
  call void putfloat(float %308413)
  br bb %if.exit368
my_fabs.then1491:
  br bb %while.body321.split
my_fabs.if.exit1493:
  91494 = fneg float %326
  br bb %while.body321.split
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

pure float my_fabs(float x) {
entry:
  3 = si2f i32 0 to float
  4 = fcmp ogt float %x, float %3
  br i1 %4, bb %then, bb %if.exit
then:
  ret float %x
if.exit:
  9 = fneg float %x
  ret float %9
}


