immutable global ptr e init with float 2.718282
pure float my_powf(float a, float x) {
entry315:  pred()
  304436 = si2f i32 1 to float
  112748 = fsub float %a, float %304436
  113749 = si2f i32 2 to float
  114750 = fdiv float %112748, float %113749
  115751 = fadd float %304436, float %114750
  931394 = fdiv float %304436, float %304436
  931400 = fdiv float %304436, float %115751
  124757 = si2f i32 4 to float
  125758 = fmul float %124757, float %931400
  126759 = fadd float %931394, float %125758
  931406 = fdiv float %304436, float %a
  129761 = fadd float %126759, float %931406
  133762 = fmul float %129761, float %112748
  134763 = si2f i32 6 to float
  135764 = fdiv float %133762, float %134763
  233485 = call float asr5(float %304436, float %a, float 0.000000, float %135764, i32 1)
  321 = fmul float %x, float %233485
  322 = call float my_exp(float %321)
  ret float %322
}

pure float my_log(float a, float N) {
entry307:  pred()
  304424 = si2f i32 1 to float
  112670 = fsub float %N, float %304424
  113671 = si2f i32 2 to float
  114672 = fdiv float %112670, float %113671
  115673 = fadd float %304424, float %114672
  931358 = fdiv float %304424, float %304424
  931364 = fdiv float %304424, float %115673
  124679 = si2f i32 4 to float
  125680 = fmul float %124679, float %931364
  126681 = fadd float %931358, float %125680
  931370 = fdiv float %304424, float %N
  129683 = fadd float %126681, float %931370
  133684 = fmul float %129683, float %112670
  134685 = si2f i32 6 to float
  135686 = fdiv float %133684, float %134685
  233473 = call float asr5(float %304424, float %N, float 0.000000, float %135686, i32 1)
  112709 = fsub float %a, float %304424
  114711 = fdiv float %112709, float %113671
  115712 = fadd float %304424, float %114711
  931382 = fdiv float %304424, float %115712
  125719 = fmul float %124679, float %931382
  126720 = fadd float %931358, float %125719
  931388 = fdiv float %304424, float %a
  129722 = fadd float %126720, float %931388
  133723 = fmul float %129722, float %112709
  135725 = fdiv float %133723, float %134685
  233479 = call float asr5(float %304424, float %a, float 0.000000, float %135725, i32 1)
  314 = fdiv float %233473, float %233479
  ret float %314
}

pure float my_ln(float x) {
entry302:  pred()
  304 = si2f i32 1 to float
  112631 = fsub float %x, float %304
  113632 = si2f i32 2 to float
  114633 = fdiv float %112631, float %113632
  115634 = fadd float %304, float %114633
  931340 = fdiv float %304, float %304
  931346 = fdiv float %304, float %115634
  124640 = si2f i32 4 to float
  125641 = fmul float %124640, float %931346
  126642 = fadd float %931340, float %125641
  931352 = fdiv float %304, float %x
  129644 = fadd float %126642, float %931352
  133645 = fmul float %129644, float %112631
  134646 = si2f i32 6 to float
  135647 = fdiv float %133645, float %134646
  233467 = call float asr5(float %304, float %x, float 0.000000, float %135647, i32 1)
  ret float %233467
}

pure float my_exp(float x) {
entry272:  pred()
  275 = si2f i32 0 to float
  276 = fcmp olt float %x, float %275
  br i1 %276, bb %then277, bb %if.exit278
then277:  pred(entry272)
  280 = fneg float %x
  281 = call float my_exp(float %280)
  282 = si2f i32 1 to float
  283 = fdiv float %282, float %281
  ret float %283
if.exit278:  pred(entry272)
  286 = f2si float %x to i32
  290 = si2f i32 %286 to float
  291 = fsub float %x, float %290
  295 = call float my_pow(float 2.718282, i32 %286)
  298 = call float eee(float %291)
  301 = fmul float %295, float %298
  ret float %301
}

pure float eee(float x) {
entry234:  pred()
  237 = fcmp ogt float %x, float 0.001000
  br i1 %237, bb %then238, bb %if.exit239
then238:  pred(entry234)
  242 = si2f i32 2 to float
  243 = fdiv float %x, float %242
  244 = call float eee(float %243)
  247 = fmul float %244, float %244
  ret float %247
if.exit239:  pred(entry234)
  249 = si2f i32 1 to float
  250 = fadd float %249, float %x
  253 = fmul float %x, float %x
  254 = si2f i32 2 to float
  255 = fdiv float %253, float %254
  256 = fadd float %250, float %255
  258 = call float my_pow(float %x, i32 3)
  259 = si2f i32 6 to float
  260 = fdiv float %258, float %259
  261 = fadd float %256, float %260
  263 = call float my_pow(float %x, i32 4)
  264 = si2f i32 24 to float
  265 = fdiv float %263, float %264
  266 = fadd float %261, float %265
  268 = call float my_pow(float %x, i32 5)
  269 = si2f i32 120 to float
  270 = fdiv float %268, float %269
  271 = fadd float %266, float %270
  ret float %271
}

pure float asr4(float a, float b, float eps, i32 flag) {
entry220:  pred()
  112592 = fsub float %b, float %a
  113593 = si2f i32 2 to float
  114594 = fdiv float %112592, float %113593
  115595 = fadd float %a, float %114594
  117596 = icmp eq i32 %flag, i32 1
  br i1 %117596, bb %simpson.then118598, bb %simpson.if.exit119610
entry220.split:  pred(simpson.then118598, simpson.then138613, simpson.if.exit139625)
  231.ret = phi [bb %simpson.then118598, float %135608, bb %simpson.then138613, float %155623, bb %simpson.if.exit139625, float %156626]
  233 = call float asr5(float %a, float %b, float %eps, float %231.ret, i32 %flag)
  ret float %233
simpson.then118598:  pred(entry220)
  921321 = si2f i32 1 to float
  931322 = fdiv float %921321, float %a
  931328 = fdiv float %921321, float %115595
  124601 = si2f i32 4 to float
  125602 = fmul float %124601, float %931328
  126603 = fadd float %931322, float %125602
  931334 = fdiv float %921321, float %b
  129605 = fadd float %126603, float %931334
  133606 = fmul float %129605, float %112592
  134607 = si2f i32 6 to float
  135608 = fdiv float %133606, float %134607
  br bb %entry220.split
simpson.if.exit119610:  pred(entry220)
  137611 = icmp eq i32 %flag, i32 2
  br i1 %137611, bb %simpson.then138613, bb %simpson.if.exit139625
simpson.then138613:  pred(simpson.if.exit119610)
  981024 = fmul float %a, float %a
  991025 = si2f i32 1 to float
  1001026 = fsub float %991025, float %981024
  1011027 = call float my_sqrt(float %1001026)
  1031028 = fdiv float %991025, float %1011027
  981033 = fmul float %115595, float %115595
  1001035 = fsub float %991025, float %981033
  1011036 = call float my_sqrt(float %1001035)
  1031037 = fdiv float %991025, float %1011036
  144616 = si2f i32 4 to float
  145617 = fmul float %144616, float %1031037
  146618 = fadd float %1031028, float %145617
  981042 = fmul float %b, float %b
  1001044 = fsub float %991025, float %981042
  1011045 = call float my_sqrt(float %1001044)
  1031046 = fdiv float %991025, float %1011045
  149620 = fadd float %146618, float %1031046
  153621 = fmul float %149620, float %112592
  154622 = si2f i32 6 to float
  155623 = fdiv float %153621, float %154622
  br bb %entry220.split
simpson.if.exit139625:  pred(simpson.if.exit119610)
  156626 = si2f i32 0 to float
  br bb %entry220.split
}

pure float asr5(float a, float b, float eps, float A, i32 flag) {
entry157:  pred()
  167 = fsub float %b, float %a
  168 = si2f i32 2 to float
  169 = fdiv float %167, float %168
  170 = fadd float %a, float %169
  112514 = fsub float %170, float %a
  114516 = fdiv float %112514, float %168
  115517 = fadd float %a, float %114516
  117518 = icmp eq i32 %flag, i32 1
  br i1 %117518, bb %simpson.then118, bb %simpson.if.exit119
entry157.split:  pred(simpson.then118, simpson.then138, simpson.if.exit139)
  175.ret = phi [bb %simpson.then118, float %135530, bb %simpson.then138, float %155545, bb %simpson.if.exit139, float %156548]
  112553 = fsub float %b, float %170
  114555 = fdiv float %112553, float %168
  115556 = fadd float %170, float %114555
  br i1 %117518, bb %simpson.then118559, bb %simpson.if.exit119571
entry157.split.split:  pred(simpson.then118559, simpson.then138574, simpson.if.exit139586)
  180.ret = phi [bb %simpson.then118559, float %135569, bb %simpson.then138574, float %155584, bb %simpson.if.exit139586, float %156587]
  183 = fadd float %175.ret, float %180.ret
  185 = fsub float %183, float %A
  31483 = si2f i32 0 to float
  41484 = fcmp ogt float %185, float %31483
  br i1 %41484, bb %my_fabs.then, bb %my_fabs.if.exit
entry157.split.split.split:  pred(my_fabs.then, my_fabs.if.exit)
  186.ret = phi [bb %my_fabs.then, float %185, bb %my_fabs.if.exit, float %91489]
  188 = si2f i32 15 to float
  189 = fmul float %188, float %eps
  190 = fcmp ole float %186.ret, float %189
  br i1 %190, bb %then191, bb %if.exit192
then191:  pred(entry157.split.split.split)
  201 = fdiv float %185, float 15.000000
  202 = fadd float %183, float %201
  ret float %202
if.exit192:  pred(entry157.split.split.split)
  207 = fdiv float %eps, float %168
  210 = call float asr5(float %a, float %170, float %207, float %175.ret, i32 %flag)
  218 = call float asr5(float %170, float %b, float %207, float %180.ret, i32 %flag)
  219 = fadd float %210, float %218
  ret float %219
simpson.then118:  pred(entry157)
  921285 = si2f i32 1 to float
  931286 = fdiv float %921285, float %a
  931292 = fdiv float %921285, float %115517
  124523 = si2f i32 4 to float
  125524 = fmul float %124523, float %931292
  126525 = fadd float %931286, float %125524
  931298 = fdiv float %921285, float %170
  129527 = fadd float %126525, float %931298
  133528 = fmul float %129527, float %112514
  134529 = si2f i32 6 to float
  135530 = fdiv float %133528, float %134529
  br bb %entry157.split
simpson.if.exit119:  pred(entry157)
  137533 = icmp eq i32 %flag, i32 2
  br i1 %137533, bb %simpson.then138, bb %simpson.if.exit139
simpson.then138:  pred(simpson.if.exit119)
  98970 = fmul float %a, float %a
  99971 = si2f i32 1 to float
  100972 = fsub float %99971, float %98970
  101973 = call float my_sqrt(float %100972)
  103974 = fdiv float %99971, float %101973
  98979 = fmul float %115517, float %115517
  100981 = fsub float %99971, float %98979
  101982 = call float my_sqrt(float %100981)
  103983 = fdiv float %99971, float %101982
  144538 = si2f i32 4 to float
  145539 = fmul float %144538, float %103983
  146540 = fadd float %103974, float %145539
  98988 = fmul float %170, float %170
  100990 = fsub float %99971, float %98988
  101991 = call float my_sqrt(float %100990)
  103992 = fdiv float %99971, float %101991
  149542 = fadd float %146540, float %103992
  153543 = fmul float %149542, float %112514
  154544 = si2f i32 6 to float
  155545 = fdiv float %153543, float %154544
  br bb %entry157.split
simpson.if.exit139:  pred(simpson.if.exit119)
  156548 = si2f i32 0 to float
  br bb %entry157.split
simpson.then118559:  pred(entry157.split)
  921303 = si2f i32 1 to float
  931304 = fdiv float %921303, float %170
  931310 = fdiv float %921303, float %115556
  124562 = si2f i32 4 to float
  125563 = fmul float %124562, float %931310
  126564 = fadd float %931304, float %125563
  931316 = fdiv float %921303, float %b
  129566 = fadd float %126564, float %931316
  133567 = fmul float %129566, float %112553
  134568 = si2f i32 6 to float
  135569 = fdiv float %133567, float %134568
  br bb %entry157.split.split
simpson.if.exit119571:  pred(entry157.split)
  137572 = icmp eq i32 %flag, i32 2
  br i1 %137572, bb %simpson.then138574, bb %simpson.if.exit139586
simpson.then138574:  pred(simpson.if.exit119571)
  98997 = fmul float %170, float %170
  99998 = si2f i32 1 to float
  100999 = fsub float %99998, float %98997
  1011000 = call float my_sqrt(float %100999)
  1031001 = fdiv float %99998, float %1011000
  981006 = fmul float %115556, float %115556
  1001008 = fsub float %99998, float %981006
  1011009 = call float my_sqrt(float %1001008)
  1031010 = fdiv float %99998, float %1011009
  144577 = si2f i32 4 to float
  145578 = fmul float %144577, float %1031010
  146579 = fadd float %1031001, float %145578
  981015 = fmul float %b, float %b
  1001017 = fsub float %99998, float %981015
  1011018 = call float my_sqrt(float %1001017)
  1031019 = fdiv float %99998, float %1011018
  149581 = fadd float %146579, float %1031019
  153582 = fmul float %149581, float %112553
  154583 = si2f i32 6 to float
  155584 = fdiv float %153582, float %154583
  br bb %entry157.split.split
simpson.if.exit139586:  pred(simpson.if.exit119571)
  156587 = si2f i32 0 to float
  br bb %entry157.split.split
my_fabs.then:  pred(entry157.split.split)
  br bb %entry157.split.split.split
my_fabs.if.exit:  pred(entry157.split.split)
  91489 = fneg float %185
  br bb %entry157.split.split.split
}

pure float simpson(float a, float b, i32 flag) {
entry104:  pred()
  112 = fsub float %b, float %a
  113 = si2f i32 2 to float
  114 = fdiv float %112, float %113
  115 = fadd float %a, float %114
  117 = icmp eq i32 %flag, i32 1
  br i1 %117, bb %then118, bb %if.exit119
then118:  pred(entry104)
  921267 = si2f i32 1 to float
  931268 = fdiv float %921267, float %a
  931274 = fdiv float %921267, float %115
  124 = si2f i32 4 to float
  125 = fmul float %124, float %931274
  126 = fadd float %931268, float %125
  931280 = fdiv float %921267, float %b
  129 = fadd float %126, float %931280
  133 = fmul float %129, float %112
  134 = si2f i32 6 to float
  135 = fdiv float %133, float %134
  ret float %135
if.exit119:  pred(entry104)
  137 = icmp eq i32 %flag, i32 2
  br i1 %137, bb %then138, bb %if.exit139
then138:  pred(if.exit119)
  98943 = fmul float %a, float %a
  99944 = si2f i32 1 to float
  100945 = fsub float %99944, float %98943
  101946 = call float my_sqrt(float %100945)
  103947 = fdiv float %99944, float %101946
  98952 = fmul float %115, float %115
  100954 = fsub float %99944, float %98952
  101955 = call float my_sqrt(float %100954)
  103956 = fdiv float %99944, float %101955
  144 = si2f i32 4 to float
  145 = fmul float %144, float %103956
  146 = fadd float %103947, float %145
  98961 = fmul float %b, float %b
  100963 = fsub float %99944, float %98961
  101964 = call float my_sqrt(float %100963)
  103965 = fdiv float %99944, float %101964
  149 = fadd float %146, float %103965
  153 = fmul float %149, float %112
  154 = si2f i32 6 to float
  155 = fdiv float %153, float %154
  ret float %155
if.exit139:  pred(if.exit119)
  156 = si2f i32 0 to float
  ret float %156
}

pure float F2(float x) {
entry94:  pred()
  98 = fmul float %x, float %x
  99 = si2f i32 1 to float
  100 = fsub float %99, float %98
  101 = call float my_sqrt(float %100)
  103 = fdiv float %99, float %101
  ret float %103
}

pure float my_sqrt(float x) {
entry46:  pred()
  49 = si2f i32 100 to float
  50 = fcmp ogt float %x, float %49
  br i1 %50, bb %then51, bb %if.exit52
then51:  pred(entry46)
  55 = fdiv float %x, float %49
  56 = call float my_sqrt(float %55)
  57 = fmul float 10.000000, float %56
  ret float %57
if.exit52:  pred(entry46)
  60 = si2f i32 8 to float
  61 = fdiv float %x, float %60
  62 = fadd float %61, float 0.500000
  64 = si2f i32 2 to float
  65 = fmul float %64, float %x
  67 = si2f i32 4 to float
  68 = fadd float %67, float %x
  69 = fdiv float %65, float %68
  70 = fadd float %62, float %69
  br bb %while.body73
while.body73:  pred(while.body73, if.exit52)
  t.phi1506 = phi [bb %while.body73, float %84, bb %if.exit52, float %70]
  c.phi1505 = phi [bb %while.body73, i32 %87, bb %if.exit52, i32 10]
  81 = fdiv float %x, float %t.phi1506
  82 = fadd float %t.phi1506, float %81
  84 = fdiv float %82, float %64
  87 = sub i32 %c.phi1505, i32 1
  76 = icmp ne i32 %87, i32 0
  br i1 %76, bb %while.body73, bb %while.exit74
while.exit74:  pred(while.body73)
  701504 = phi [bb %while.body73, float %84]
  ret float %701504
}

pure float F1(float x) {
entry89:  pred()
  92 = si2f i32 1 to float
  93 = fdiv float %92, float %x
  ret float %93
}

pure float my_pow(float a, i32 n) {
entry10:  pred()
  14 = icmp slt i32 %n, i32 0
  br i1 %14, bb %then15, bb %if.exit16
then15:  pred(entry10)
  19 = sub i32 0, i32 %n
  20 = call float my_pow(float %a, i32 %19)
  21 = si2f i32 1 to float
  22 = fdiv float %21, float %20
  ret float %22
if.exit16:  pred(entry10)
  281507 = icmp ne i32 %n, i32 0
  br i1 %281507, bb %while.body_preheader, bb %while.exit
while.body_preheader:  pred(if.exit16)
  br bb %while.body
while.body:  pred(if.exit33, while.body_preheader)
  a.stack.phi1511 = phi [bb %if.exit33, float %41, bb %while.body_preheader, float %a]
  n.stack.phi1510 = phi [bb %if.exit33, i32 %44, bb %while.body_preheader, i32 %n]
  res.phi4021509 = phi [bb %if.exit33, float %res.phi, bb %while.body_preheader, float 1.000000]
  30 = srem i32 %n.stack.phi1510, i32 2
  31 = icmp ne i32 %30, i32 0
  br i1 %31, bb %then32, bb %if.exit33
while.exit:  pred(if.exit33, if.exit16)
  1508 = phi [bb %if.exit33, float %res.phi, bb %if.exit16, float 1.000000]
  ret float %1508
then32:  pred(while.body)
  37 = fmul float %res.phi4021509, float %a.stack.phi1511
  br bb %if.exit33
if.exit33:  pred(while.body, then32)
  res.phi = phi [bb %while.body, float %res.phi4021509, bb %then32, float %37]
  41 = fmul float %a.stack.phi1511, float %a.stack.phi1511
  44 = sdiv i32 %n.stack.phi1510, i32 2
  28 = icmp ne i32 %44, i32 0
  br i1 %28, bb %while.body, bb %while.exit
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry323:  pred()
  325 = call i32 getint()
  3301512 = icmp ne i32 %325, i32 0
  br i1 %3301512, bb %while.body327_preheader, bb %while.exit328
while.body327_preheader:  pred(entry323)
  31494 = si2f i32 0 to float
  br bb %while.body327
while.body327:  pred(if.exit386, while.body327_preheader)
  num.phi1513 = phi [bb %if.exit386, i32 %396, bb %while.body327_preheader, i32 %325]
  332 = call float getfloat()
  334 = call float getfloat()
  41495 = fcmp ogt float %332, float %31494
  br i1 %41495, bb %my_fabs.then1497, bb %my_fabs.if.exit1499
while.body327.split:  pred(my_fabs.then1497, my_fabs.if.exit1499)
  336.ret = phi [bb %my_fabs.then1497, float %332, bb %my_fabs.if.exit1499, float %91500]
  call void putfloat(float %336.ret)
  call void putch(i32 32)
  340 = call float my_pow(float %332, i32 2)
  call void putfloat(float %340)
  call void putch(i32 32)
  344 = call float my_sqrt(float %332)
  call void putfloat(float %344)
  call void putch(i32 32)
  348 = call float my_exp(float %332)
  call void putfloat(float %348)
  call void putch(i32 32)
  br i1 %41495, bb %then354, bb %else
while.exit328:  pred(if.exit386, entry323)
  ret i32 0
then354:  pred(while.body327.split)
  304442 = si2f i32 1 to float
  112787 = fsub float %332, float %304442
  113788 = si2f i32 2 to float
  114789 = fdiv float %112787, float %113788
  115790 = fadd float %304442, float %114789
  931412 = fdiv float %304442, float %304442
  931418 = fdiv float %304442, float %115790
  124796 = si2f i32 4 to float
  125797 = fmul float %124796, float %931418
  126798 = fadd float %931412, float %125797
  931424 = fdiv float %304442, float %332
  129800 = fadd float %126798, float %931424
  133801 = fmul float %129800, float %112787
  134802 = si2f i32 6 to float
  135803 = fdiv float %133801, float %134802
  233491 = call float asr5(float %304442, float %332, float 0.000000, float %135803, i32 1)
  call void putfloat(float %233491)
  br bb %if.exit355
if.exit355:  pred(then354, else)
  call void putch(i32 32)
  br i1 %41495, bb %select.then, bb %select.else
else:  pred(while.body327.split)
  call void putch(i32 45)
  br bb %if.exit355
select.then:  pred(if.exit355)
  371 = fcmp ogt float %334, float %31494
  br bb %select.exit
select.else:  pred(if.exit355)
  br bb %select.exit
select.exit:  pred(select.then, select.else)
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %371]
  br i1 %select.phi, bb %then373, bb %else375
then373:  pred(select.exit)
  304454 = si2f i32 1 to float
  112865 = fsub float %334, float %304454
  113866 = si2f i32 2 to float
  114867 = fdiv float %112865, float %113866
  115868 = fadd float %304454, float %114867
  931448 = fdiv float %304454, float %304454
  931454 = fdiv float %304454, float %115868
  124874 = si2f i32 4 to float
  125875 = fmul float %124874, float %931454
  126876 = fadd float %931448, float %125875
  931460 = fdiv float %304454, float %334
  129878 = fadd float %126876, float %931460
  133879 = fmul float %129878, float %112865
  134880 = si2f i32 6 to float
  135881 = fdiv float %133879, float %134880
  233503 = call float asr5(float %304454, float %334, float 0.000000, float %135881, i32 1)
  112904 = fsub float %332, float %304454
  114906 = fdiv float %112904, float %113866
  115907 = fadd float %304454, float %114906
  931472 = fdiv float %304454, float %115907
  125914 = fmul float %124874, float %931472
  126915 = fadd float %931448, float %125914
  931478 = fdiv float %304454, float %332
  129917 = fadd float %126915, float %931478
  133918 = fmul float %129917, float %112904
  135920 = fdiv float %133918, float %134880
  233509 = call float asr5(float %304454, float %332, float 0.000000, float %135920, i32 1)
  314419 = fdiv float %233503, float %233509
  call void putfloat(float %314419)
  br bb %if.exit374
if.exit374:  pred(then373, else375)
  call void putch(i32 32)
  br i1 %41495, bb %then385, bb %else387
else375:  pred(select.exit)
  call void putch(i32 45)
  br bb %if.exit374
then385:  pred(if.exit374)
  304448 = si2f i32 1 to float
  112826 = fsub float %332, float %304448
  113827 = si2f i32 2 to float
  114828 = fdiv float %112826, float %113827
  115829 = fadd float %304448, float %114828
  931430 = fdiv float %304448, float %304448
  931436 = fdiv float %304448, float %115829
  124835 = si2f i32 4 to float
  125836 = fmul float %124835, float %931436
  126837 = fadd float %931430, float %125836
  931442 = fdiv float %304448, float %332
  129839 = fadd float %126837, float %931442
  133840 = fmul float %129839, float %112826
  134841 = si2f i32 6 to float
  135842 = fdiv float %133840, float %134841
  233497 = call float asr5(float %304448, float %332, float 0.000000, float %135842, i32 1)
  321411 = fmul float %334, float %233497
  322412 = call float my_exp(float %321411)
  call void putfloat(float %322412)
  br bb %if.exit386
if.exit386:  pred(then385, else387)
  call void putch(i32 10)
  396 = sub i32 %num.phi1513, i32 1
  330 = icmp ne i32 %396, i32 0
  br i1 %330, bb %while.body327, bb %while.exit328
else387:  pred(if.exit374)
  call void putch(i32 45)
  br bb %if.exit386
my_fabs.then1497:  pred(while.body327)
  br bb %while.body327.split
my_fabs.if.exit1499:  pred(while.body327)
  91500 = fneg float %332
  br bb %while.body327.split
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

pure float my_fabs(float x) {
entry:  pred()
  3 = si2f i32 0 to float
  4 = fcmp ogt float %x, float %3
  br i1 %4, bb %then, bb %if.exit
then:  pred(entry)
  ret float %x
if.exit:  pred(entry)
  9 = fneg float %x
  ret float %9
}


