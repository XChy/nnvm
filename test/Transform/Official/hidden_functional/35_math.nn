immutable global ptr e init with float 2.718282
float my_powf(float a, float x) {
entry309:
  314 = call float my_ln(float %a)
  315 = fmul float %x, float %314
  316 = call float my_exp(float %315)
  ret float %316
}

float my_log(float a, float N) {
entry301:
  305 = call float my_ln(float %N)
  307 = call float my_ln(float %a)
  308 = fdiv float %305, float %307
  ret float %308
}

float my_ln(float x) {
entry296:
  298 = si2f i32 1 to float
  300 = call float asr4(float %298, float %x, float 0.000000, i32 1)
  ret float %300
}

float my_exp(float x) {
entry267:
  270 = si2f i32 0 to float
  271 = fcmp olt float %x, float %270
  br i1 %271, bb %then272, bb %if.exit273
then272:
  275 = fneg float %x
  276 = call float my_exp(float %275)
  277 = si2f i32 1 to float
  278 = fdiv float %277, float %276
  ret float %278
if.exit273:
  281 = f2si float %x to i32
  284 = si2f i32 %281 to float
  285 = fsub float %x, float %284
  289 = call float my_pow(float 2.718282, i32 %281)
  292 = call float eee(float %285)
  295 = fmul float %289, float %292
  ret float %295
}

float eee(float x) {
entry229:
  232 = fcmp ogt float %x, float 0.001000
  br i1 %232, bb %then233, bb %if.exit234
then233:
  237 = si2f i32 2 to float
  238 = fdiv float %x, float %237
  239 = call float eee(float %238)
  242 = fmul float %239, float %239
  ret float %242
if.exit234:
  244 = si2f i32 1 to float
  245 = fadd float %244, float %x
  248 = fmul float %x, float %x
  249 = si2f i32 2 to float
  250 = fdiv float %248, float %249
  251 = fadd float %245, float %250
  253 = call float my_pow(float %x, i32 3)
  254 = si2f i32 6 to float
  255 = fdiv float %253, float %254
  256 = fadd float %251, float %255
  258 = call float my_pow(float %x, i32 4)
  259 = si2f i32 24 to float
  260 = fdiv float %258, float %259
  261 = fadd float %256, float %260
  263 = call float my_pow(float %x, i32 5)
  264 = si2f i32 120 to float
  265 = fdiv float %263, float %264
  266 = fadd float %261, float %265
  ret float %266
}

float asr4(float a, float b, float eps, i32 flag) {
entry215:
  226 = call float simpson(float %a, float %b, i32 %flag)
  228 = call float asr5(float %a, float %b, float %eps, float %226, i32 %flag)
  ret float %228
}

float asr5(float a, float b, float eps, float A, i32 flag) {
entry152:
  162 = fsub float %b, float %a
  163 = si2f i32 2 to float
  164 = fdiv float %162, float %163
  165 = fadd float %a, float %164
  170 = call float simpson(float %a, float %165, i32 %flag)
  175 = call float simpson(float %165, float %b, i32 %flag)
  178 = fadd float %170, float %175
  180 = fsub float %178, float %A
  181 = call float my_fabs(float %180)
  183 = si2f i32 15 to float
  184 = fmul float %183, float %eps
  185 = fcmp ole float %181, float %184
  br i1 %185, bb %then186, bb %if.exit187
then186:
  196 = fdiv float %180, float 15.000000
  197 = fadd float %178, float %196
  ret float %197
if.exit187:
  202 = fdiv float %eps, float %163
  205 = call float asr5(float %a, float %165, float %202, float %170, i32 %flag)
  213 = call float asr5(float %165, float %b, float %202, float %175, i32 %flag)
  214 = fadd float %205, float %213
  ret float %214
}

float simpson(float a, float b, i32 flag) {
entry99:
  107 = fsub float %b, float %a
  108 = si2f i32 2 to float
  109 = fdiv float %107, float %108
  110 = fadd float %a, float %109
  112 = icmp eq i32 %flag, i32 1
  br i1 %112, bb %then113, bb %if.exit114
then113:
  116 = call float F1(float %a)
  118 = call float F1(float %110)
  119 = si2f i32 4 to float
  120 = fmul float %119, float %118
  121 = fadd float %116, float %120
  123 = call float F1(float %b)
  124 = fadd float %121, float %123
  128 = fmul float %124, float %107
  129 = si2f i32 6 to float
  130 = fdiv float %128, float %129
  ret float %130
if.exit114:
  132 = icmp eq i32 %flag, i32 2
  br i1 %132, bb %then133, bb %if.exit134
then133:
  136 = call float F2(float %a)
  138 = call float F2(float %110)
  139 = si2f i32 4 to float
  140 = fmul float %139, float %138
  141 = fadd float %136, float %140
  143 = call float F2(float %b)
  144 = fadd float %141, float %143
  148 = fmul float %144, float %107
  149 = si2f i32 6 to float
  150 = fdiv float %148, float %149
  ret float %150
if.exit134:
  151 = si2f i32 0 to float
  ret float %151
}

float F2(float x) {
entry89:
  93 = fmul float %x, float %x
  94 = si2f i32 1 to float
  95 = fsub float %94, float %93
  96 = call float my_sqrt(float %95)
  98 = fdiv float %94, float %96
  ret float %98
}

float my_sqrt(float x) {
entry43:
  46 = si2f i32 100 to float
  47 = fcmp ogt float %x, float %46
  br i1 %47, bb %then48, bb %if.exit49
then48:
  52 = fdiv float %x, float %46
  53 = call float my_sqrt(float %52)
  54 = fmul float 10.000000, float %53
  ret float %54
if.exit49:
  57 = si2f i32 8 to float
  58 = fdiv float %x, float %57
  59 = fadd float %58, float 0.500000
  61 = si2f i32 2 to float
  62 = fmul float %61, float %x
  64 = si2f i32 4 to float
  65 = fadd float %64, float %x
  66 = fdiv float %62, float %65
  67 = fadd float %59, float %66
  br bb %while.cond69
while.cond69:
  c.phi = phi [bb %if.exit49, i32 10, bb %while.body70, i32 %82]
  t.phi = phi [bb %if.exit49, float %67, bb %while.body70, float %80]
  73 = icmp ne i32 %c.phi, i32 0
  br i1 %73, bb %while.body70, bb %while.exit71
while.body70:
  77 = fdiv float %x, float %t.phi
  78 = fadd float %t.phi, float %77
  80 = fdiv float %78, float %61
  82 = sub i32 %c.phi, i32 1
  br bb %while.cond69
while.exit71:
  ret float %t.phi
}

float F1(float x) {
entry84:
  87 = si2f i32 1 to float
  88 = fdiv float %87, float %x
  ret float %88
}

float my_pow(float a, i32 n) {
entry10:
  14 = icmp slt i32 %n, i32 0
  br i1 %14, bb %then15, bb %if.exit16
then15:
  19 = sub i32 0, i32 %n
  20 = call float my_pow(float %a, i32 %19)
  21 = si2f i32 1 to float
  22 = fdiv float %21, float %20
  ret float %22
if.exit16:
  br bb %while.cond
while.cond:
  res.phi395 = phi [bb %if.exit16, float 1.000000, bb %if.exit33, float %res.phi]
  n.stack.phi = phi [bb %if.exit16, i32 %n, bb %if.exit33, i32 %41]
  a.stack.phi = phi [bb %if.exit16, float %a, bb %if.exit33, float %39]
  28 = icmp ne i32 %n.stack.phi, i32 0
  br i1 %28, bb %while.body, bb %while.exit
while.body:
  30 = srem i32 %n.stack.phi, i32 2
  31 = icmp ne i32 %30, i32 0
  br i1 %31, bb %then32, bb %if.exit33
while.exit:
  ret float %res.phi395
then32:
  36 = fmul float %res.phi395, float %a.stack.phi
  br bb %if.exit33
if.exit33:
  res.phi = phi [bb %while.body, float %res.phi395, bb %then32, float %36]
  39 = fmul float %a.stack.phi, float %a.stack.phi
  41 = sdiv i32 %n.stack.phi, i32 2
  br bb %while.cond
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry317:
  319 = call i32 getint()
  br bb %while.cond320
while.cond320:
  num.phi = phi [bb %entry317, i32 %319, bb %if.exit380, i32 %389]
  324 = icmp ne i32 %num.phi, i32 0
  br i1 %324, bb %while.body321, bb %while.exit322
while.body321:
  326 = call float getfloat()
  328 = call float getfloat()
  330 = call float my_fabs(float %326)
  call void putfloat(float %330)
  call void putch(i32 32)
  334 = call float my_pow(float %326, i32 2)
  call void putfloat(float %334)
  call void putch(i32 32)
  338 = call float my_sqrt(float %326)
  call void putfloat(float %338)
  call void putch(i32 32)
  342 = call float my_exp(float %326)
  call void putfloat(float %342)
  call void putch(i32 32)
  346 = si2f i32 0 to float
  347 = fcmp ogt float %326, float %346
  br i1 %347, bb %then348, bb %else
while.exit322:
  ret i32 0
then348:
  352 = call float my_ln(float %326)
  call void putfloat(float %352)
  br bb %if.exit349
if.exit349:
  call void putch(i32 32)
  br i1 %347, bb %select.then, bb %select.else
else:
  call void putch(i32 45)
  br bb %if.exit349
select.then:
  365 = fcmp ogt float %328, float %346
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %365]
  br i1 %select.phi, bb %then367, bb %else369
then367:
  372 = call float my_log(float %326, float %328)
  call void putfloat(float %372)
  br bb %if.exit368
if.exit368:
  call void putch(i32 32)
  br i1 %347, bb %then379, bb %else381
else369:
  call void putch(i32 45)
  br bb %if.exit368
then379:
  384 = call float my_powf(float %326, float %328)
  call void putfloat(float %384)
  br bb %if.exit380
if.exit380:
  call void putch(i32 10)
  389 = sub i32 %num.phi, i32 1
  br bb %while.cond320
else381:
  call void putch(i32 45)
  br bb %if.exit380
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

float my_fabs(float x) {
entry:
  3 = si2f i32 0 to float
  4 = fcmp ogt float %x, float %3
  br i1 %4, bb %then, bb %if.exit
then:
  ret float %x
if.exit:
  9 = fneg float %x
  ret float %9
}


