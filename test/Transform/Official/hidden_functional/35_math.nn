pure internal float my_exp(float x) {
entry288:  pred()
  291 = si2f i32 0 to float
  292 = fcmp olt float %x, float %291
  br i1 %292, bb %then293, bb %if.exit294
then293:  pred(entry288)
  296 = fneg float %x
  297 = call float my_exp(float %296)
  298 = si2f i32 1 to float
  299 = fdiv float %298, float %297
  ret float %299
if.exit294:  pred(entry288)
  303 = f2si float %x to i32
  307 = si2f i32 %303 to float
  308 = fsub float %x, float %307
  312 = call float my_pow(float 2.718282, i32 %303)
  315 = call float eee(float %308)
  318 = fmul float %312, float %315
  ret float %318
}

pure internal float eee(float x) {
entry248:  pred()
  251 = fcmp ogt float %x, float 0.001000
  256 = si2f i32 2 to float
  br i1 %251, bb %then252, bb %if.exit253
then252:  pred(entry248)
  257 = fdiv float %x, float %256
  258 = call float eee(float %257)
  261 = fmul float %258, float %258
  ret float %261
if.exit253:  pred(entry248)
  264 = si2f i32 1 to float
  265 = fadd float %264, float %x
  268 = fmul float %x, float %x
  270 = fdiv float %268, float %256
  271 = fadd float %265, float %270
  273 = call float my_pow(float %x, i32 3)
  274 = si2f i32 6 to float
  275 = fdiv float %273, float %274
  276 = fadd float %271, float %275
  278 = call float my_pow(float %x, i32 4)
  279 = si2f i32 24 to float
  280 = fdiv float %278, float %279
  281 = fadd float %276, float %280
  283 = call float my_pow(float %x, i32 5)
  284 = si2f i32 120 to float
  285 = fdiv float %283, float %284
  286 = fadd float %281, float %285
  ret float %286
}

pure internal float asr5(float a, float b, float eps, float A, i32 flag) {
entry168:  pred()
  178 = fsub float %b, float %a
  179 = si2f i32 2 to float
  180 = fdiv float %178, float %179
  181 = fadd float %a, float %180
  120557 = fsub float %181, float %a
  122559 = fdiv float %120557, float %179
  123560 = fadd float %a, float %122559
  125561 = icmp eq i32 %flag, i32 1
  981328 = si2f i32 1 to float
  132566 = si2f i32 4 to float
  142572 = si2f i32 6 to float
  146576 = icmp eq i32 %flag, i32 2
  1051031 = fmul float %181, float %181
  166591 = si2f i32 0 to float
  br i1 %125561, bb %simpson.then126, bb %simpson.if.exit127
entry168.split:  pred(simpson.then126, simpson.then147, simpson.if.exit127)
  186.ret = phi [bb %simpson.then126, float %143573, bb %simpson.then147, float %164588, bb %simpson.if.exit127, float %166591]
  120596 = fsub float %b, float %181
  122598 = fdiv float %120596, float %179
  123599 = fadd float %181, float %122598
  br i1 %125561, bb %simpson.then126602, bb %simpson.if.exit127614
entry168.split.split:  pred(simpson.then126602, simpson.then147617, simpson.if.exit127614)
  191.ret = phi [bb %simpson.then126602, float %143612, bb %simpson.then147617, float %164627, bb %simpson.if.exit127614, float %166591]
  194 = fadd float %186.ret, float %191.ret
  196 = fsub float %194, float %A
  41527 = fcmp ogt float %196, float %166591
  101532 = fneg float %196
  br i1 %41527, bb %197.ret.which.true, bb %entry168.split.split.split1588
entry168.split.split.split1588:  pred(entry168.split.split, 197.ret.which.true)
  1590 = phi [bb %197.ret.which.true, float %196, bb %entry168.split.split, float %101532]
  199 = si2f i32 15 to float
  200 = fmul float %199, float %eps
  201 = fcmp ole float %1590, float %200
  br i1 %201, bb %then202, bb %if.exit203
then202:  pred(entry168.split.split.split1588)
  212 = fdiv float %196, float 15.000000
  213 = fadd float %194, float %212
  ret float %213
if.exit203:  pred(entry168.split.split.split1588)
  219 = fdiv float %eps, float %179
  222 = call float asr5(float %a, float %181, float %219, float %186.ret, i32 %flag)
  230 = call float asr5(float %181, float %b, float %219, float %191.ret, i32 %flag)
  231 = fadd float %222, float %230
  ret float %231
simpson.then126:  pred(entry168)
  991329 = fdiv float %981328, float %a
  991335 = fdiv float %981328, float %123560
  133567 = fmul float %132566, float %991335
  134568 = fadd float %991329, float %133567
  991341 = fdiv float %981328, float %181
  137570 = fadd float %134568, float %991341
  141571 = fmul float %137570, float %120557
  143573 = fdiv float %141571, float %142572
  br bb %entry168.split
simpson.if.exit127:  pred(entry168)
  br i1 %146576, bb %simpson.then147, bb %entry168.split
simpson.then147:  pred(simpson.if.exit127)
  1051013 = fmul float %a, float %a
  1071015 = fsub float %981328, float %1051013
  1081016 = call float my_sqrt(float %1071015)
  1101017 = fdiv float %981328, float %1081016
  1051022 = fmul float %123560, float %123560
  1071024 = fsub float %981328, float %1051022
  1081025 = call float my_sqrt(float %1071024)
  1101026 = fdiv float %981328, float %1081025
  154582 = fmul float %132566, float %1101026
  155583 = fadd float %1101017, float %154582
  1071033 = fsub float %981328, float %1051031
  1081034 = call float my_sqrt(float %1071033)
  1101035 = fdiv float %981328, float %1081034
  158585 = fadd float %155583, float %1101035
  162586 = fmul float %158585, float %120557
  164588 = fdiv float %162586, float %142572
  br bb %entry168.split
simpson.then126602:  pred(entry168.split)
  991347 = fdiv float %981328, float %181
  991353 = fdiv float %981328, float %123599
  133606 = fmul float %132566, float %991353
  134607 = fadd float %991347, float %133606
  991359 = fdiv float %981328, float %b
  137609 = fadd float %134607, float %991359
  141610 = fmul float %137609, float %120596
  143612 = fdiv float %141610, float %142572
  br bb %entry168.split.split
simpson.if.exit127614:  pred(entry168.split)
  br i1 %146576, bb %simpson.then147617, bb %entry168.split.split
simpson.then147617:  pred(simpson.if.exit127614)
  1071042 = fsub float %981328, float %1051031
  1081043 = call float my_sqrt(float %1071042)
  1101044 = fdiv float %981328, float %1081043
  1051049 = fmul float %123599, float %123599
  1071051 = fsub float %981328, float %1051049
  1081052 = call float my_sqrt(float %1071051)
  1101053 = fdiv float %981328, float %1081052
  154621 = fmul float %132566, float %1101053
  155622 = fadd float %1101044, float %154621
  1051058 = fmul float %b, float %b
  1071060 = fsub float %981328, float %1051058
  1081061 = call float my_sqrt(float %1071060)
  1101062 = fdiv float %981328, float %1081061
  158624 = fadd float %155622, float %1101062
  162625 = fmul float %158624, float %120596
  164627 = fdiv float %162625, float %142572
  br bb %entry168.split.split
197.ret.which.true:  pred(entry168.split.split)
  br bb %entry168.split.split.split1588
}

pure internal float my_sqrt(float x) {
entry50:  pred()
  53 = si2f i32 100 to float
  54 = fcmp ogt float %x, float %53
  br i1 %54, bb %then55, bb %if.exit56
then55:  pred(entry50)
  59 = fdiv float %x, float %53
  60 = call float my_sqrt(float %59)
  61 = fmul float %60, float 10.000000
  ret float %61
if.exit56:  pred(entry50)
  65 = si2f i32 8 to float
  66 = fdiv float %x, float %65
  67 = fadd float %66, float 0.500000
  69 = si2f i32 2 to float
  70 = fmul float %69, float %x
  72 = si2f i32 4 to float
  73 = fadd float %72, float %x
  74 = fdiv float %70, float %73
  75 = fadd float %67, float %74
  br bb %while.body78
while.body78:  pred(while.body78, if.exit56)
  t.phi1555 = phi [bb %while.body78, float %89, bb %if.exit56, float %75]
  c.phi1554 = phi [bb %while.body78, i32 %444, bb %if.exit56, i32 10]
  86 = fdiv float %x, float %t.phi1555
  87 = fadd float %t.phi1555, float %86
  89 = fdiv float %87, float %69
  444 = add i32 %c.phi1554, i32 -1
  81 = icmp ne i32 %444, i32 0
  br i1 %81, bb %while.body78, bb %while.exit79
while.exit79:  pred(while.body78)
  ret float %89
}

pure internal float my_pow(float a, i32 n) {
entry12:  pred()
  16 = icmp slt i32 %n, i32 0
  br i1 %16, bb %then17, bb %while.cond_preheader
then17:  pred(entry12)
  21 = sub i32 0, i32 %n
  22 = call float my_pow(float %a, i32 %21)
  23 = si2f i32 1 to float
  24 = fdiv float %23, float %22
  ret float %24
while.cond_preheader:  pred(entry12)
  .pinned = pin float 1.000000
  311556 = icmp ne i32 %n, i32 0
  br i1 %311556, bb %while.body, bb %while.exit
while.body:  pred(while.body.split, while.cond_preheader)
  a.stack.phi1560 = phi [bb %while.body.split, float %44, bb %while.cond_preheader, float %a]
  n.stack.phi1559 = phi [bb %while.body.split, i32 %47, bb %while.cond_preheader, i32 %n]
  res.phi4361558 = phi [bb %while.body.split, float %1593, bb %while.cond_preheader, float %.pinned]
  445 = and i32 %n.stack.phi1559, i32 1
  446 = icmp ne i32 %445, i32 0
  40 = fmul float %res.phi4361558, float %a.stack.phi1560
  br i1 %446, bb %res.phi.which.true, bb %while.body.split
while.body.split:  pred(while.body, res.phi.which.true)
  1593 = phi [bb %res.phi.which.true, float %40, bb %while.body, float %res.phi4361558]
  44 = fmul float %a.stack.phi1560, float %a.stack.phi1560
  47 = sdiv i32 %n.stack.phi1559, i32 2
  31 = icmp ne i32 %47, i32 0
  br i1 %31, bb %while.body, bb %while.exit
while.exit:  pred(while.body.split, while.cond_preheader)
  res.phi436_ph_val1557 = phi [bb %while.body.split, float %1593, bb %while.cond_preheader, float %.pinned]
  ret float %res.phi436_ph_val1557
res.phi.which.true:  pred(while.body)
  br bb %while.body.split
}

external i32 getint()

i32 main() {
entry344:  pred()
  346 = call i32 getint()
  3511561 = icmp ne i32 %346, i32 0
  br i1 %3511561, bb %while.body348_preheader, bb %while.exit349
while.body348_preheader:  pred(entry344)
  .pinned1587 = pin float 0.000000
  31537 = si2f i32 0 to float
  322485 = si2f i32 1 to float
  121831 = si2f i32 2 to float
  132839 = si2f i32 4 to float
  142845 = si2f i32 6 to float
  991455 = fdiv float %322485, float %322485
  br bb %while.body348
while.body348:  pred(if.exit407, while.body348_preheader)
  num.phi1562 = phi [bb %if.exit407, i32 %447, bb %while.body348_preheader, i32 %346]
  353 = call float getfloat()
  355 = call float getfloat()
  41538 = fcmp ogt float %353, float %31537
  101543 = fneg float %353
  br i1 %41538, bb %357.ret.which.true, bb %while.body348.split1594
while.body348.split1594:  pred(while.body348, 357.ret.which.true)
  1596 = phi [bb %357.ret.which.true, float %353, bb %while.body348, float %101543]
  call void putfloat(float %1596)
  call void putch(i32 32)
  361 = call float my_pow(float %353, i32 2)
  call void putfloat(float %361)
  call void putch(i32 32)
  365 = call float my_sqrt(float %353)
  call void putfloat(float %365)
  call void putch(i32 32)
  369 = call float my_exp(float %353)
  call void putfloat(float %369)
  call void putch(i32 32)
  br i1 %41538, bb %then375, bb %else
while.exit349:  pred(if.exit407, entry344)
  ret i32 0
then375:  pred(while.body348.split1594)
  120830 = fsub float %353, float %322485
  122832 = fdiv float %120830, float %121831
  123833 = fadd float %322485, float %122832
  991461 = fdiv float %322485, float %123833
  133840 = fmul float %132839, float %991461
  134841 = fadd float %991455, float %133840
  991467 = fdiv float %322485, float %353
  137843 = fadd float %134841, float %991467
  141844 = fmul float %137843, float %120830
  143846 = fdiv float %141844, float %142845
  246534 = call float asr5(float %322485, float %353, float %.pinned1587, float %143846, i32 1)
  call void putfloat(float %246534)
  br bb %if.exit376
if.exit376:  pred(then375, else)
  call void putch(i32 32)
  392 = fcmp ogt float %355, float %31537
  450 = and i1 %41538, i1 %392
  br i1 %450, bb %then394, bb %else396
else:  pred(while.body348.split1594)
  call void putch(i32 45)
  br bb %if.exit376
then394:  pred(if.exit376)
  120908 = fsub float %355, float %322485
  122910 = fdiv float %120908, float %121831
  123911 = fadd float %322485, float %122910
  991497 = fdiv float %322485, float %123911
  133918 = fmul float %132839, float %991497
  134919 = fadd float %991455, float %133918
  991503 = fdiv float %322485, float %355
  137921 = fadd float %134919, float %991503
  141922 = fmul float %137921, float %120908
  143924 = fdiv float %141922, float %142845
  246546 = call float asr5(float %322485, float %355, float %.pinned1587, float %143924, i32 1)
  120947 = fsub float %353, float %322485
  122949 = fdiv float %120947, float %121831
  123950 = fadd float %322485, float %122949
  991515 = fdiv float %322485, float %123950
  133957 = fmul float %132839, float %991515
  134958 = fadd float %991455, float %133957
  991521 = fdiv float %322485, float %353
  137960 = fadd float %134958, float %991521
  141961 = fmul float %137960, float %120947
  143963 = fdiv float %141961, float %142845
  246552 = call float asr5(float %322485, float %353, float %.pinned1587, float %143963, i32 1)
  333462 = fdiv float %246546, float %246552
  call void putfloat(float %333462)
  br bb %if.exit395
if.exit395:  pred(then394, else396)
  call void putch(i32 32)
  br i1 %41538, bb %then406, bb %else408
else396:  pred(if.exit376)
  call void putch(i32 45)
  br bb %if.exit395
then406:  pred(if.exit395)
  120869 = fsub float %353, float %322485
  122871 = fdiv float %120869, float %121831
  123872 = fadd float %322485, float %122871
  991479 = fdiv float %322485, float %123872
  133879 = fmul float %132839, float %991479
  134880 = fadd float %991455, float %133879
  991485 = fdiv float %322485, float %353
  137882 = fadd float %134880, float %991485
  141883 = fmul float %137882, float %120869
  143885 = fdiv float %141883, float %142845
  246540 = call float asr5(float %322485, float %353, float %.pinned1587, float %143885, i32 1)
  341454 = fmul float %355, float %246540
  342455 = call float my_exp(float %341454)
  call void putfloat(float %342455)
  br bb %if.exit407
if.exit407:  pred(then406, else408)
  call void putch(i32 10)
  447 = add i32 %num.phi1562, i32 -1
  351 = icmp ne i32 %447, i32 0
  br i1 %351, bb %while.body348, bb %while.exit349
else408:  pred(if.exit395)
  call void putch(i32 45)
  br bb %if.exit407
357.ret.which.true:  pred(while.body348)
  br bb %while.body348.split1594
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )


