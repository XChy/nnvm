immutable global ptr LF init with i32 10
immutable global ptr space init with i32 32
immutable global ptr V init with i32 4
external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

i32 graphColoring(ptr graph, i32 m, i32 i, ptr color) {
entry78:
  83 = icmp eq i32 %i, i32 4
  br i1 %83, bb %then84, bb %if.exit85
then84:
  86 = call i32 isSafe(ptr %graph, ptr %color)
  87 = icmp ne i32 %86, i32 0
  br i1 %87, bb %then88, bb %if.exit89
if.exit85:
  br bb %while.cond92
then88:
  call void printSolution(ptr %color)
  ret i32 1
if.exit89:
  ret i32 0
while.cond92:
  j91.phi = phi [bb %if.exit85, i32 1, bb %if.exit109, i32 %114]
  97 = icmp sle i32 %j91.phi, i32 %m
  br i1 %97, bb %while.body93, bb %while.exit94
while.body93:
  100 = mul i32 %i, i32 4
  101 = ptradd ptr %color, i32 %100
  store i32 %j91.phi to ptr %101
  105 = add i32 %i, i32 1
  106 = call i32 graphColoring(ptr %graph, i32 %m, i32 %105, ptr %color)
  107 = icmp ne i32 %106, i32 0
  br i1 %107, bb %then108, bb %if.exit109
while.exit94:
  ret i32 0
then108:
  ret i32 1
if.exit109:
  store i32 0 to ptr %101
  114 = add i32 %j91.phi, i32 1
  br bb %while.cond92
}

external i32 getfarray(ptr )

i32 main() {
entry115:
  %color = stack 16
  %graph = stack 64
  arr.index = ptradd ptr %graph, i32 0
  store i32 0 to ptr %arr.index
  arr.index118 = ptradd ptr %graph, i32 4
  store i32 1 to ptr %arr.index118
  arr.index119 = ptradd ptr %graph, i32 8
  store i32 1 to ptr %arr.index119
  arr.index120 = ptradd ptr %graph, i32 12
  store i32 1 to ptr %arr.index120
  arr.index121 = ptradd ptr %graph, i32 16
  store i32 1 to ptr %arr.index121
  arr.index122 = ptradd ptr %graph, i32 20
  store i32 0 to ptr %arr.index122
  arr.index123 = ptradd ptr %graph, i32 24
  store i32 1 to ptr %arr.index123
  arr.index124 = ptradd ptr %graph, i32 28
  store i32 0 to ptr %arr.index124
  arr.index125 = ptradd ptr %graph, i32 32
  store i32 1 to ptr %arr.index125
  arr.index126 = ptradd ptr %graph, i32 36
  store i32 1 to ptr %arr.index126
  arr.index127 = ptradd ptr %graph, i32 40
  store i32 0 to ptr %arr.index127
  arr.index128 = ptradd ptr %graph, i32 44
  store i32 1 to ptr %arr.index128
  arr.index129 = ptradd ptr %graph, i32 48
  store i32 1 to ptr %arr.index129
  arr.index130 = ptradd ptr %graph, i32 52
  store i32 0 to ptr %arr.index130
  arr.index131 = ptradd ptr %graph, i32 56
  store i32 1 to ptr %arr.index131
  arr.index132 = ptradd ptr %graph, i32 60
  store i32 0 to ptr %arr.index132
  br bb %while.cond136
while.cond136:
  i135.phi = phi [bb %entry115, i32 0, bb %while.body137, i32 %147]
  141 = icmp slt i32 %i135.phi, i32 4
  br i1 %141, bb %while.body137, bb %while.exit138
while.body137:
  144 = mul i32 %i135.phi, i32 4
  145 = ptradd ptr %color, i32 %144
  store i32 0 to ptr %145
  147 = add i32 %i135.phi, i32 1
  br bb %while.cond136
while.exit138:
  149 = call i32 graphColoring(ptr %graph, i32 3, i32 0, ptr %color)
  150 = icmp ne i32 %149, i32 0
  151 =  i1 %150, i1 1
  152 = zext i1 %151 to i32
  153 = icmp ne i32 %152, i32 0
  br i1 %153, bb %then154, bb %if.exit155
then154:
  call void printMessage()
  br bb %if.exit155
if.exit155:
  ret i32 0
}

i32 isSafe(ptr graph, ptr color) {
entry31:
  br bb %while.cond33
while.cond33:
  select.phi164 = phi [bb %entry31, i1 ub, bb %while.exit45, i1 %select.phi163]
  i32.phi = phi [bb %entry31, i32 0, bb %while.exit45, i32 %42]
  38 = icmp slt i32 %i32.phi, i32 4
  br i1 %38, bb %while.body34, bb %while.exit35
while.body34:
  42 = add i32 %i32.phi, i32 1
  br bb %while.cond43
while.exit35:
  ret i32 1
while.cond43:
  select.phi163 = phi [bb %while.body34, i1 %select.phi164, bb %if.exit, i1 %select.phi]
  j.phi = phi [bb %while.body34, i32 %42, bb %if.exit, i32 %75]
  48 = icmp slt i32 %j.phi, i32 4
  br i1 %48, bb %while.body44, bb %while.exit45
while.body44:
  51 = mul i32 %i32.phi, i32 16
  52 = ptradd ptr %graph, i32 %51
  54 = mul i32 %j.phi, i32 4
  55 = ptradd ptr %52, i32 %54
  55.load = load i32 from ptr %55
  57 = icmp ne i32 %55.load, i32 0
  br i1 %57, bb %select.then, bb %select.else
while.exit45:
  br bb %while.cond33
select.then:
  64 = ptradd ptr %color, i32 %54
  64.load = load i32 from ptr %64
  67 = mul i32 %i32.phi, i32 4
  68 = ptradd ptr %color, i32 %67
  68.load = load i32 from ptr %68
  70 = icmp eq i32 %64.load, i32 %68.load
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %70]
  br i1 %select.phi, bb %then, bb %if.exit
then:
  ret i32 0
if.exit:
  75 = add i32 %j.phi, i32 1
  br bb %while.cond43
}

void printMessage() {
entry20:
  call void putch(i32 78)
  call void putch(i32 111)
  call void putch(i32 116)
  call void putch(i32 32)
  call void putch(i32 101)
  call void putch(i32 120)
  call void putch(i32 105)
  call void putch(i32 115)
  call void putch(i32 116)
  ret 
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void _sysy_stoptime(i32 )

void printSolution(ptr color) {
entry:
  br bb %while.cond
while.cond:
  i.phi = phi [bb %entry, i32 0, bb %while.body, i32 %17]
  7 = icmp slt i32 %i.phi, i32 4
  br i1 %7, bb %while.body, bb %while.exit
while.body:
  10 = mul i32 %i.phi, i32 4
  11 = ptradd ptr %color, i32 %10
  11.load = load i32 from ptr %11
  call void putint(i32 %11.load)
  call void putch(i32 32)
  17 = add i32 %i.phi, i32 1
  br bb %while.cond
while.exit:
  call void putch(i32 10)
  ret 
}

external void putfarray(i32 , ptr )


