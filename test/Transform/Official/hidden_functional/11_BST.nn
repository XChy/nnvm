global ptr now init with i32 0
global ptr left_child init with 10000 x i32 zeros
global ptr value init with 10000 x i32 zeros
global ptr right_child init with 10000 x i32 zeros
immutable global ptr LF init with i32 10
immutable global ptr maxNode init with i32 10000
immutable global ptr space init with i32 32
i32 insert(i32 root, i32 x) {
entry84:  pred()
  89 = icmp eq i32 %root, i32 -1
  br i1 %89, bb %then90, bb %else92
then90:  pred(entry84)
  now.load379 = load i32 from ptr @now
  344380 = shl i32 %now.load379, i32 2
  70381 = ptradd ptr @value, i32 %344380
  store i32 %x to ptr %70381
  74385 = ptradd ptr @left_child, i32 %344380
  store i32 -1 to ptr %74385
  78389 = ptradd ptr @right_child, i32 %344380
  store i32 -1 to ptr %78389
  81392 = add i32 %now.load379, i32 1
  store i32 %81392 to ptr @now
  ret i32 %now.load379
else92:  pred(entry84)
  339 = shl i32 %root, i32 2
  98 = ptradd ptr @value, i32 %339
  98.load = load i32 from ptr %98
  100 = icmp sgt i32 %x, i32 %98.load
  br i1 %100, bb %then101, bb %else103
then101:  pred(else92)
  106 = ptradd ptr @right_child, i32 %339
  109.load = load i32 from ptr %106
  112 = call i32 insert(i32 %109.load, i32 %x)
  store i32 %112 to ptr %106
  br bb %if.exit102
if.exit102:  pred(then101, else103)
  ret i32 %root
else103:  pred(else92)
  115 = ptradd ptr @left_child, i32 %339
  118.load = load i32 from ptr %115
  121 = call i32 insert(i32 %118.load, i32 %x)
  store i32 %121 to ptr %115
  br bb %if.exit102
}

i32 new_node(i32 x) {
entry66:  pred()
  now.load = load i32 from ptr @now
  344 = shl i32 %now.load, i32 2
  70 = ptradd ptr @value, i32 %344
  store i32 %x to ptr %70
  74 = ptradd ptr @left_child, i32 %344
  store i32 -1 to ptr %74
  78 = ptradd ptr @right_child, i32 %344
  store i32 -1 to ptr %78
  81 = add i32 %now.load, i32 1
  store i32 %81 to ptr @now
  ret i32 %now.load
}

i32 delete(i32 root, i32 x) {
entry123:  pred()
  128 = icmp eq i32 %root, i32 -1
  br i1 %128, bb %then129, bb %if.exit130
then129:  pred(entry123)
  ret i32 -1
if.exit130:  pred(entry123)
  349 = shl i32 %root, i32 2
  135 = ptradd ptr @value, i32 %349
  135.load = load i32 from ptr %135
  137 = icmp sgt i32 %x, i32 %135.load
  br i1 %137, bb %then138, bb %else140
then138:  pred(if.exit130)
  143 = ptradd ptr @right_child, i32 %349
  146.load = load i32 from ptr %143
  149 = call i32 delete(i32 %146.load, i32 %x)
  store i32 %149 to ptr %143
  br bb %if.exit139
if.exit139:  pred(then138, then156, else209)
  ret i32 %root
else140:  pred(if.exit130)
  155 = icmp slt i32 %x, i32 %135.load
  br i1 %155, bb %then156, bb %else158
then156:  pred(else140)
  161 = ptradd ptr @left_child, i32 %349
  164.load = load i32 from ptr %161
  167 = call i32 delete(i32 %164.load, i32 %x)
  store i32 %167 to ptr %161
  br bb %if.exit139
else158:  pred(else140)
  170 = ptradd ptr @left_child, i32 %349
  170.load = load i32 from ptr %170
  173 = icmp eq i32 %170.load, i32 -1
  br i1 %173, bb %select.then174, bb %select.else175
select.then174:  pred(else158)
  180 = ptradd ptr @right_child, i32 %349
  180.load = load i32 from ptr %180
  183 = icmp eq i32 %180.load, i32 -1
  br bb %select.exit176
select.else175:  pred(else158)
  br bb %select.exit176
select.exit176:  pred(select.then174, select.else175)
  select177.phi = phi [bb %select.else175, i1 0, bb %select.then174, i1 %183]
  br i1 %select177.phi, bb %then185, bb %else187
then185:  pred(select.exit176)
  ret i32 -1
else187:  pred(select.exit176)
  br i1 %173, bb %select.then195, bb %select.else196
select.then195:  pred(else187)
  br bb %select.exit197
select.else196:  pred(else187)
  201 = ptradd ptr @right_child, i32 %349
  201.load = load i32 from ptr %201
  204 = icmp eq i32 %201.load, i32 -1
  br bb %select.exit197
select.exit197:  pred(select.then195, select.else196)
  select198.phi = phi [bb %select.else196, i1 %204, bb %select.then195, i1 -1]
  br i1 %select198.phi, bb %then207, bb %else209
then207:  pred(select.exit197)
  br i1 %173, bb %then216, bb %else218
else209:  pred(select.exit197)
  230 = ptradd ptr @right_child, i32 %349
  230.load = load i32 from ptr %230
  232 = call i32 find_minimum(i32 %230.load)
  362 = shl i32 %232, i32 2
  238 = ptradd ptr @value, i32 %362
  238.load = load i32 from ptr %238
  store i32 %238.load to ptr %135
  245.load = load i32 from ptr %230
  249.load = load i32 from ptr %238
  251 = call i32 delete(i32 %245.load, i32 %249.load)
  store i32 %251 to ptr %230
  br bb %if.exit139
then216:  pred(then207)
  221 = ptradd ptr @right_child, i32 %349
  221.load = load i32 from ptr %221
  ret i32 %221.load
else218:  pred(then207)
  ret i32 %170.load
}

i32 find_minimum(i32 root) {
entry43:  pred()
  47 = icmp eq i32 %root, i32 -1
  br i1 %47, bb %then48, bb %else50
then48:  pred(entry43)
  ret i32 -1
else50:  pred(entry43)
  368 = shl i32 %root, i32 2
  54 = ptradd ptr @left_child, i32 %368
  54.load = load i32 from ptr %54
  57 = icmp ne i32 %54.load, i32 -1
  br i1 %57, bb %then58, bb %if.exit59
then58:  pred(else50)
  62.load = load i32 from ptr %54
  64 = call i32 find_minimum(i32 %62.load)
  ret i32 %64
if.exit59:  pred(else50)
  ret i32 %root
}

external i32 getint()

external i32 getch()

i32 search(i32 root, i32 x) {
entry:  pred()
  5 = icmp eq i32 %root, i32 -1
  br i1 %5, bb %select.then, bb %select.else
select.then:  pred(entry)
  br bb %select.exit
select.else:  pred(entry)
  370 = shl i32 %root, i32 2
  12 = ptradd ptr @value, i32 %370
  12.load = load i32 from ptr %12
  15 = icmp eq i32 %12.load, i32 %x
  br bb %select.exit
select.exit:  pred(select.then, select.else)
  select.phi = phi [bb %select.else, i1 %15, bb %select.then, i1 -1]
  br i1 %select.phi, bb %then, bb %else
then:  pred(select.exit)
  ret i32 %root
else:  pred(select.exit)
  371 = shl i32 %root, i32 2
  25 = ptradd ptr @value, i32 %371
  25.load = load i32 from ptr %25
  27 = icmp sgt i32 %x, i32 %25.load
  br i1 %27, bb %then28, bb %else30
then28:  pred(else)
  33 = ptradd ptr @right_child, i32 %371
  33.load = load i32 from ptr %33
  36 = call i32 search(i32 %33.load, i32 %x)
  ret i32 %36
else30:  pred(else)
  39 = ptradd ptr @left_child, i32 %371
  39.load = load i32 from ptr %39
  42 = call i32 search(i32 %39.load, i32 %x)
  ret i32 %42
}

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry277:  pred()
  store i32 0 to ptr @now
  279 = call i32 getint()
  281 = icmp ne i32 %279, i32 0
  282 = xor i1 %281, i1 -1
  283 = zext i1 %282 to i32
  284 = icmp ne i32 %283, i32 0
  br i1 %284, bb %then285, bb %if.exit286
then285:  pred(entry277)
  ret i32 0
if.exit286:  pred(entry277)
  288 = call i32 getint()
  now.load398 = load i32 from ptr @now
  344399 = shl i32 %now.load398, i32 2
  70400 = ptradd ptr @value, i32 %344399
  store i32 %288 to ptr %70400
  74404 = ptradd ptr @left_child, i32 %344399
  store i32 -1 to ptr %74404
  78408 = ptradd ptr @right_child, i32 %344399
  store i32 -1 to ptr %78408
  81411 = add i32 %now.load398, i32 1
  store i32 %81411 to ptr @now
  296419 = icmp slt i32 1, i32 %279
  br i1 %296419, bb %while.body, bb %while.exit
while.cond:  pred(while.body)
  i.phi338 = phi [bb %while.body, i32 %302]
  296 = icmp slt i32 %i.phi338, i32 %279
  br i1 %296, bb %while.body, bb %while.exit
while.body:  pred(while.cond, if.exit286)
  i.phi338420 = phi [bb %if.exit286, i32 1, bb %while.cond, i32 %i.phi338]
  299 = call i32 getint()
  300 = call i32 insert(i32 %now.load398, i32 %299)
  302 = add i32 %i.phi338420, i32 1
  br bb %while.cond
while.exit:  pred(while.cond, if.exit286)
  call void inorder(i32 %now.load398)
  call void putch(i32 10)
  307 = call i32 getint()
  313415 = icmp slt i32 0, i32 %307
  br i1 %313415, bb %while.body309, bb %while.exit310
while.cond308:  pred(while.body309)
  i.phi = phi [bb %while.body309, i32 %319]
  root.phi = phi [bb %while.body309, i32 %317]
  313 = icmp slt i32 %i.phi, i32 %307
  br i1 %313, bb %while.body309, bb %while.exit310
while.body309:  pred(while.cond308, while.exit)
  root.phi418 = phi [bb %while.exit, i32 %now.load398, bb %while.cond308, i32 %root.phi]
  i.phi417 = phi [bb %while.exit, i32 0, bb %while.cond308, i32 %i.phi]
  316 = call i32 getint()
  317 = call i32 delete(i32 %root.phi418, i32 %316)
  319 = add i32 %i.phi417, i32 1
  br bb %while.cond308
while.exit310:  pred(while.cond308, while.exit)
  now.load398416 = phi [bb %while.cond308, i32 %root.phi, bb %while.exit, i32 %now.load398]
  call void inorder(i32 %now.load398416)
  call void putch(i32 10)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

void inorder(i32 root) {
entry253:  pred()
  257 = icmp ne i32 %root, i32 -1
  br i1 %257, bb %then258, bb %if.exit259
then258:  pred(entry253)
  374 = shl i32 %root, i32 2
  262 = ptradd ptr @left_child, i32 %374
  262.load = load i32 from ptr %262
  call void inorder(i32 %262.load)
  267 = ptradd ptr @value, i32 %374
  267.load = load i32 from ptr %267
  call void putint(i32 %267.load)
  call void putch(i32 32)
  274 = ptradd ptr @right_child, i32 %374
  274.load = load i32 from ptr %274
  call void inorder(i32 %274.load)
  br bb %if.exit259
if.exit259:  pred(entry253, then258)
  ret 
}

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


