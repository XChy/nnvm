global ptr now init with i32 0
internal global ptr left_child init with 10000 x i32 zeros
internal global ptr value init with 10000 x i32 zeros
internal global ptr right_child init with 10000 x i32 zeros
internal i32 insert(i32 root, i32 x) {
entry88:  pred()
  93 = icmp eq i32 %root, i32 -1
  br i1 %93, bb %then94, bb %else96
then94:  pred(entry88)
  now.load395 = load i32 from ptr @now
  360396 = shl i32 %now.load395, i32 2
  70397 = ptradd ptr @value, i32 %360396
  store i32 %x to ptr %70397
  75401 = ptradd ptr @left_child, i32 %360396
  store i32 -1 to ptr %75401
  80405 = ptradd ptr @right_child, i32 %360396
  store i32 -1 to ptr %80405
  85408 = add i32 %now.load395, i32 1
  store i32 %85408 to ptr @now
  ret i32 %now.load395
else96:  pred(entry88)
  355 = shl i32 %root, i32 2
  102 = ptradd ptr @value, i32 %355
  102.load = load i32 from ptr %102
  104 = icmp sgt i32 %x, i32 %102.load
  br i1 %104, bb %then105, bb %else107
then105:  pred(else96)
  110 = ptradd ptr @right_child, i32 %355
  114.load = load i32 from ptr %110
  117 = call i32 insert(i32 %114.load, i32 %x)
  store i32 %117 to ptr %110
  br bb %if.exit106
if.exit106:  pred(then105, else107)
  ret i32 %root
else107:  pred(else96)
  120 = ptradd ptr @left_child, i32 %355
  124.load = load i32 from ptr %120
  127 = call i32 insert(i32 %124.load, i32 %x)
  store i32 %127 to ptr %120
  br bb %if.exit106
}

internal i32 new_node(i32 x) {
entry66:  pred()
  now.load = load i32 from ptr @now
  360 = shl i32 %now.load, i32 2
  70 = ptradd ptr @value, i32 %360
  store i32 %x to ptr %70
  75 = ptradd ptr @left_child, i32 %360
  store i32 -1 to ptr %75
  80 = ptradd ptr @right_child, i32 %360
  store i32 -1 to ptr %80
  85 = add i32 %now.load, i32 1
  store i32 %85 to ptr @now
  ret i32 %now.load
}

internal i32 delete(i32 root, i32 x) {
entry129:  pred()
  134 = icmp eq i32 %root, i32 -1
  br i1 %134, bb %then135, bb %if.exit136
then135:  pred(entry129)
  ret i32 -1
if.exit136:  pred(entry129)
  365 = shl i32 %root, i32 2
  141 = ptradd ptr @value, i32 %365
  141.load = load i32 from ptr %141
  143 = icmp sgt i32 %x, i32 %141.load
  br i1 %143, bb %then144, bb %else146
then144:  pred(if.exit136)
  149 = ptradd ptr @right_child, i32 %365
  153.load = load i32 from ptr %149
  156 = call i32 delete(i32 %153.load, i32 %x)
  store i32 %156 to ptr %149
  br bb %if.exit145
if.exit145:  pred(then144, then163, else217)
  ret i32 %root
else146:  pred(if.exit136)
  162 = icmp slt i32 %x, i32 %141.load
  br i1 %162, bb %then163, bb %else165
then163:  pred(else146)
  168 = ptradd ptr @left_child, i32 %365
  172.load = load i32 from ptr %168
  175 = call i32 delete(i32 %172.load, i32 %x)
  store i32 %175 to ptr %168
  br bb %if.exit145
else165:  pred(else146)
  178 = ptradd ptr @left_child, i32 %365
  178.load = load i32 from ptr %178
  181 = icmp eq i32 %178.load, i32 -1
  br i1 %181, bb %select.then182, bb %select.else183
select.then182:  pred(else165)
  188 = ptradd ptr @right_child, i32 %365
  188.load = load i32 from ptr %188
  191 = icmp eq i32 %188.load, i32 -1
  br bb %select.exit184
select.else183:  pred(else165)
  br bb %select.exit184
select.exit184:  pred(select.then182, select.else183)
  select185.phi = phi [bb %select.else183, i1 0, bb %select.then182, i1 %191]
  br i1 %select185.phi, bb %then193, bb %else195
then193:  pred(select.exit184)
  ret i32 -1
else195:  pred(select.exit184)
  br i1 %181, bb %select.then203, bb %select.else204
select.then203:  pred(else195)
  br bb %select.exit205
select.else204:  pred(else195)
  209 = ptradd ptr @right_child, i32 %365
  209.load = load i32 from ptr %209
  212 = icmp eq i32 %209.load, i32 -1
  br bb %select.exit205
select.exit205:  pred(select.then203, select.else204)
  select206.phi = phi [bb %select.else204, i1 %212, bb %select.then203, i1 -1]
  br i1 %select206.phi, bb %then215, bb %else217
then215:  pred(select.exit205)
  br i1 %181, bb %then224, bb %else226
else217:  pred(select.exit205)
  238 = ptradd ptr @right_child, i32 %365
  238.load = load i32 from ptr %238
  240 = call i32 find_minimum(i32 %238.load)
  378 = shl i32 %240, i32 2
  247 = ptradd ptr @value, i32 %378
  247.load = load i32 from ptr %247
  store i32 %247.load to ptr %141
  255.load = load i32 from ptr %238
  259.load = load i32 from ptr %247
  261 = call i32 delete(i32 %255.load, i32 %259.load)
  store i32 %261 to ptr %238
  br bb %if.exit145
then224:  pred(then215)
  229 = ptradd ptr @right_child, i32 %365
  229.load = load i32 from ptr %229
  ret i32 %229.load
else226:  pred(then215)
  ret i32 %178.load
}

internal i32 find_minimum(i32 root) {
entry43:  pred()
  47 = icmp eq i32 %root, i32 -1
  br i1 %47, bb %then48, bb %else50
then48:  pred(entry43)
  ret i32 -1
else50:  pred(entry43)
  384 = shl i32 %root, i32 2
  54 = ptradd ptr @left_child, i32 %384
  54.load = load i32 from ptr %54
  57 = icmp ne i32 %54.load, i32 -1
  br i1 %57, bb %then58, bb %if.exit59
then58:  pred(else50)
  62.load = load i32 from ptr %54
  64 = call i32 find_minimum(i32 %62.load)
  ret i32 %64
if.exit59:  pred(else50)
  ret i32 %root
}

external i32 getint()

external i32 getch()

internal i32 search(i32 root, i32 x) {
entry:  pred()
  5 = icmp eq i32 %root, i32 -1
  br i1 %5, bb %select.then, bb %select.else
select.then:  pred(entry)
  br bb %select.exit
select.else:  pred(entry)
  386 = shl i32 %root, i32 2
  12 = ptradd ptr @value, i32 %386
  12.load = load i32 from ptr %12
  15 = icmp eq i32 %12.load, i32 %x
  br bb %select.exit
select.exit:  pred(select.then, select.else)
  select.phi = phi [bb %select.else, i1 %15, bb %select.then, i1 -1]
  br i1 %select.phi, bb %then, bb %else
then:  pred(select.exit)
  ret i32 %root
else:  pred(select.exit)
  387 = shl i32 %root, i32 2
  25 = ptradd ptr @value, i32 %387
  25.load = load i32 from ptr %25
  27 = icmp sgt i32 %x, i32 %25.load
  br i1 %27, bb %then28, bb %else30
then28:  pred(else)
  33 = ptradd ptr @right_child, i32 %387
  33.load = load i32 from ptr %33
  36 = call i32 search(i32 %33.load, i32 %x)
  ret i32 %36
else30:  pred(else)
  39 = ptradd ptr @left_child, i32 %387
  39.load = load i32 from ptr %39
  42 = call i32 search(i32 %39.load, i32 %x)
  ret i32 %42
}

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry287:  pred()
  store i32 0 to ptr @now
  290 = call i32 getint()
  292 = icmp ne i32 %290, i32 0
  293 = xor i1 %292, i1 -1
  294 = zext i1 %293 to i32
  295 = icmp ne i32 %294, i32 0
  br i1 %295, bb %then296, bb %if.exit297
then296:  pred(entry287)
  ret i32 0
if.exit297:  pred(entry287)
  299 = call i32 getint()
  now.load414 = load i32 from ptr @now
  360415 = shl i32 %now.load414, i32 2
  70416 = ptradd ptr @value, i32 %360415
  store i32 %299 to ptr %70416
  75420 = ptradd ptr @left_child, i32 %360415
  store i32 -1 to ptr %75420
  80424 = ptradd ptr @right_child, i32 %360415
  store i32 -1 to ptr %80424
  85427 = add i32 %now.load414, i32 1
  store i32 %85427 to ptr @now
  307435 = icmp slt i32 1, i32 %290
  br i1 %307435, bb %while.body_preheader, bb %while.exit
while.body_preheader:  pred(if.exit297)
  br bb %while.body
while.body:  pred(while.body, while.body_preheader)
  i.phi354436 = phi [bb %while.body, i32 %314, bb %while.body_preheader, i32 1]
  310 = call i32 getint()
  311 = call i32 insert(i32 %now.load414, i32 %310)
  314 = add i32 %i.phi354436, i32 1
  307 = icmp slt i32 %314, i32 %290
  br i1 %307, bb %while.body, bb %while.exit
while.exit:  pred(while.body, if.exit297)
  call void inorder(i32 %now.load414)
  call void putch(i32 10)
  320 = call i32 getint()
  327431 = icmp slt i32 0, i32 %320
  br i1 %327431, bb %while.body323_preheader, bb %while.exit324
while.body323_preheader:  pred(while.exit)
  br bb %while.body323
while.body323:  pred(while.body323, while.body323_preheader)
  root.phi434 = phi [bb %while.body323, i32 %332, bb %while.body323_preheader, i32 %now.load414]
  i.phi433 = phi [bb %while.body323, i32 %335, bb %while.body323_preheader, i32 0]
  331 = call i32 getint()
  332 = call i32 delete(i32 %root.phi434, i32 %331)
  335 = add i32 %i.phi433, i32 1
  327 = icmp slt i32 %335, i32 %320
  br i1 %327, bb %while.body323, bb %while.exit324
while.exit324:  pred(while.body323, while.exit)
  now.load414432 = phi [bb %while.body323, i32 %332, bb %while.exit, i32 %now.load414]
  call void inorder(i32 %now.load414432)
  call void putch(i32 10)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

internal void inorder(i32 root) {
entry263:  pred()
  267 = icmp ne i32 %root, i32 -1
  br i1 %267, bb %then268, bb %if.exit269
then268:  pred(entry263)
  390 = shl i32 %root, i32 2
  272 = ptradd ptr @left_child, i32 %390
  272.load = load i32 from ptr %272
  call void inorder(i32 %272.load)
  277 = ptradd ptr @value, i32 %390
  277.load = load i32 from ptr %277
  call void putint(i32 %277.load)
  call void putch(i32 32)
  284 = ptradd ptr @right_child, i32 %390
  284.load = load i32 from ptr %284
  call void inorder(i32 %284.load)
  br bb %if.exit269
if.exit269:  pred(entry263, then268)
  ret 
}

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


