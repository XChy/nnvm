global ptr now init with i32 0
global ptr left_child init with 10000 x i32 zeros
global ptr value init with 10000 x i32 zeros
global ptr right_child init with 10000 x i32 zeros
immutable global ptr LF init with i32 10
immutable global ptr maxNode init with i32 10000
immutable global ptr space init with i32 32
i32 insert(i32 root, i32 x) {
entry84:
  89 = icmp eq i32 %root, i32 -1
  br i1 %89, bb %then90, bb %else92
then90:
  now.load343 = load i32 from ptr @now
  69344 = mul i32 %now.load343, i32 4
  70345 = ptradd ptr @value, i32 %69344
  store i32 %x to ptr %70345
  now.load72347 = load i32 from ptr @now
  73348 = mul i32 %now.load72347, i32 4
  74349 = ptradd ptr @left_child, i32 %73348
  store i32 -1 to ptr %74349
  now.load76351 = load i32 from ptr @now
  77352 = mul i32 %now.load76351, i32 4
  78353 = ptradd ptr @right_child, i32 %77352
  store i32 -1 to ptr %78353
  now.load80355 = load i32 from ptr @now
  81356 = add i32 %now.load80355, i32 1
  store i32 %81356 to ptr @now
  br bb %then90.split
then90.split:
  ret i32 %now.load80355
if.exit91:
  ret i32 %root
else92:
  97 = mul i32 %root, i32 4
  98 = ptradd ptr @value, i32 %97
  98.load = load i32 from ptr %98
  100 = icmp sgt i32 %x, i32 %98.load
  br i1 %100, bb %then101, bb %else103
then101:
  106 = ptradd ptr @right_child, i32 %97
  109.load = load i32 from ptr %106
  112 = call i32 insert(i32 %109.load, i32 %x)
  store i32 %112 to ptr %106
  br bb %if.exit102
if.exit102:
  br bb %if.exit91
else103:
  115 = ptradd ptr @left_child, i32 %97
  118.load = load i32 from ptr %115
  121 = call i32 insert(i32 %118.load, i32 %x)
  store i32 %121 to ptr %115
  br bb %if.exit102
}

i32 new_node(i32 x) {
entry66:
  now.load = load i32 from ptr @now
  69 = mul i32 %now.load, i32 4
  70 = ptradd ptr @value, i32 %69
  store i32 %x to ptr %70
  now.load72 = load i32 from ptr @now
  73 = mul i32 %now.load72, i32 4
  74 = ptradd ptr @left_child, i32 %73
  store i32 -1 to ptr %74
  now.load76 = load i32 from ptr @now
  77 = mul i32 %now.load76, i32 4
  78 = ptradd ptr @right_child, i32 %77
  store i32 -1 to ptr %78
  now.load80 = load i32 from ptr @now
  81 = add i32 %now.load80, i32 1
  store i32 %81 to ptr @now
  ret i32 %now.load80
}

i32 delete(i32 root, i32 x) {
entry123:
  128 = icmp eq i32 %root, i32 -1
  br i1 %128, bb %then129, bb %if.exit130
then129:
  ret i32 -1
if.exit130:
  134 = mul i32 %root, i32 4
  135 = ptradd ptr @value, i32 %134
  135.load = load i32 from ptr %135
  137 = icmp sgt i32 %x, i32 %135.load
  br i1 %137, bb %then138, bb %else140
then138:
  143 = ptradd ptr @right_child, i32 %134
  146.load = load i32 from ptr %143
  149 = call i32 delete(i32 %146.load, i32 %x)
  store i32 %149 to ptr %143
  br bb %if.exit139
if.exit139:
  ret i32 %root
else140:
  153.load = load i32 from ptr %135
  155 = icmp slt i32 %x, i32 %153.load
  br i1 %155, bb %then156, bb %else158
then156:
  161 = ptradd ptr @left_child, i32 %134
  164.load = load i32 from ptr %161
  167 = call i32 delete(i32 %164.load, i32 %x)
  store i32 %167 to ptr %161
  br bb %if.exit157
if.exit157:
  br bb %if.exit139
else158:
  170 = ptradd ptr @left_child, i32 %134
  170.load = load i32 from ptr %170
  173 = icmp eq i32 %170.load, i32 -1
  br i1 %173, bb %select.then174, bb %select.else175
select.then174:
  180 = ptradd ptr @right_child, i32 %134
  180.load = load i32 from ptr %180
  183 = icmp eq i32 %180.load, i32 -1
  br bb %select.exit176
select.else175:
  br bb %select.exit176
select.exit176:
  select177.phi = phi [bb %select.else175, i1 0, bb %select.then174, i1 %183]
  br i1 %select177.phi, bb %then185, bb %else187
then185:
  ret i32 -1
else187:
  191.load = load i32 from ptr %170
  194 = icmp eq i32 %191.load, i32 -1
  br i1 %194, bb %select.then195, bb %select.else196
select.then195:
  br bb %select.exit197
select.else196:
  201 = ptradd ptr @right_child, i32 %134
  201.load = load i32 from ptr %201
  204 = icmp eq i32 %201.load, i32 -1
  br bb %select.exit197
select.exit197:
  select198.phi = phi [bb %select.else196, i1 %204, bb %select.then195, i1 1]
  br i1 %select198.phi, bb %then207, bb %else209
then207:
  212.load = load i32 from ptr %170
  215 = icmp eq i32 %212.load, i32 -1
  br i1 %215, bb %then216, bb %else218
else209:
  230 = ptradd ptr @right_child, i32 %134
  230.load = load i32 from ptr %230
  232 = call i32 find_minimum(i32 %230.load)
  237 = mul i32 %232, i32 4
  238 = ptradd ptr @value, i32 %237
  238.load = load i32 from ptr %238
  store i32 %238.load to ptr %135
  245.load = load i32 from ptr %230
  249.load = load i32 from ptr %238
  251 = call i32 delete(i32 %245.load, i32 %249.load)
  store i32 %251 to ptr %230
  br bb %if.exit157
then216:
  221 = ptradd ptr @right_child, i32 %134
  221.load = load i32 from ptr %221
  ret i32 %221.load
else218:
  225.load = load i32 from ptr %170
  ret i32 %225.load
}

i32 find_minimum(i32 root) {
entry43:
  47 = icmp eq i32 %root, i32 -1
  br i1 %47, bb %then48, bb %else50
then48:
  ret i32 -1
if.exit49:
  ret i32 %root
else50:
  53 = mul i32 %root, i32 4
  54 = ptradd ptr @left_child, i32 %53
  54.load = load i32 from ptr %54
  57 = icmp ne i32 %54.load, i32 -1
  br i1 %57, bb %then58, bb %if.exit59
then58:
  62.load = load i32 from ptr %54
  64 = call i32 find_minimum(i32 %62.load)
  ret i32 %64
if.exit59:
  br bb %if.exit49
}

external i32 getint()

external i32 getch()

i32 search(i32 root, i32 x) {
entry:
  5 = icmp eq i32 %root, i32 -1
  br i1 %5, bb %select.then, bb %select.else
select.then:
  br bb %select.exit
select.else:
  11 = mul i32 %root, i32 4
  12 = ptradd ptr @value, i32 %11
  12.load = load i32 from ptr %12
  15 = icmp eq i32 %12.load, i32 %x
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %15, bb %select.then, i1 1]
  br i1 %select.phi, bb %then, bb %else
then:
  ret i32 %root
else:
  24 = mul i32 %root, i32 4
  25 = ptradd ptr @value, i32 %24
  25.load = load i32 from ptr %25
  27 = icmp sgt i32 %x, i32 %25.load
  br i1 %27, bb %then28, bb %else30
then28:
  33 = ptradd ptr @right_child, i32 %24
  33.load = load i32 from ptr %33
  36 = call i32 search(i32 %33.load, i32 %x)
  ret i32 %36
else30:
  39 = ptradd ptr @left_child, i32 %24
  39.load = load i32 from ptr %39
  42 = call i32 search(i32 %39.load, i32 %x)
  ret i32 %42
}

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry277:
  store i32 0 to ptr @now
  279 = call i32 getint()
  281 = icmp ne i32 %279, i32 0
  282 =  i1 %281, i1 1
  283 = zext i1 %282 to i32
  284 = icmp ne i32 %283, i32 0
  br i1 %284, bb %then285, bb %if.exit286
then285:
  ret i32 0
if.exit286:
  288 = call i32 getint()
  now.load362 = load i32 from ptr @now
  69363 = mul i32 %now.load362, i32 4
  70364 = ptradd ptr @value, i32 %69363
  store i32 %288 to ptr %70364
  now.load72366 = load i32 from ptr @now
  73367 = mul i32 %now.load72366, i32 4
  74368 = ptradd ptr @left_child, i32 %73367
  store i32 -1 to ptr %74368
  now.load76370 = load i32 from ptr @now
  77371 = mul i32 %now.load76370, i32 4
  78372 = ptradd ptr @right_child, i32 %77371
  store i32 -1 to ptr %78372
  now.load80374 = load i32 from ptr @now
  81375 = add i32 %now.load80374, i32 1
  store i32 %81375 to ptr @now
  br bb %if.exit286.split
if.exit286.split:
  br bb %while.cond
while.cond:
  i.phi338 = phi [bb %if.exit286.split, i32 1, bb %while.body, i32 %302]
  296 = icmp slt i32 %i.phi338, i32 %279
  br i1 %296, bb %while.body, bb %while.exit
while.body:
  299 = call i32 getint()
  300 = call i32 insert(i32 %now.load80374, i32 %299)
  302 = add i32 %i.phi338, i32 1
  br bb %while.cond
while.exit:
  call void inorder(i32 %now.load80374)
  call void putch(i32 10)
  307 = call i32 getint()
  br bb %while.cond308
while.cond308:
  i.phi = phi [bb %while.exit, i32 0, bb %while.body309, i32 %319]
  root.phi = phi [bb %while.exit, i32 %now.load80374, bb %while.body309, i32 %317]
  313 = icmp slt i32 %i.phi, i32 %307
  br i1 %313, bb %while.body309, bb %while.exit310
while.body309:
  316 = call i32 getint()
  317 = call i32 delete(i32 %root.phi, i32 %316)
  319 = add i32 %i.phi, i32 1
  br bb %while.cond308
while.exit310:
  call void inorder(i32 %root.phi)
  call void putch(i32 10)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

void inorder(i32 root) {
entry253:
  257 = icmp ne i32 %root, i32 -1
  br i1 %257, bb %then258, bb %if.exit259
then258:
  261 = mul i32 %root, i32 4
  262 = ptradd ptr @left_child, i32 %261
  262.load = load i32 from ptr %262
  call void inorder(i32 %262.load)
  267 = ptradd ptr @value, i32 %261
  267.load = load i32 from ptr %267
  call void putint(i32 %267.load)
  call void putch(i32 32)
  274 = ptradd ptr @right_child, i32 %261
  274.load = load i32 from ptr %274
  call void inorder(i32 %274.load)
  br bb %if.exit259
if.exit259:
  ret 
}

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


