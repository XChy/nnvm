global ptr now init with i32 0
internal global ptr left_child init with 10000 x i32 zeros
internal global ptr value init with 10000 x i32 zeros
internal global ptr right_child init with 10000 x i32 zeros
internal i32 insert(i32 root, i32 x) {
entry95:  pred()
  right_child.pinned = pin ptr @right_child
  left_child.pinned = pin ptr @left_child
  value.pinned = pin ptr @value
  100 = icmp eq i32 %root, i32 -1
  br i1 %100, bb %then101, bb %else103
then101:  pred(entry95)
  now.pinned = pin ptr @now
  now.load428 = load i32 from ptr %now.pinned
  496 = shl i32 %now.load428, i32 2
  76430 = ptradd ptr %value.pinned, i32 %496
  store i32 %x to ptr %76430
  81434 = ptradd ptr %left_child.pinned, i32 %496
  store i32 -1 to ptr %81434
  86438 = ptradd ptr %right_child.pinned, i32 %496
  store i32 -1 to ptr %86438
  91441 = add i32 %now.load428, i32 1
  store i32 %91441 to ptr %now.pinned
  ret i32 %now.load428
else103:  pred(entry95)
  499 = shl i32 %root, i32 2
  110 = ptradd ptr %value.pinned, i32 %499
  110.load = load i32 from ptr %110
  112 = icmp sgt i32 %x, i32 %110.load
  br i1 %112, bb %then113, bb %else115
then113:  pred(else103)
  118 = ptradd ptr %right_child.pinned, i32 %499
  122.load = load i32 from ptr %118
  125 = call i32 insert(i32 %122.load, i32 %x)
  store i32 %125 to ptr %118
  br bb %if.exit114
if.exit114:  pred(then113, else115)
  ret i32 %root
else115:  pred(else103)
  128 = ptradd ptr %left_child.pinned, i32 %499
  132.load = load i32 from ptr %128
  135 = call i32 insert(i32 %132.load, i32 %x)
  store i32 %135 to ptr %128
  br bb %if.exit114
}

internal i32 delete(i32 root, i32 x) {
entry138:  pred()
  143 = icmp eq i32 %root, i32 -1
  br i1 %143, bb %then144, bb %if.exit145
then144:  pred(entry138)
  ret i32 -1
if.exit145:  pred(entry138)
  value.pinned539 = pin ptr @value
  500 = shl i32 %root, i32 2
  151 = ptradd ptr %value.pinned539, i32 %500
  151.load = load i32 from ptr %151
  153 = icmp sgt i32 %x, i32 %151.load
  159 = ptradd ptr @right_child, i32 %500
  br i1 %153, bb %then154, bb %else156
then154:  pred(if.exit145)
  163.load = load i32 from ptr %159
  166 = call i32 delete(i32 %163.load, i32 %x)
  store i32 %166 to ptr %159
  br bb %if.exit155
if.exit155:  pred(then154, then173, else228.split)
  ret i32 %root
else156:  pred(if.exit145)
  left_child.pinned540 = pin ptr @left_child
  172 = icmp slt i32 %x, i32 %151.load
  178 = ptradd ptr %left_child.pinned540, i32 %500
  br i1 %172, bb %then173, bb %else175
then173:  pred(else156)
  182.load = load i32 from ptr %178
  185 = call i32 delete(i32 %182.load, i32 %x)
  store i32 %185 to ptr %178
  br bb %if.exit155
else175:  pred(else156)
  188.load = load i32 from ptr %178
  191 = icmp eq i32 %188.load, i32 -1
  br i1 %191, bb %select.then192, bb %select.exit194
select.then192:  pred(else175)
  198.load = load i32 from ptr %159
  201 = icmp eq i32 %198.load, i32 -1
  br bb %select.exit194
select.exit194:  pred(select.then192, else175)
  select195.phi = phi [bb %else175, i1 0, bb %select.then192, i1 %201]
  br i1 %select195.phi, bb %then203, bb %else205
then203:  pred(select.exit194)
  ret i32 -1
else205:  pred(select.exit194)
  br i1 %191, bb %select.exit216, bb %select.else215
select.else215:  pred(else205)
  220.load = load i32 from ptr %159
  223 = icmp eq i32 %220.load, i32 -1
  br bb %select.exit216
select.exit216:  pred(select.else215, else205)
  select217.phi = phi [bb %select.else215, i1 %223, bb %else205, i1 1]
  br i1 %select217.phi, bb %then226, bb %else228
then226:  pred(select.exit216)
  br i1 %191, bb %then235, bb %else237
else228:  pred(select.exit216)
  251.load = load i32 from ptr %159
  br bb %find_minimum.loop_entry
else228.split:  pred(find_minimum.loop_entry, find_minimum.else53)
  253.ret = phi [bb %find_minimum.loop_entry, i32 -1, bb %find_minimum.else53, i32 %root.loop468]
  501 = shl i32 %253.ret, i32 2
  260 = ptradd ptr %value.pinned539, i32 %501
  260.load = load i32 from ptr %260
  store i32 %260.load to ptr %151
  268.load = load i32 from ptr %159
  272.load = load i32 from ptr %260
  274 = call i32 delete(i32 %268.load, i32 %272.load)
  store i32 %274 to ptr %159
  br bb %if.exit155
then235:  pred(then226)
  240.load = load i32 from ptr %159
  ret i32 %240.load
else237:  pred(then226)
  ret i32 %188.load
find_minimum.loop_entry:  pred(else228, find_minimum.else53)
  root.loop468 = phi [bb %else228, i32 %251.load, bb %find_minimum.else53, i32 %58.load476]
  50469 = icmp eq i32 %root.loop468, i32 -1
  br i1 %50469, bb %else228.split, bb %find_minimum.else53
find_minimum.else53:  pred(find_minimum.loop_entry)
  502 = shl i32 %root.loop468, i32 2
  58475 = ptradd ptr %left_child.pinned540, i32 %502
  58.load476 = load i32 from ptr %58475
  61477 = icmp ne i32 %58.load476, i32 -1
  br i1 %61477, bb %find_minimum.loop_entry, bb %else228.split
}

external i32 getint()

external void putint(i32 )

i32 main() {
entry301:  pred()
  now.pinned541 = pin ptr @now
  store i32 0 to ptr %now.pinned541
  304 = call i32 getint()
  306 = icmp ne i32 %304, i32 0
  307 = xor i1 %306, i1 1
  br i1 %307, bb %then310, bb %if.exit311
then310:  pred(entry301)
  ret i32 0
if.exit311:  pred(entry301)
  314 = call i32 getint()
  now.load447 = load i32 from ptr %now.pinned541
  503 = shl i32 %now.load447, i32 2
  76449 = ptradd ptr @value, i32 %503
  store i32 %314 to ptr %76449
  81453 = ptradd ptr @left_child, i32 %503
  store i32 -1 to ptr %81453
  86457 = ptradd ptr @right_child, i32 %503
  store i32 -1 to ptr %86457
  91460 = add i32 %now.load447, i32 1
  store i32 %91460 to ptr %now.pinned541
  322513 = icmp slt i32 1, i32 %304
  br i1 %322513, bb %while.body, bb %while.exit
while.body:  pred(while.body, if.exit311)
  i.phi379514 = phi [bb %while.body, i32 %329, bb %if.exit311, i32 1]
  325 = call i32 getint()
  326 = call i32 insert(i32 %now.load447, i32 %325)
  329 = add i32 %i.phi379514, i32 1
  322 = icmp slt i32 %329, i32 %304
  br i1 %322, bb %while.body, bb %while.exit
while.exit:  pred(while.body, if.exit311)
  call void inorder(i32 %now.load447)
  call void putch(i32 10)
  335 = call i32 getint()
  342509 = icmp slt i32 0, i32 %335
  br i1 %342509, bb %while.body338, bb %while.exit339
while.body338:  pred(while.body338, while.exit)
  root.phi512 = phi [bb %while.body338, i32 %347, bb %while.exit, i32 %now.load447]
  i.phi511 = phi [bb %while.body338, i32 %350, bb %while.exit, i32 0]
  346 = call i32 getint()
  347 = call i32 delete(i32 %root.phi512, i32 %346)
  350 = add i32 %i.phi511, i32 1
  342 = icmp slt i32 %350, i32 %335
  br i1 %342, bb %while.body338, bb %while.exit339
while.exit339:  pred(while.body338, while.exit)
  now.load447510 = phi [bb %while.body338, i32 %347, bb %while.exit, i32 %now.load447]
  call void inorder(i32 %now.load447510)
  call void putch(i32 10)
  ret i32 0
}

external void putch(i32 )

internal void inorder(i32 root) {
entry277:  pred()
  281 = icmp ne i32 %root, i32 -1
  br i1 %281, bb %then282, bb %if.exit283
then282:  pred(entry277)
  506 = shl i32 %root, i32 2
  286 = ptradd ptr @left_child, i32 %506
  286.load = load i32 from ptr %286
  call void inorder(i32 %286.load)
  291 = ptradd ptr @value, i32 %506
  291.load = load i32 from ptr %291
  call void putint(i32 %291.load)
  call void putch(i32 32)
  298 = ptradd ptr @right_child, i32 %506
  298.load = load i32 from ptr %298
  call void inorder(i32 %298.load)
  br bb %if.exit283
if.exit283:  pred(entry277, then282)
  ret 
}


