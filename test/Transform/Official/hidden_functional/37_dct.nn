global ptr TWO_PI init with float 6.283185
global ptr EPSILON init with float 0.000001
global ptr PI init with float 3.141593
global ptr test_idct init with 64 x float zeros
global ptr test_dct init with 64 x float zeros
global ptr test_block init with 64 x float zeros
global ptr MAX_DIM_Y init with i32 8
global ptr MAX_DIM_X init with i32 8
void idct(ptr mat, ptr dct_mat, i32 n, i32 m) {
entry231:
  br bb %while.cond235
while.cond235:
  j265.phi476 = phi [bb %entry231, i32 ub, bb %while.exit245, i32 %j265.phi475]
  i264.phi471 = phi [bb %entry231, i32 ub, bb %while.exit245, i32 %i264.phi470]
  u234.phi = phi [bb %entry231, i32 0, bb %while.exit245, i32 %421]
  240 = icmp slt i32 %u234.phi, i32 %n
  241 = icmp ne i1 %240, i1 0
  br i1 %241, bb %while.body236, bb %while.exit237
while.body236:
  br bb %while.cond243
while.exit237:
  ret 
while.cond243:
  j265.phi475 = phi [bb %while.body236, i32 %j265.phi476, bb %while.exit332, i32 %j265.phi474]
  i264.phi470 = phi [bb %while.body236, i32 %i264.phi471, bb %while.exit332, i32 %i264.phi]
  v242.phi = phi [bb %while.body236, i32 0, bb %while.exit332, i32 %419]
  248 = icmp slt i32 %v242.phi, i32 %m
  249 = icmp ne i1 %248, i1 0
  br i1 %249, bb %while.body244, bb %while.exit245
while.body244:
  251 = mul i32 %u234.phi, i32 32
  252 = ptradd ptr %mat, i32 %251
  254 = mul i32 %v242.phi, i32 4
  255 = ptradd ptr %252, i32 %254
  256 = si2f i32 1 to float
  257 = fdiv float %256, float 4.000000
  258 = mul i32 0, i32 32
  259 = ptradd ptr %dct_mat, i32 %258
  260 = mul i32 0, i32 4
  261 = ptradd ptr %259, i32 %260
  261.load = load float from ptr %261
  263 = fmul float %257, float %261.load
  store float %263 to ptr %255
  br bb %while.cond266
while.exit245:
  421 = add i32 %u234.phi, i32 1
  br bb %while.cond235
while.cond266:
  i264.phi472 = phi [bb %while.body244, i32 1, bb %while.body267, i32 %297]
  271 = icmp slt i32 %i264.phi472, i32 %n
  272 = icmp ne i1 %271, i1 0
  br i1 %272, bb %while.body267, bb %while.exit268
while.body267:
  274 = mul i32 %u234.phi, i32 32
  275 = ptradd ptr %mat, i32 %274
  277 = mul i32 %v242.phi, i32 4
  278 = ptradd ptr %275, i32 %277
  280 = mul i32 %u234.phi, i32 32
  281 = ptradd ptr %mat, i32 %280
  283 = mul i32 %v242.phi, i32 4
  284 = ptradd ptr %281, i32 %283
  284.load = load float from ptr %284
  286 = si2f i32 1 to float
  287 = fdiv float %286, float 2.000000
  289 = mul i32 %i264.phi472, i32 32
  290 = ptradd ptr %dct_mat, i32 %289
  291 = mul i32 0, i32 4
  292 = ptradd ptr %290, i32 %291
  292.load = load float from ptr %292
  294 = fmul float %287, float %292.load
  295 = fadd float %284.load, float %294
  store float %295 to ptr %278
  297 = add i32 %i264.phi472, i32 1
  br bb %while.cond266
while.exit268:
  br bb %while.cond298
while.cond298:
  j265.phi477 = phi [bb %while.exit268, i32 1, bb %while.body299, i32 %329]
  303 = icmp slt i32 %j265.phi477, i32 %m
  304 = icmp ne i1 %303, i1 0
  br i1 %304, bb %while.body299, bb %while.exit300
while.body299:
  306 = mul i32 %u234.phi, i32 32
  307 = ptradd ptr %mat, i32 %306
  309 = mul i32 %v242.phi, i32 4
  310 = ptradd ptr %307, i32 %309
  312 = mul i32 %u234.phi, i32 32
  313 = ptradd ptr %mat, i32 %312
  315 = mul i32 %v242.phi, i32 4
  316 = ptradd ptr %313, i32 %315
  316.load = load float from ptr %316
  318 = si2f i32 1 to float
  319 = fdiv float %318, float 2.000000
  320 = mul i32 0, i32 32
  321 = ptradd ptr %dct_mat, i32 %320
  323 = mul i32 %j265.phi477, i32 4
  324 = ptradd ptr %321, i32 %323
  324.load = load float from ptr %324
  326 = fmul float %319, float %324.load
  327 = fadd float %316.load, float %326
  store float %327 to ptr %310
  329 = add i32 %j265.phi477, i32 1
  br bb %while.cond298
while.exit300:
  br bb %while.cond330
while.cond330:
  j265.phi474 = phi [bb %while.exit300, i32 %j265.phi477, bb %while.exit339, i32 %j265.phi]
  i264.phi = phi [bb %while.exit300, i32 1, bb %while.exit339, i32 %396]
  335 = icmp slt i32 %i264.phi, i32 %n
  336 = icmp ne i1 %335, i1 0
  br i1 %336, bb %while.body331, bb %while.exit332
while.body331:
  br bb %while.cond337
while.exit332:
  398 = mul i32 %u234.phi, i32 32
  399 = ptradd ptr %mat, i32 %398
  401 = mul i32 %v242.phi, i32 4
  402 = ptradd ptr %399, i32 %401
  404 = mul i32 %u234.phi, i32 32
  405 = ptradd ptr %mat, i32 %404
  407 = mul i32 %v242.phi, i32 4
  408 = ptradd ptr %405, i32 %407
  408.load = load float from ptr %408
  410 = fmul float %408.load, float 2.000000
  412 = si2f i32 %n to float
  413 = fdiv float %410, float %412
  414 = fmul float %413, float 2.000000
  416 = si2f i32 %m to float
  417 = fdiv float %414, float %416
  store float %417 to ptr %402
  419 = add i32 %v242.phi, i32 1
  br bb %while.cond243
while.cond337:
  j265.phi = phi [bb %while.body331, i32 1, bb %while.body338, i32 %394]
  342 = icmp slt i32 %j265.phi, i32 %m
  343 = icmp ne i1 %342, i1 0
  br i1 %343, bb %while.body338, bb %while.exit339
while.body338:
  345 = mul i32 %u234.phi, i32 32
  346 = ptradd ptr %mat, i32 %345
  348 = mul i32 %v242.phi, i32 4
  349 = ptradd ptr %346, i32 %348
  351 = mul i32 %u234.phi, i32 32
  352 = ptradd ptr %mat, i32 %351
  354 = mul i32 %v242.phi, i32 4
  355 = ptradd ptr %352, i32 %354
  355.load = load float from ptr %355
  358 = mul i32 %i264.phi, i32 32
  359 = ptradd ptr %dct_mat, i32 %358
  361 = mul i32 %j265.phi, i32 4
  362 = ptradd ptr %359, i32 %361
  362.load = load float from ptr %362
  PI.load364 = load float from ptr @PI
  366 = si2f i32 %n to float
  367 = fdiv float %PI.load364, float %366
  369 = fdiv float 1.000000, float 2.000000
  370 = si2f i32 %u234.phi to float
  371 = fadd float %370, float %369
  372 = fmul float %367, float %371
  374 = si2f i32 %i264.phi to float
  375 = fmul float %372, float %374
  376 = call float my_cos(float %375)
  377 = fmul float %362.load, float %376
  PI.load378 = load float from ptr @PI
  380 = si2f i32 %m to float
  381 = fdiv float %PI.load378, float %380
  383 = fdiv float 1.000000, float 2.000000
  384 = si2f i32 %v242.phi to float
  385 = fadd float %384, float %383
  386 = fmul float %381, float %385
  388 = si2f i32 %j265.phi to float
  389 = fmul float %386, float %388
  390 = call float my_cos(float %389)
  391 = fmul float %377, float %390
  392 = fadd float %355.load, float %391
  store float %392 to ptr %349
  394 = add i32 %j265.phi, i32 1
  br bb %while.cond337
while.exit339:
  396 = add i32 %i264.phi, i32 1
  br bb %while.cond330
}

float my_sin_impl(float x) {
entry23:
  26 = call float my_fabs(float %x)
  EPSILON.load = load float from ptr @EPSILON
  28 = fcmp ole float %26, float %EPSILON.load
  br i1 %28, bb %then29, bb %if.exit30
then29:
  ret float %x
if.exit30:
  33 = fdiv float %x, float 3.000000
  34 = call float my_sin_impl(float %33)
  35 = call float p(float %34)
  ret float %35
}

float p(float x) {
entry10:
  13 = si2f i32 3 to float
  14 = fmul float %13, float %x
  16 = si2f i32 4 to float
  17 = fmul float %16, float %x
  19 = fmul float %17, float %x
  21 = fmul float %19, float %x
  22 = fsub float %14, float %21
  ret float %22
}

void dct(ptr dct_mat, ptr mat, i32 n, i32 m) {
entry132:
  br bb %while.cond136
while.cond136:
  j166.phi487 = phi [bb %entry132, i32 ub, bb %while.exit146, i32 %j166.phi486]
  i158.phi483 = phi [bb %entry132, i32 ub, bb %while.exit146, i32 %i158.phi482]
  u.phi = phi [bb %entry132, i32 0, bb %while.exit146, i32 %230]
  141 = icmp slt i32 %u.phi, i32 %n
  142 = icmp ne i1 %141, i1 0
  br i1 %142, bb %while.body137, bb %while.exit138
while.body137:
  br bb %while.cond144
while.exit138:
  ret 
while.cond144:
  j166.phi486 = phi [bb %while.body137, i32 %j166.phi487, bb %while.exit161, i32 %j166.phi485]
  i158.phi482 = phi [bb %while.body137, i32 %i158.phi483, bb %while.exit161, i32 %i158.phi]
  v.phi = phi [bb %while.body137, i32 0, bb %while.exit161, i32 %228]
  149 = icmp slt i32 %v.phi, i32 %m
  150 = icmp ne i1 %149, i1 0
  br i1 %150, bb %while.body145, bb %while.exit146
while.body145:
  152 = mul i32 %u.phi, i32 32
  153 = ptradd ptr %dct_mat, i32 %152
  155 = mul i32 %v.phi, i32 4
  156 = ptradd ptr %153, i32 %155
  157 = si2f i32 0 to float
  store float %157 to ptr %156
  br bb %while.cond159
while.exit146:
  230 = add i32 %u.phi, i32 1
  br bb %while.cond136
while.cond159:
  j166.phi485 = phi [bb %while.body145, i32 %j166.phi486, bb %while.exit169, i32 %j166.phi]
  i158.phi = phi [bb %while.body145, i32 0, bb %while.exit169, i32 %226]
  164 = icmp slt i32 %i158.phi, i32 %n
  165 = icmp ne i1 %164, i1 0
  br i1 %165, bb %while.body160, bb %while.exit161
while.body160:
  br bb %while.cond167
while.exit161:
  228 = add i32 %v.phi, i32 1
  br bb %while.cond144
while.cond167:
  j166.phi = phi [bb %while.body160, i32 0, bb %while.body168, i32 %224]
  172 = icmp slt i32 %j166.phi, i32 %m
  173 = icmp ne i1 %172, i1 0
  br i1 %173, bb %while.body168, bb %while.exit169
while.body168:
  175 = mul i32 %u.phi, i32 32
  176 = ptradd ptr %dct_mat, i32 %175
  178 = mul i32 %v.phi, i32 4
  179 = ptradd ptr %176, i32 %178
  181 = mul i32 %u.phi, i32 32
  182 = ptradd ptr %dct_mat, i32 %181
  184 = mul i32 %v.phi, i32 4
  185 = ptradd ptr %182, i32 %184
  185.load = load float from ptr %185
  188 = mul i32 %i158.phi, i32 32
  189 = ptradd ptr %mat, i32 %188
  191 = mul i32 %j166.phi, i32 4
  192 = ptradd ptr %189, i32 %191
  192.load = load float from ptr %192
  PI.load194 = load float from ptr @PI
  196 = si2f i32 %n to float
  197 = fdiv float %PI.load194, float %196
  199 = fdiv float 1.000000, float 2.000000
  200 = si2f i32 %i158.phi to float
  201 = fadd float %200, float %199
  202 = fmul float %197, float %201
  204 = si2f i32 %u.phi to float
  205 = fmul float %202, float %204
  206 = call float my_cos(float %205)
  207 = fmul float %192.load, float %206
  PI.load208 = load float from ptr @PI
  210 = si2f i32 %m to float
  211 = fdiv float %PI.load208, float %210
  213 = fdiv float 1.000000, float 2.000000
  214 = si2f i32 %j166.phi to float
  215 = fadd float %214, float %213
  216 = fmul float %211, float %215
  218 = si2f i32 %v.phi to float
  219 = fmul float %216, float %218
  220 = call float my_cos(float %219)
  221 = fmul float %207, float %220
  222 = fadd float %185.load, float %221
  store float %222 to ptr %179
  224 = add i32 %j166.phi, i32 1
  br bb %while.cond167
while.exit169:
  226 = add i32 %i158.phi, i32 1
  br bb %while.cond159
}

float my_sin(float x) {
entry36:
  TWO_PI.load = load float from ptr @TWO_PI
  40 = fcmp ogt float %x, float %TWO_PI.load
  br i1 %40, bb %select.then, bb %select.else
select.then:
  br bb %select.exit
select.else:
  TWO_PI.load46 = load float from ptr @TWO_PI
  47 = fneg float %TWO_PI.load46
  48 = fcmp olt float %x, float %47
  49 = icmp ne i1 %48, i1 0
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %49, bb %select.then, i1 1]
  br i1 %select.phi, bb %then51, bb %if.exit52
then51:
  TWO_PI.load55 = load float from ptr @TWO_PI
  56 = fdiv float %x, float %TWO_PI.load55
  57 = f2si float %56 to i32
  TWO_PI.load60 = load float from ptr @TWO_PI
  61 = si2f i32 %57 to float
  62 = fmul float %61, float %TWO_PI.load60
  63 = fsub float %x, float %62
  br bb %if.exit52
if.exit52:
  x.stack37.phi490 = phi [bb %select.exit, float %x, bb %then51, float %63]
  PI.load = load float from ptr @PI
  66 = fcmp ogt float %x.stack37.phi490, float %PI.load
  br i1 %66, bb %then67, bb %if.exit68
then67:
  TWO_PI.load70 = load float from ptr @TWO_PI
  71 = fsub float %x.stack37.phi490, float %TWO_PI.load70
  br bb %if.exit68
if.exit68:
  x.stack37.phi489 = phi [bb %if.exit52, float %x.stack37.phi490, bb %then67, float %71]
  PI.load73 = load float from ptr @PI
  74 = fneg float %PI.load73
  75 = fcmp olt float %x.stack37.phi489, float %74
  br i1 %75, bb %then76, bb %if.exit77
then76:
  TWO_PI.load79 = load float from ptr @TWO_PI
  80 = fadd float %x.stack37.phi489, float %TWO_PI.load79
  br bb %if.exit77
if.exit77:
  x.stack37.phi = phi [bb %if.exit68, float %x.stack37.phi489, bb %then76, float %80]
  82 = call float my_sin_impl(float %x.stack37.phi)
  ret float %82
}

external i32 getint()

external i32 getch()

external void putint(i32 )

void write_mat(ptr mat, i32 n, i32 m) {
entry91:
  br bb %while.cond
while.cond:
  i.phi = phi [bb %entry91, i32 0, bb %while.exit112, i32 %130]
  100 = icmp slt i32 %i.phi, i32 %n
  101 = icmp ne i1 %100, i1 0
  br i1 %101, bb %while.body, bb %while.exit
while.body:
  103 = mul i32 %i.phi, i32 32
  104 = ptradd ptr %mat, i32 %103
  105 = mul i32 0, i32 4
  106 = ptradd ptr %104, i32 %105
  106.load = load float from ptr %106
  call void putfloat(float %106.load)
  br bb %while.cond110
while.exit:
  call void putch(i32 10)
  ret 
while.cond110:
  j.phi = phi [bb %while.body, i32 1, bb %while.body111, i32 %127]
  115 = icmp slt i32 %j.phi, i32 %m
  116 = icmp ne i1 %115, i1 0
  br i1 %116, bb %while.body111, bb %while.exit112
while.body111:
  call void putch(i32 32)
  119 = mul i32 %i.phi, i32 32
  120 = ptradd ptr %mat, i32 %119
  122 = mul i32 %j.phi, i32 4
  123 = ptradd ptr %120, i32 %122
  123.load = load float from ptr %123
  call void putfloat(float %123.load)
  127 = add i32 %j.phi, i32 1
  br bb %while.cond110
while.exit112:
  call void putch(i32 10)
  130 = add i32 %i.phi, i32 1
  br bb %while.cond
}

external i32 getarray(ptr )

float my_cos(float x) {
entry83:
  PI.load86 = load float from ptr @PI
  87 = si2f i32 2 to float
  88 = fdiv float %PI.load86, float %87
  89 = fadd float %x, float %88
  90 = call float my_sin(float %89)
  ret float %90
}

external i32 getfarray(ptr )

i32 main() {
entry422:
  424 = call i32 getint()
  426 = call i32 getint()
  br bb %while.cond428
while.cond428:
  i427.phi = phi [bb %entry422, i32 0, bb %while.exit438, i32 %453]
  433 = icmp slt i32 %i427.phi, i32 %424
  434 = icmp ne i1 %433, i1 0
  br i1 %434, bb %while.body429, bb %while.exit430
while.body429:
  br bb %while.cond436
while.exit430:
  call void dct(ptr @test_dct, ptr @test_block, i32 %424, i32 %426)
  call void write_mat(ptr @test_dct, i32 %424, i32 %426)
  call void idct(ptr @test_idct, ptr @test_dct, i32 %424, i32 %426)
  call void write_mat(ptr @test_idct, i32 %424, i32 %426)
  ret i32 0
while.cond436:
  j435.phi = phi [bb %while.body429, i32 0, bb %while.body437, i32 %451]
  441 = icmp slt i32 %j435.phi, i32 %426
  442 = icmp ne i1 %441, i1 0
  br i1 %442, bb %while.body437, bb %while.exit438
while.body437:
  444 = mul i32 %i427.phi, i32 32
  445 = ptradd ptr @test_block, i32 %444
  447 = mul i32 %j435.phi, i32 4
  448 = ptradd ptr %445, i32 %447
  449 = call float getfloat()
  store float %449 to ptr %448
  451 = add i32 %j435.phi, i32 1
  br bb %while.cond436
while.exit438:
  453 = add i32 %i427.phi, i32 1
  br bb %while.cond428
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

float my_fabs(float x) {
entry:
  3 = si2f i32 0 to float
  4 = fcmp ogt float %x, float %3
  br i1 %4, bb %then, bb %if.exit
then:
  ret float %x
if.exit:
  9 = fneg float %x
  ret float %9
}


