global ptr head init with 10005 x i32 zeros
global ptr next init with 10005 x i32 zeros
global ptr to init with 10005 x i32 zeros
global ptr dep init with 10005 x i32 zeros
global ptr f init with 200100 x i32 zeros
global ptr n init with i32 0
global ptr cnt init with i32 0
global ptr m init with i32 0
immutable global ptr maxn init with i32 10005
i32 LCA(i32 x, i32 y) {
entry159:
  163 = mul i32 %x, i32 4
  164 = ptradd ptr @dep, i32 %163
  164.load = load i32 from ptr %164
  167 = mul i32 %y, i32 4
  168 = ptradd ptr @dep, i32 %167
  168.load = load i32 from ptr %168
  170 = icmp slt i32 %164.load, i32 %168.load
  br i1 %170, bb %then171, bb %if.exit172
then171:
  br bb %if.exit172
if.exit172:
  y.stack.phi326 = phi [bb %entry159, i32 %y, bb %then171, i32 %x]
  x.stack160.phi323 = phi [bb %entry159, i32 %x, bb %then171, i32 %y]
  br bb %while.cond178
while.cond178:
  i177.phi = phi [bb %if.exit172, i32 19, bb %if.exit220, i32 %229]
  x.stack160.phi322 = phi [bb %if.exit172, i32 %x.stack160.phi323, bb %if.exit220, i32 %x.stack160.phi321]
  182 = mul i32 %x.stack160.phi322, i32 4
  183 = ptradd ptr @dep, i32 %182
  183.load = load i32 from ptr %183
  186 = mul i32 %y.stack.phi326, i32 4
  187 = ptradd ptr @dep, i32 %186
  187.load = load i32 from ptr %187
  189 = icmp sgt i32 %183.load, i32 %187.load
  190 = icmp ne i1 %189, i1 0
  br i1 %190, bb %while.body179, bb %while.exit180
while.body179:
  192 = mul i32 %x.stack160.phi322, i32 80
  193 = ptradd ptr @f, i32 %192
  195 = mul i32 %i177.phi, i32 4
  196 = ptradd ptr %193, i32 %195
  196.load = load i32 from ptr %196
  198 = icmp ne i32 %196.load, i32 0
  br i1 %198, bb %select.then199, bb %select.else200
while.exit180:
  232 = icmp eq i32 %x.stack160.phi322, i32 %y.stack.phi326
  br i1 %232, bb %then233, bb %if.exit234
select.then199:
  208.load = load i32 from ptr %196
  210 = mul i32 %208.load, i32 4
  211 = ptradd ptr @dep, i32 %210
  211.load = load i32 from ptr %211
  215.load = load i32 from ptr %187
  217 = icmp sge i32 %211.load, i32 %215.load
  br bb %select.exit201
select.else200:
  br bb %select.exit201
select.exit201:
  select202.phi = phi [bb %select.else200, i1 0, bb %select.then199, i1 %217]
  br i1 %select202.phi, bb %then219, bb %if.exit220
then219:
  226.load = load i32 from ptr %196
  br bb %if.exit220
if.exit220:
  x.stack160.phi321 = phi [bb %select.exit201, i32 %x.stack160.phi322, bb %then219, i32 %226.load]
  229 = sub i32 %i177.phi, i32 1
  br bb %while.cond178
then233:
  ret i32 %x.stack160.phi322
if.exit234:
  br bb %while.cond236
while.cond236:
  i177.phi329 = phi [bb %if.exit234, i32 19, bb %if.exit258, i32 %274]
  y.stack.phi325 = phi [bb %if.exit234, i32 %y.stack.phi326, bb %if.exit258, i32 %y.stack.phi]
  x.stack160.phi320 = phi [bb %if.exit234, i32 %x.stack160.phi322, bb %if.exit258, i32 %x.stack160.phi]
  240 = icmp sge i32 %i177.phi329, i32 0
  241 = icmp ne i1 %240, i1 0
  br i1 %241, bb %while.body237, bb %while.exit238
while.body237:
  243 = mul i32 %x.stack160.phi320, i32 80
  244 = ptradd ptr @f, i32 %243
  246 = mul i32 %i177.phi329, i32 4
  247 = ptradd ptr %244, i32 %246
  247.load = load i32 from ptr %247
  250 = mul i32 %y.stack.phi325, i32 80
  251 = ptradd ptr @f, i32 %250
  254 = ptradd ptr %251, i32 %246
  254.load = load i32 from ptr %254
  256 = icmp ne i32 %247.load, i32 %254.load
  br i1 %256, bb %then257, bb %if.exit258
while.exit238:
  276 = mul i32 %x.stack160.phi320, i32 80
  277 = ptradd ptr @f, i32 %276
  279 = ptradd ptr %277, i32 0
  279.load = load i32 from ptr %279
  ret i32 %279.load
then257:
  264.load = load i32 from ptr %247
  271.load = load i32 from ptr %254
  br bb %if.exit258
if.exit258:
  y.stack.phi = phi [bb %while.body237, i32 %y.stack.phi325, bb %then257, i32 %271.load]
  x.stack160.phi = phi [bb %while.body237, i32 %x.stack160.phi320, bb %then257, i32 %264.load]
  274 = sub i32 %i177.phi329, i32 1
  br bb %while.cond236
}

void init() {
entry77:
  79 = ptradd ptr @dep, i32 0
  store i32 1061109567 to ptr %79
  br bb %while.cond81
while.cond81:
  i.phi = phi [bb %entry77, i32 1, bb %while.body82, i32 %93]
  n.load = load i32 from ptr @n
  86 = icmp sle i32 %i.phi, i32 %n.load
  87 = icmp ne i1 %86, i1 0
  br i1 %87, bb %while.body82, bb %while.exit83
while.body82:
  89 = mul i32 %i.phi, i32 4
  90 = ptradd ptr @head, i32 %89
  store i32 -1 to ptr %90
  93 = add i32 %i.phi, i32 1
  br bb %while.cond81
while.exit83:
  ret 
}

external i32 getint()

external i32 getch()

void tree(i32 x, i32 d) {
entry94:
  98 = mul i32 %x, i32 4
  99 = ptradd ptr @dep, i32 %98
  store i32 %d to ptr %99
  br bb %while.cond102
while.cond102:
  i101.phi334 = phi [bb %entry94, i32 0, bb %while.body103, i32 %117]
  106 = mul i32 %x, i32 80
  107 = ptradd ptr @f, i32 %106
  109 = mul i32 %i101.phi334, i32 4
  110 = ptradd ptr %107, i32 %109
  110.load = load i32 from ptr %110
  112 = icmp ne i32 %110.load, i32 0
  br i1 %112, bb %while.body103, bb %while.exit104
while.body103:
  117 = add i32 %i101.phi334, i32 1
  118 = mul i32 %117, i32 4
  119 = ptradd ptr %107, i32 %118
  125.load = load i32 from ptr %110
  127 = mul i32 %125.load, i32 80
  128 = ptradd ptr @f, i32 %127
  131 = ptradd ptr %128, i32 %109
  131.load = load i32 from ptr %131
  store i32 %131.load to ptr %119
  br bb %while.cond102
while.exit104:
  137 = ptradd ptr @head, i32 %98
  137.load = load i32 from ptr %137
  br bb %while.cond139
while.cond139:
  i101.phi = phi [bb %while.exit104, i32 %137.load, bb %while.body140, i32 %157.load]
  144 = icmp ne i32 %i101.phi, i32 -1
  145 = icmp ne i1 %144, i1 0
  br i1 %145, bb %while.body140, bb %while.exit141
while.body140:
  148 = mul i32 %i101.phi, i32 4
  149 = ptradd ptr @to, i32 %148
  149.load = load i32 from ptr %149
  153 = add i32 %d, i32 1
  call void tree(i32 %149.load, i32 %153)
  157 = ptradd ptr @next, i32 %148
  157.load = load i32 from ptr %157
  br bb %while.cond139
while.exit141:
  ret 
}

external void putint(i32 )

void add_edge(i32 from, i32 To) {
entry51:
  cnt.load = load i32 from ptr @cnt
  55 = mul i32 %cnt.load, i32 4
  56 = ptradd ptr @to, i32 %55
  store i32 %To to ptr %56
  cnt.load58 = load i32 from ptr @cnt
  59 = mul i32 %cnt.load58, i32 4
  60 = ptradd ptr @next, i32 %59
  62 = mul i32 %from, i32 4
  63 = ptradd ptr @head, i32 %62
  63.load = load i32 from ptr %63
  store i32 %63.load to ptr %60
  cnt.load68 = load i32 from ptr @cnt
  store i32 %cnt.load68 to ptr %63
  cnt.load69 = load i32 from ptr @cnt
  70 = add i32 %cnt.load69, i32 1
  store i32 %70 to ptr @cnt
  72 = mul i32 %To, i32 80
  73 = ptradd ptr @f, i32 %72
  75 = ptradd ptr %73, i32 0
  store i32 %from to ptr %75
  ret 
}

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry281:
  282 = call i32 quick_read()
  store i32 %282 to ptr @n
  283 = call i32 quick_read()
  store i32 %283 to ptr @m
  call void init()
  br bb %while.cond286
while.cond286:
  i285.phi = phi [bb %entry281, i32 1, bb %while.body287, i32 %301]
  n.load290 = load i32 from ptr @n
  291 = icmp ne i32 %i285.phi, i32 %n.load290
  292 = icmp ne i1 %291, i1 0
  br i1 %292, bb %while.body287, bb %while.exit288
while.body287:
  294 = call i32 quick_read()
  296 = call i32 quick_read()
  call void add_edge(i32 %294, i32 %296)
  301 = add i32 %i285.phi, i32 1
  br bb %while.cond286
while.exit288:
  call void tree(i32 1, i32 1)
  br bb %while.cond303
while.cond303:
  m.load = load i32 from ptr @m
  307 = icmp ne i32 %m.load, i32 0
  br i1 %307, bb %while.body304, bb %while.exit305
while.body304:
  309 = call i32 quick_read()
  311 = call i32 quick_read()
  314 = call i32 LCA(i32 %309, i32 %311)
  call void putint(i32 %314)
  call void putch(i32 10)
  m.load317 = load i32 from ptr @m
  318 = sub i32 %m.load317, i32 1
  store i32 %318 to ptr @m
  br bb %while.cond303
while.exit305:
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 quick_read() {
entry:
  2 = call i32 getch()
  br bb %while.cond
while.cond:
  f.phi345 = phi [bb %entry, i32 0, bb %if.exit, i32 %f.phi]
  ch.phi342 = phi [bb %entry, i32 %2, bb %if.exit, i32 %23]
  9 = icmp slt i32 %ch.phi342, i32 48
  br i1 %9, bb %select.then, bb %select.else
while.body:
  20 = icmp eq i32 %ch.phi342, i32 45
  br i1 %20, bb %then, bb %if.exit
while.exit:
  br bb %while.cond24
select.then:
  br bb %select.exit
select.else:
  15 = icmp sgt i32 %ch.phi342, i32 57
  16 = icmp ne i1 %15, i1 0
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %16, bb %select.then, i1 1]
  18 = icmp ne i1 %select.phi, i1 0
  br i1 %18, bb %while.body, bb %while.exit
then:
  br bb %if.exit
if.exit:
  f.phi = phi [bb %while.body, i32 %f.phi345, bb %then, i32 1]
  23 = call i32 getch()
  br bb %while.cond
while.cond24:
  x.phi = phi [bb %while.exit, i32 0, bb %while.body25, i32 %41]
  ch.phi = phi [bb %while.exit, i32 %ch.phi342, bb %while.body25, i32 %42]
  28 = icmp sge i32 %ch.phi, i32 48
  br i1 %28, bb %select.then29, bb %select.else30
while.body25:
  38 = mul i32 %x.phi, i32 10
  40 = add i32 %38, i32 %ch.phi
  41 = sub i32 %40, i32 48
  42 = call i32 getch()
  br bb %while.cond24
while.exit26:
  44 = icmp ne i32 %f.phi345, i32 0
  br i1 %44, bb %then45, bb %else
select.then29:
  34 = icmp sle i32 %ch.phi, i32 57
  br bb %select.exit31
select.else30:
  br bb %select.exit31
select.exit31:
  select32.phi = phi [bb %select.else30, i1 0, bb %select.then29, i1 %34]
  36 = icmp ne i1 %select32.phi, i1 0
  br i1 %36, bb %while.body25, bb %while.exit26
then45:
  49 = sub i32 0, i32 %x.phi
  ret i32 %49
else:
  ret i32 %x.phi
}


