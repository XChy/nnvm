global ptr m init with i32 0
global ptr fa init with 100005 x i32 zeros
global ptr n init with i32 0
i32 same(i32 x, i32 y) {
entry89:
  93 = call i32 find(i32 %x)
  95 = call i32 find(i32 %y)
  96 = icmp eq i32 %93, i32 %95
  br i1 %96, bb %then97, bb %if.exit98
then97:
  ret i32 1
if.exit98:
  ret i32 0
}

void init() {
entry51:
  br bb %while.cond53
while.cond53:
  i.phi = phi [bb %entry51, i32 1, bb %while.body54, i32 %65]
  n.load = load i32 from ptr @n
  58 = icmp sle i32 %i.phi, i32 %n.load
  59 = icmp ne i1 %58, i1 0
  br i1 %59, bb %while.body54, bb %while.exit55
while.body54:
  61 = mul i32 %i.phi, i32 4
  62 = ptradd ptr @fa, i32 %61
  store i32 %i.phi to ptr %62
  65 = add i32 %i.phi, i32 1
  br bb %while.cond53
while.exit55:
  ret 
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry99:
  100 = call i32 quick_read()
  store i32 %100 to ptr @n
  101 = call i32 quick_read()
  store i32 %101 to ptr @m
  call void init()
  br bb %while.cond103
while.cond103:
  y141.phi163 = phi [bb %entry99, i32 ub, bb %if.exit127, i32 %y141.phi]
  x138.phi161 = phi [bb %entry99, i32 ub, bb %if.exit127, i32 %x138.phi]
  y.phi159 = phi [bb %entry99, i32 ub, bb %if.exit127, i32 %y.phi]
  x129.phi157 = phi [bb %entry99, i32 ub, bb %if.exit127, i32 %x129.phi]
  select118.phi155 = phi [bb %entry99, i1 ub, bb %if.exit127, i1 %select118.phi]
  m.load = load i32 from ptr @m
  107 = icmp ne i32 %m.load, i32 0
  br i1 %107, bb %while.body104, bb %while.exit105
while.body104:
  109 = call i32 getch()
  br bb %while.cond110
while.exit105:
  ret i32 0
while.cond110:
  ch108.phi = phi [bb %while.body104, i32 %109, bb %while.body111, i32 %123]
  114 = icmp ne i32 %ch108.phi, i32 81
  br i1 %114, bb %select.then115, bb %select.else116
while.body111:
  123 = call i32 getch()
  br bb %while.cond110
while.exit112:
  125 = icmp eq i32 %ch108.phi, i32 81
  br i1 %125, bb %then126, bb %else128
select.then115:
  120 = icmp ne i32 %ch108.phi, i32 85
  br bb %select.exit117
select.else116:
  br bb %select.exit117
select.exit117:
  select118.phi = phi [bb %select.else116, i1 0, bb %select.then115, i1 %120]
  122 = icmp ne i1 %select118.phi, i1 0
  br i1 %122, bb %while.body111, bb %while.exit112
then126:
  130 = call i32 quick_read()
  132 = call i32 quick_read()
  135 = call i32 same(i32 %130, i32 %132)
  call void putint(i32 %135)
  call void putch(i32 10)
  br bb %if.exit127
if.exit127:
  y141.phi = phi [bb %else128, i32 %143, bb %then126, i32 %y141.phi163]
  x138.phi = phi [bb %else128, i32 %140, bb %then126, i32 %x138.phi161]
  y.phi = phi [bb %else128, i32 %y.phi159, bb %then126, i32 %132]
  x129.phi = phi [bb %else128, i32 %x129.phi157, bb %then126, i32 %130]
  m.load148 = load i32 from ptr @m
  149 = sub i32 %m.load148, i32 1
  store i32 %149 to ptr @m
  br bb %while.cond103
else128:
  139 = call i32 quick_read()
  140 = call i32 find(i32 %139)
  142 = call i32 quick_read()
  143 = call i32 find(i32 %142)
  145 = mul i32 %140, i32 4
  146 = ptradd ptr @fa, i32 %145
  store i32 %143 to ptr %146
  br bb %if.exit127
}

external float getfloat()

external void putfloat(float )

i32 find(i32 x) {
entry66:
  69 = mul i32 %x, i32 4
  70 = ptradd ptr @fa, i32 %69
  70.load = load i32 from ptr %70
  73 = icmp eq i32 %70.load, i32 %x
  br i1 %73, bb %then74, bb %else76
then74:
  ret i32 %x
if.exit75:
  unreachable
else76:
  80 = mul i32 %x, i32 4
  81 = ptradd ptr @fa, i32 %80
  81.load = load i32 from ptr %81
  83 = call i32 find(i32 %81.load)
  85 = mul i32 %x, i32 4
  86 = ptradd ptr @fa, i32 %85
  store i32 %83 to ptr %86
  ret i32 %83
}

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

i32 quick_read() {
entry:
  2 = call i32 getch()
  br bb %while.cond
while.cond:
  f.phi168 = phi [bb %entry, i32 0, bb %if.exit, i32 %f.phi]
  ch.phi166 = phi [bb %entry, i32 %2, bb %if.exit, i32 %23]
  9 = icmp slt i32 %ch.phi166, i32 48
  br i1 %9, bb %select.then, bb %select.else
while.body:
  20 = icmp eq i32 %ch.phi166, i32 45
  br i1 %20, bb %then, bb %if.exit
while.exit:
  br bb %while.cond24
select.then:
  br bb %select.exit
select.else:
  15 = icmp sgt i32 %ch.phi166, i32 57
  16 = icmp ne i1 %15, i1 0
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %16, bb %select.then, i1 1]
  18 = icmp ne i1 %select.phi, i1 0
  br i1 %18, bb %while.body, bb %while.exit
then:
  br bb %if.exit
if.exit:
  f.phi = phi [bb %while.body, i32 %f.phi168, bb %then, i32 1]
  23 = call i32 getch()
  br bb %while.cond
while.cond24:
  ch.phi = phi [bb %while.exit, i32 %ch.phi166, bb %while.body25, i32 %42]
  x.phi = phi [bb %while.exit, i32 0, bb %while.body25, i32 %41]
  28 = icmp sge i32 %ch.phi, i32 48
  br i1 %28, bb %select.then29, bb %select.else30
while.body25:
  38 = mul i32 %x.phi, i32 10
  40 = add i32 %38, i32 %ch.phi
  41 = sub i32 %40, i32 48
  42 = call i32 getch()
  br bb %while.cond24
while.exit26:
  44 = icmp ne i32 %f.phi168, i32 0
  br i1 %44, bb %then45, bb %else
select.then29:
  34 = icmp sle i32 %ch.phi, i32 57
  br bb %select.exit31
select.else30:
  br bb %select.exit31
select.exit31:
  select32.phi = phi [bb %select.else30, i1 0, bb %select.then29, i1 %34]
  36 = icmp ne i1 %select32.phi, i1 0
  br i1 %36, bb %while.body25, bb %while.exit26
then45:
  49 = sub i32 0, i32 %x.phi
  ret i32 %49
if.exit46:
  unreachable
else:
  ret i32 %x.phi
}


