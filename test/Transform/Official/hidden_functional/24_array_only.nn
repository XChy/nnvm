internal global ptr k init with 1 x i32 zeros
internal global ptr i init with 1 x i32 zeros
internal void sub(ptr x, ptr y) {
entry88:  pred()
  90.load = load i32 from ptr @k
  call void sub_impl(ptr %x, ptr %y, i32 %90.load)
  ret 
}

internal void sub_impl(ptr x, ptr y, i32 rec) {
entry61:  pred()
  64 = icmp eq i32 %rec, i32 0
  br i1 %64, bb %then65, bb %else67
then65:  pred(entry61)
  72.load = load i32 from ptr %x
  75.load = load i32 from ptr %y
  77 = sub i32 %72.load, i32 %75.load
  store i32 %77 to ptr %x
  br bb %if.exit66
if.exit66:  pred(then65, else67)
  ret 
else67:  pred(entry61)
  82.load = load i32 from ptr %x
  175 = shl i32 %82.load, i32 1
  store i32 %175 to ptr %x
  86 = sub i32 %rec, i32 1
  call void sub_impl(ptr %x, ptr %y, i32 %86)
  br bb %if.exit66
}

internal void inc(ptr x) {
entry24:  pred()
  26.load = load i32 from ptr @k
  call void inc_impl(ptr %x, i32 %26.load)
  ret 
}

external i32 getint()

external i32 getch()

external void putint(i32 )

internal void add(ptr x, ptr y) {
entry56:  pred()
  58.load = load i32 from ptr @k
  call void add_impl(ptr %x, ptr %y, i32 %58.load)
  ret 
}

external i32 getarray(ptr )

internal void add_impl(ptr x, ptr y, i32 rec) {
entry29:  pred()
  32 = icmp eq i32 %rec, i32 0
  br i1 %32, bb %then33, bb %else35
then33:  pred(entry29)
  40.load = load i32 from ptr %x
  43.load = load i32 from ptr %y
  45 = add i32 %40.load, i32 %43.load
  store i32 %45 to ptr %x
  br bb %if.exit34
if.exit34:  pred(then33, else35)
  ret 
else35:  pred(entry29)
  50.load = load i32 from ptr %x
  176 = shl i32 %50.load, i32 1
  store i32 %176 to ptr %x
  54 = sub i32 %rec, i32 1
  call void add_impl(ptr %x, ptr %y, i32 %54)
  br bb %if.exit34
}

external i32 getfarray(ptr )

i32 main() {
entry93:  pred()
  %z = stack 8
  %y = stack 4
  %j = stack 4
  store i32 -1 to ptr %z
  arr.index99 = ptradd ptr %z, i32 4
  store i32 0 to ptr %arr.index99
  103 = call i32 getint()
  store i32 %103 to ptr @k
  107 = call i32 getint()
  store i32 %107 to ptr %y
  110 = call i32 getarray(ptr %z)
  br bb %while.cond
while.cond:  pred(entry93, while.exit128)
  115.load = load i32 from ptr %y
  117 = icmp ne i32 %115.load, i32 0
  br i1 %117, bb %while.body, bb %while.exit
while.body:  pred(while.cond)
  124.load = load i32 from ptr %z
  store i32 %124.load to ptr %j
  130.load203 = load i32 from ptr %j
  132204 = icmp slt i32 %130.load203, i32 5
  br i1 %132204, bb %while.body127, bb %while.exit128
while.exit:  pred(while.cond, while.exit128)
  call void putch(i32 10)
  ret i32 0
while.body127:  pred(while.body127, while.body)
  135.load = load i32 from ptr @i
  call void putint(i32 %135.load)
  139.load = load i32 from ptr %j
  call void putint(i32 %139.load)
  143.load = load i32 from ptr %y
  call void putint(i32 %143.load)
  149.load = load i32 from ptr %z
  call void putint(i32 %149.load)
  58.load190 = load i32 from ptr @k
  call void add_impl(ptr %z, ptr %y, i32 %58.load190)
  58.load195 = load i32 from ptr @k
  call void add_impl(ptr %j, ptr %y, i32 %58.load195)
  90.load180 = load i32 from ptr @k
  call void sub_impl(ptr %z, ptr %y, i32 %90.load180)
  130.load = load i32 from ptr %j
  132 = icmp slt i32 %130.load, i32 5
  br i1 %132, bb %while.body127, bb %while.exit128
while.exit128:  pred(while.body127, while.body)
  26.load185 = load i32 from ptr @k
  call void inc_impl(ptr @i, i32 %26.load185)
  58.load200 = load i32 from ptr @k
  call void add_impl(ptr @i, ptr %z, i32 %58.load200)
  164.load = load i32 from ptr @i
  169.load = load i32 from ptr %arr.index99
  171 = icmp eq i32 %164.load, i32 %169.load
  br i1 %171, bb %while.exit, bb %while.cond
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void putfarray(i32 , ptr )

external void _sysy_starttime(i32 )

internal void inc_impl(ptr x, i32 rec) {
entry:  pred()
  3 = icmp eq i32 %rec, i32 0
  br i1 %3, bb %then, bb %else
then:  pred(entry)
  11.load = load i32 from ptr %x
  13 = add i32 %11.load, i32 1
  store i32 %13 to ptr %x
  br bb %if.exit
if.exit:  pred(then, else)
  ret 
else:  pred(entry)
  18.load = load i32 from ptr %x
  177 = shl i32 %18.load, i32 1
  store i32 %177 to ptr %x
  22 = sub i32 %rec, i32 1
  call void inc_impl(ptr %x, i32 %22)
  br bb %if.exit
}


