global ptr k init with 1 x i32 zeros
global ptr i init with 1 x i32 zeros
void sub(ptr x, ptr y) {
entry82:
  84.load = load i32 from ptr @k
  call void sub_impl(ptr %x, ptr %y, i32 %84.load)
  ret 
}

void sub_impl(ptr x, ptr y, i32 rec) {
entry57:
  60 = icmp eq i32 %rec, i32 0
  br i1 %60, bb %then61, bb %else63
then61:
  67.load = load i32 from ptr %x
  70.load = load i32 from ptr %y
  72 = sub i32 %67.load, i32 %70.load
  store i32 %72 to ptr %x
  br bb %if.exit62
if.exit62:
  ret 
else63:
  76.load = load i32 from ptr %x
  78 = mul i32 %76.load, i32 2
  store i32 %78 to ptr %x
  80 = sub i32 %rec, i32 1
  call void sub_impl(ptr %x, ptr %y, i32 %80)
  br bb %if.exit62
}

void inc(ptr x) {
entry22:
  24.load = load i32 from ptr @k
  call void inc_impl(ptr %x, i32 %24.load)
  ret 
}

external i32 getint()

external i32 getch()

external void putint(i32 )

void add(ptr x, ptr y) {
entry52:
  54.load = load i32 from ptr @k
  call void add_impl(ptr %x, ptr %y, i32 %54.load)
  ret 
}

external i32 getarray(ptr )

void add_impl(ptr x, ptr y, i32 rec) {
entry27:
  30 = icmp eq i32 %rec, i32 0
  br i1 %30, bb %then31, bb %else33
then31:
  37.load = load i32 from ptr %x
  40.load = load i32 from ptr %y
  42 = add i32 %37.load, i32 %40.load
  store i32 %42 to ptr %x
  br bb %if.exit32
if.exit32:
  ret 
else33:
  46.load = load i32 from ptr %x
  48 = mul i32 %46.load, i32 2
  store i32 %48 to ptr %x
  50 = sub i32 %rec, i32 1
  call void add_impl(ptr %x, ptr %y, i32 %50)
  br bb %if.exit32
}

external i32 getfarray(ptr )

i32 main() {
entry87:
  %z = stack 8
  %y = stack 4
  %j = stack 4
  store i32 -1 to ptr %z
  arr.index93 = ptradd ptr %z, i32 4
  store i32 0 to ptr %arr.index93
  96 = call i32 getint()
  store i32 %96 to ptr @k
  99 = call i32 getint()
  store i32 %99 to ptr %y
  102 = call i32 getarray(ptr %z)
  br bb %while.cond
while.cond:
  107.load = load i32 from ptr %y
  109 = icmp ne i32 %107.load, i32 0
  br i1 %109, bb %while.body, bb %while.exit
while.body:
  115.load = load i32 from ptr %z
  store i32 %115.load to ptr %j
  br bb %while.cond117
while.exit:
  call void putch(i32 10)
  ret i32 0
while.cond117:
  121.load = load i32 from ptr %j
  123 = icmp slt i32 %121.load, i32 5
  br i1 %123, bb %while.body118, bb %while.exit119
while.body118:
  126.load = load i32 from ptr @i
  call void putint(i32 %126.load)
  130.load = load i32 from ptr %j
  call void putint(i32 %130.load)
  134.load = load i32 from ptr %y
  call void putint(i32 %134.load)
  140.load = load i32 from ptr %z
  call void putint(i32 %140.load)
  54.load178 = load i32 from ptr @k
  call void add_impl(ptr %z, ptr %y, i32 %54.load178)
  54.load183 = load i32 from ptr @k
  call void add_impl(ptr %j, ptr %y, i32 %54.load183)
  84.load168 = load i32 from ptr @k
  call void sub_impl(ptr %z, ptr %y, i32 %84.load168)
  br bb %while.body118.split
while.body118.split:
  br bb %while.cond117
while.exit119:
  24.load173 = load i32 from ptr @k
  call void inc_impl(ptr @i, i32 %24.load173)
  54.load188 = load i32 from ptr @k
  call void add_impl(ptr @i, ptr %z, i32 %54.load188)
  155.load = load i32 from ptr @i
  160.load = load i32 from ptr %arr.index93
  162 = icmp eq i32 %155.load, i32 %160.load
  br i1 %162, bb %then163, bb %if.exit164
then163:
  br bb %while.exit
if.exit164:
  br bb %while.cond
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void putfarray(i32 , ptr )

external void _sysy_starttime(i32 )

void inc_impl(ptr x, i32 rec) {
entry:
  3 = icmp eq i32 %rec, i32 0
  br i1 %3, bb %then, bb %else
then:
  10.load = load i32 from ptr %x
  12 = add i32 %10.load, i32 1
  store i32 %12 to ptr %x
  br bb %if.exit
if.exit:
  ret 
else:
  16.load = load i32 from ptr %x
  18 = mul i32 %16.load, i32 2
  store i32 %18 to ptr %x
  20 = sub i32 %rec, i32 1
  call void inc_impl(ptr %x, i32 %20)
  br bb %if.exit
}


