internal global ptr k init with 1 x i32 zeros
internal global ptr i init with 1 x i32 zeros
internal void sub_impl(ptr x, ptr y, i32 rec) {
entry61:  pred()
  64 = icmp eq i32 %rec, i32 0
  br i1 %64, bb %then65, bb %else67
then65:  pred(entry61)
  72.load = load i32 from ptr %x
  75.load = load i32 from ptr %y
  77 = sub i32 %72.load, i32 %75.load
  store i32 %77 to ptr %x
  br bb %if.exit66
if.exit66:  pred(then65, else67)
  ret 
else67:  pred(entry61)
  82.load = load i32 from ptr %x
  217 = shl i32 %82.load, i32 1
  store i32 %217 to ptr %x
  184 = add i32 %rec, i32 -1
  call void sub_impl(ptr %x, ptr %y, i32 %184)
  br bb %if.exit66
}

external i32 getint()

external void putint(i32 )

external i32 getarray(ptr )

internal void add_impl(ptr x, ptr y, i32 rec) {
entry29:  pred()
  32 = icmp eq i32 %rec, i32 0
  br i1 %32, bb %then33, bb %else35
then33:  pred(entry29)
  40.load = load i32 from ptr %x
  43.load = load i32 from ptr %y
  45 = add i32 %40.load, i32 %43.load
  store i32 %45 to ptr %x
  br bb %if.exit34
if.exit34:  pred(then33, else35)
  ret 
else35:  pred(entry29)
  50.load = load i32 from ptr %x
  218 = shl i32 %50.load, i32 1
  store i32 %218 to ptr %x
  186 = add i32 %rec, i32 -1
  call void add_impl(ptr %x, ptr %y, i32 %186)
  br bb %if.exit34
}

i32 main() {
entry93:  pred()
  %z = stack 8
  %y = stack 4
  %j = stack 4
  k.pinned = pin ptr @k
  i.pinned = pin ptr @i
  store i32 -1 to ptr %z
  arr.index99 = ptradd ptr %z, i32 4
  store i32 0 to ptr %arr.index99
  103 = call i32 getint()
  store i32 %103 to ptr %k.pinned
  107 = call i32 getint()
  store i32 %107 to ptr %y
  110 = call i32 getarray(ptr %z)
  br bb %while.cond
while.cond:  pred(entry93, while.exit128)
  115.load = load i32 from ptr %y
  117 = icmp ne i32 %115.load, i32 0
  br i1 %117, bb %while.body, bb %while.exit
while.body:  pred(while.cond)
  124.load = load i32 from ptr %z
  store i32 %124.load to ptr %j
  132223 = icmp slt i32 %124.load, i32 5
  br i1 %132223, bb %while.body127, bb %while.exit128
while.exit:  pred(while.cond, while.exit128)
  call void putch(i32 10)
  ret i32 0
while.body127:  pred(while.body127, while.body)
  135.load = load i32 from ptr %i.pinned
  call void putint(i32 %135.load)
  139.load = load i32 from ptr %j
  call void putint(i32 %139.load)
  143.load = load i32 from ptr %y
  call void putint(i32 %143.load)
  149.load = load i32 from ptr %z
  call void putint(i32 %149.load)
  58.load201 = load i32 from ptr %k.pinned
  call void add_impl(ptr %z, ptr %y, i32 %58.load201)
  58.load206 = load i32 from ptr %k.pinned
  call void add_impl(ptr %j, ptr %y, i32 %58.load206)
  90.load191 = load i32 from ptr %k.pinned
  call void sub_impl(ptr %z, ptr %y, i32 %90.load191)
  130.load = load i32 from ptr %j
  132 = icmp slt i32 %130.load, i32 5
  br i1 %132, bb %while.body127, bb %while.exit128
while.exit128:  pred(while.body127, while.body)
  26.load196 = load i32 from ptr %k.pinned
  call void inc_impl(ptr %i.pinned, i32 %26.load196)
  58.load211 = load i32 from ptr %k.pinned
  call void add_impl(ptr %i.pinned, ptr %z, i32 %58.load211)
  164.load = load i32 from ptr %i.pinned
  169.load = load i32 from ptr %arr.index99
  171 = icmp eq i32 %164.load, i32 %169.load
  br i1 %171, bb %while.exit, bb %while.cond
}

external void putch(i32 )

internal void inc_impl(ptr x, i32 rec) {
entry:  pred()
  3 = icmp eq i32 %rec, i32 0
  br i1 %3, bb %then, bb %else
then:  pred(entry)
  11.load = load i32 from ptr %x
  13 = add i32 %11.load, i32 1
  store i32 %13 to ptr %x
  br bb %if.exit
if.exit:  pred(then, else)
  ret 
else:  pred(entry)
  18.load = load i32 from ptr %x
  219 = shl i32 %18.load, i32 1
  store i32 %219 to ptr %x
  188 = add i32 %rec, i32 -1
  call void inc_impl(ptr %x, i32 %188)
  br bb %if.exit
}


