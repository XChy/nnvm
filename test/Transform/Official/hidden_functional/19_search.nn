global ptr y_1 init with i32 0
global ptr x_1 init with i32 0
global ptr x_0 init with i32 0
global ptr h init with i32 0
global ptr y_0 init with i32 0
global ptr w init with i32 0
global ptr step init with 8 x i32 [1, 0, -1, 0, 0, 1, 0, -1]
global ptr a init with 900 x i32 zeros
global ptr INF init with i32 1073741824
external i32 getint()

external i32 getch()

i32 search(i32 x, i32 y, i32 n) {
entry:
  5 = icmp sgt i32 %n, i32 10
  br i1 %5, bb %then, bb %if.exit
then:
  INF.load = load i32 from ptr @INF
  ret i32 %INF.load
if.exit:
  INF.load10 = load i32 from ptr @INF
  br bb %while.cond
while.cond:
  select.phi287 = phi [bb %if.exit, i1 ub, bb %if.exit150, i1 %select.phi285, bb %then115, i1 %select.phi285, bb %then81, i1 %select.phi285]
  num.phi283 = phi [bb %if.exit, i32 %INF.load10, bb %if.exit150, i32 %num.phi, bb %then115, i32 %num.phi283, bb %then81, i32 %num.phi283]
  select90.phi273 = phi [bb %if.exit, i1 ub, bb %if.exit150, i1 %select90.phi, bb %then115, i1 %select90.phi, bb %then81, i1 %select90.phi273]
  select100.phi271 = phi [bb %if.exit, i1 ub, bb %if.exit150, i1 %select100.phi, bb %then115, i1 %select100.phi, bb %then81, i1 %select100.phi271]
  select108.phi269 = phi [bb %if.exit, i1 ub, bb %if.exit150, i1 %select108.phi, bb %then115, i1 %select108.phi, bb %then81, i1 %select108.phi269]
  i.phi = phi [bb %if.exit, i32 0, bb %if.exit150, i32 %159, bb %then115, i32 %118, bb %then81, i32 %84]
  searchResult.phi = phi [bb %if.exit, i32 ub, bb %if.exit150, i32 %145, bb %then115, i32 %searchResult.phi, bb %then81, i32 %searchResult.phi]
  16 = icmp slt i32 %i.phi, i32 4
  17 = icmp ne i1 %16, i1 0
  br i1 %17, bb %while.body, bb %while.exit
while.body:
  br bb %while.cond23
while.exit:
  161 = icmp sgt i32 %num.phi283, i32 10
  br i1 %161, bb %then162, bb %if.exit163
while.cond23:
  select.phi286 = phi [bb %while.body, i1 %select.phi287, bb %if.exit47, i1 %select.phi]
  coun.phi = phi [bb %while.body, i32 0, bb %if.exit47, i32 %65]
  x2.phi = phi [bb %while.body, i32 %x, bb %if.exit47, i32 %55]
  y2.phi = phi [bb %while.body, i32 %y, bb %if.exit47, i32 %63]
  27 = mul i32 %x2.phi, i32 120
  28 = ptradd ptr @a, i32 %27
  30 = mul i32 %y2.phi, i32 4
  31 = ptradd ptr %28, i32 %30
  31.load = load i32 from ptr %31
  33 = icmp ne i32 %31.load, i32 1
  34 = icmp ne i1 %33, i1 0
  br i1 %34, bb %while.body24, bb %while.exit25
while.body24:
  x_1.load = load i32 from ptr @x_1
  37 = icmp eq i32 %x2.phi, i32 %x_1.load
  br i1 %37, bb %select.then, bb %select.else
while.exit25:
  select.phi285 = phi [bb %while.cond23, i1 %select.phi286, bb %then46, i1 %select.phi]
  x_1.load67 = load i32 from ptr @x_1
  68 = icmp eq i32 %x2.phi, i32 %x_1.load67
  br i1 %68, bb %select.then69, bb %select.else70
select.then:
  y_1.load = load i32 from ptr @y_1
  44 = icmp eq i32 %y2.phi, i32 %y_1.load
  br bb %select.exit
select.else:
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 0, bb %select.then, i1 %44]
  br i1 %select.phi, bb %then46, bb %if.exit47
then46:
  br bb %while.exit25
if.exit47:
  50 = mul i32 %i.phi, i32 8
  51 = ptradd ptr @step, i32 %50
  52 = mul i32 0, i32 4
  53 = ptradd ptr %51, i32 %52
  53.load = load i32 from ptr %53
  55 = add i32 %x2.phi, i32 %53.load
  58 = mul i32 %i.phi, i32 8
  59 = ptradd ptr @step, i32 %58
  60 = mul i32 1, i32 4
  61 = ptradd ptr %59, i32 %60
  61.load = load i32 from ptr %61
  63 = add i32 %y2.phi, i32 %61.load
  65 = add i32 %coun.phi, i32 1
  br bb %while.cond23
select.then69:
  y_1.load74 = load i32 from ptr @y_1
  75 = icmp eq i32 %y2.phi, i32 %y_1.load74
  br bb %select.exit71
select.else70:
  br bb %select.exit71
select.exit71:
  select72.phi = phi [bb %select.else70, i1 0, bb %select.then69, i1 %75]
  br i1 %select72.phi, bb %then77, bb %if.exit78
then77:
  ret i32 1
if.exit78:
  80 = icmp sle i32 %coun.phi, i32 1
  br i1 %80, bb %then81, bb %if.exit82
then81:
  84 = add i32 %i.phi, i32 1
  br bb %while.cond
if.exit82:
  86 = icmp eq i32 %x2.phi, i32 0
  br i1 %86, bb %select.then87, bb %select.else88
select.then87:
  br bb %select.exit89
select.else88:
  h.load = load i32 from ptr @h
  93 = add i32 %h.load, i32 1
  94 = icmp eq i32 %x2.phi, i32 %93
  95 = icmp ne i1 %94, i1 0
  br bb %select.exit89
select.exit89:
  select90.phi = phi [bb %select.else88, i1 %95, bb %select.then87, i1 1]
  br i1 %select90.phi, bb %select.then97, bb %select.else98
select.then97:
  br bb %select.exit99
select.else98:
  102 = icmp eq i32 %y2.phi, i32 0
  103 = icmp ne i1 %102, i1 0
  br bb %select.exit99
select.exit99:
  select100.phi = phi [bb %select.else98, i1 %103, bb %select.then97, i1 1]
  br i1 %select100.phi, bb %select.then105, bb %select.else106
select.then105:
  br bb %select.exit107
select.else106:
  w.load = load i32 from ptr @w
  111 = add i32 %w.load, i32 1
  112 = icmp eq i32 %y2.phi, i32 %111
  113 = icmp ne i1 %112, i1 0
  br bb %select.exit107
select.exit107:
  select108.phi = phi [bb %select.else106, i1 %113, bb %select.then105, i1 1]
  br i1 %select108.phi, bb %then115, bb %if.exit116
then115:
  118 = add i32 %i.phi, i32 1
  br bb %while.cond
if.exit116:
  120 = mul i32 %x2.phi, i32 120
  121 = ptradd ptr @a, i32 %120
  123 = mul i32 %y2.phi, i32 4
  124 = ptradd ptr %121, i32 %123
  store i32 0 to ptr %124
  128 = mul i32 %i.phi, i32 8
  129 = ptradd ptr @step, i32 %128
  130 = mul i32 0, i32 4
  131 = ptradd ptr %129, i32 %130
  131.load = load i32 from ptr %131
  133 = sub i32 %x2.phi, i32 %131.load
  136 = mul i32 %i.phi, i32 8
  137 = ptradd ptr @step, i32 %136
  138 = mul i32 1, i32 4
  139 = ptradd ptr %137, i32 %138
  139.load = load i32 from ptr %139
  141 = sub i32 %y2.phi, i32 %139.load
  143 = add i32 %n, i32 1
  144 = call i32 search(i32 %133, i32 %141, i32 %143)
  145 = add i32 %144, i32 1
  148 = icmp slt i32 %145, i32 %num.phi283
  br i1 %148, bb %then149, bb %if.exit150
then149:
  br bb %if.exit150
if.exit150:
  num.phi = phi [bb %if.exit116, i32 %num.phi283, bb %then149, i32 %145]
  153 = mul i32 %x2.phi, i32 120
  154 = ptradd ptr @a, i32 %153
  156 = mul i32 %y2.phi, i32 4
  157 = ptradd ptr %154, i32 %156
  store i32 1 to ptr %157
  159 = add i32 %i.phi, i32 1
  br bb %while.cond
then162:
  INF.load164 = load i32 from ptr @INF
  ret i32 %INF.load164
if.exit163:
  ret i32 %num.phi283
}

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry166:
  167 = call i32 getint()
  store i32 %167 to ptr @w
  168 = call i32 getint()
  store i32 %168 to ptr @h
  br bb %while.cond169
while.cond169:
  j.phi293 = phi [bb %entry166, i32 ub, bb %if.exit256, i32 %j.phi292]
  w.load172 = load i32 from ptr @w
  173 = icmp ne i32 %w.load172, i32 0
  174 = icmp ne i1 %173, i1 0
  br i1 %174, bb %while.body170, bb %while.exit171
while.body170:
  br bb %while.cond177
while.exit171:
  ret i32 0
while.cond177:
  j.phi295 = phi [bb %while.body170, i32 %j.phi293, bb %while.exit185, i32 %j.phi294]
  i175.phi290 = phi [bb %while.body170, i32 0, bb %while.exit185, i32 %198]
  181 = icmp slt i32 %i175.phi290, i32 30
  182 = icmp ne i1 %181, i1 0
  br i1 %182, bb %while.body178, bb %while.exit179
while.body178:
  br bb %while.cond183
while.exit179:
  br bb %while.cond199
while.cond183:
  j.phi294 = phi [bb %while.body178, i32 0, bb %while.body184, i32 %196]
  187 = icmp slt i32 %j.phi294, i32 30
  188 = icmp ne i1 %187, i1 0
  br i1 %188, bb %while.body184, bb %while.exit185
while.body184:
  190 = mul i32 %i175.phi290, i32 120
  191 = ptradd ptr @a, i32 %190
  193 = mul i32 %j.phi294, i32 4
  194 = ptradd ptr %191, i32 %193
  store i32 1 to ptr %194
  196 = add i32 %j.phi294, i32 1
  br bb %while.cond183
while.exit185:
  198 = add i32 %i175.phi290, i32 1
  br bb %while.cond177
while.cond199:
  j.phi292 = phi [bb %while.exit179, i32 %j.phi295, bb %while.exit208, i32 %j.phi]
  i175.phi = phi [bb %while.exit179, i32 1, bb %while.exit208, i32 %248]
  h.load203 = load i32 from ptr @h
  204 = icmp sle i32 %i175.phi, i32 %h.load203
  205 = icmp ne i1 %204, i1 0
  br i1 %205, bb %while.body200, bb %while.exit201
while.body200:
  br bb %while.cond206
while.exit201:
  x_0.load = load i32 from ptr @x_0
  y_0.load = load i32 from ptr @y_0
  252 = call i32 search(i32 %x_0.load, i32 %y_0.load, i32 1)
  254 = icmp sle i32 %252, i32 10
  br i1 %254, bb %then255, bb %else257
while.cond206:
  j.phi = phi [bb %while.body200, i32 1, bb %if.exit229, i32 %246]
  w.load210 = load i32 from ptr @w
  211 = icmp sle i32 %j.phi, i32 %w.load210
  212 = icmp ne i1 %211, i1 0
  br i1 %212, bb %while.body207, bb %while.exit208
while.body207:
  214 = mul i32 %i175.phi, i32 120
  215 = ptradd ptr @a, i32 %214
  217 = mul i32 %j.phi, i32 4
  218 = ptradd ptr %215, i32 %217
  219 = call i32 getint()
  store i32 %219 to ptr %218
  221 = mul i32 %i175.phi, i32 120
  222 = ptradd ptr @a, i32 %221
  224 = mul i32 %j.phi, i32 4
  225 = ptradd ptr %222, i32 %224
  225.load = load i32 from ptr %225
  227 = icmp eq i32 %225.load, i32 2
  br i1 %227, bb %then228, bb %else
while.exit208:
  248 = add i32 %i175.phi, i32 1
  br bb %while.cond199
then228:
  store i32 %i175.phi to ptr @x_0
  store i32 %j.phi to ptr @y_0
  br bb %if.exit229
if.exit229:
  246 = add i32 %j.phi, i32 1
  br bb %while.cond206
else:
  234 = mul i32 %i175.phi, i32 120
  235 = ptradd ptr @a, i32 %234
  237 = mul i32 %j.phi, i32 4
  238 = ptradd ptr %235, i32 %237
  238.load = load i32 from ptr %238
  240 = icmp eq i32 %238.load, i32 3
  br i1 %240, bb %then241, bb %if.exit242
then241:
  store i32 %i175.phi to ptr @x_1
  store i32 %j.phi to ptr @y_1
  br bb %if.exit242
if.exit242:
  br bb %if.exit229
then255:
  call void putint(i32 %252)
  call void putch(i32 10)
  br bb %if.exit256
if.exit256:
  264 = call i32 getint()
  store i32 %264 to ptr @w
  265 = call i32 getint()
  store i32 %265 to ptr @h
  br bb %while.cond169
else257:
  261 = sub i32 0, i32 1
  call void putint(i32 %261)
  call void putch(i32 10)
  br bb %if.exit256
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


