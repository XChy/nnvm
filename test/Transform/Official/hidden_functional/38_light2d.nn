global ptr seed init with i32 0
immutable global ptr MAX_DISTANCE init with float 2.000000
immutable global ptr MAX_STEP init with i32 10
immutable global ptr EPSILON init with float 0.000001
immutable global ptr PI init with float 3.141593
immutable global ptr TWO_PI init with float 6.283185
immutable global ptr N init with i32 24
immutable global ptr RAND_MAX init with i32 100000006
immutable global ptr H init with i32 192
immutable global ptr W init with i32 192
float sample(float x, float y) {
entry236:
  br bb %while.cond241
while.cond241:
  i240.phi = phi [bb %entry236, i32 0, bb %while.body242, i32 %274]
  sum.phi = phi [bb %entry236, float 0.000000, bb %while.body242, float %272]
  246 = icmp slt i32 %i240.phi, i32 24
  br i1 %246, bb %while.body242, bb %while.exit243
while.body242:
  249 = call i32 rand()
  250 = si2f i32 %249 to float
  256 = si2f i32 100000006 to float
  257 = fdiv float %250, float %256
  258 = si2f i32 %i240.phi to float
  259 = fadd float %258, float %257
  260 = fmul float 6.283185, float %259
  262 = si2f i32 24 to float
  263 = fdiv float %260, float %262
  268 = call float my_cos(float %263)
  270 = call float my_sin(float %263)
  271 = call float trace(float %x, float %y, float %268, float %270)
  272 = fadd float %sum.phi, float %271
  274 = add i32 %i240.phi, i32 1
  br bb %while.cond241
while.exit243:
  277 = si2f i32 24 to float
  278 = fdiv float %sum.phi, float %277
  ret float %278
}

float trace(float ox, float oy, float dx, float dy) {
entry185:
  %ret = stack 8
  br bb %while.cond192
while.cond192:
  i.phi = phi [bb %entry185, i32 0, bb %if.exit225, i32 %235]
  t190.phi = phi [bb %entry185, float 0.000000, bb %if.exit225, float %233]
  197 = icmp slt i32 %i.phi, i32 10
  br i1 %197, bb %select.then198, bb %select.else199
while.body193:
  211 = fmul float %dx, float %t190.phi
  212 = fadd float %ox, float %211
  216 = fmul float %dy, float %t190.phi
  217 = fadd float %oy, float %216
  call void scene(float %212, float %217, ptr %ret)
  220.load = load float from ptr %ret
  223 = fcmp olt float %220.load, float 0.000001
  br i1 %223, bb %then224, bb %if.exit225
while.exit194:
  ret float 0.000000
select.then198:
  204 = fcmp olt float %t190.phi, float 2.000000
  br bb %select.exit200
select.else199:
  br bb %select.exit200
select.exit200:
  select201.phi = phi [bb %select.else199, i1 0, bb %select.then198, i1 %204]
  br i1 %select201.phi, bb %while.body193, bb %while.exit194
then224:
  227 = ptradd ptr %ret, i32 4
  227.load = load float from ptr %227
  ret float %227.load
if.exit225:
  231.load = load float from ptr %ret
  233 = fadd float %t190.phi, float %231.load
  235 = add i32 %i.phi, i32 1
  br bb %while.cond192
}

float my_sin_impl(float x) {
entry66:
  69 = call float my_fabs(float %x)
  71 = fcmp ole float %69, float 0.000001
  br i1 %71, bb %then72, bb %if.exit73
then72:
  ret float %x
if.exit73:
  76 = fdiv float %x, float 3.000000
  77 = call float my_sin_impl(float %76)
  78 = call float p(float %77)
  ret float %78
}

float p(float x) {
entry53:
  56 = si2f i32 3 to float
  57 = fmul float %56, float %x
  59 = si2f i32 4 to float
  60 = fmul float %59, float %x
  62 = fmul float %60, float %x
  64 = fmul float %62, float %x
  65 = fsub float %57, float %64
  ret float %65
}

float my_sqrt(float x) {
entry22:
  26 = si2f i32 8 to float
  27 = fdiv float %x, float %26
  28 = fadd float %27, float 0.500000
  30 = si2f i32 2 to float
  31 = fmul float %30, float %x
  33 = si2f i32 4 to float
  34 = fadd float %33, float %x
  35 = fdiv float %31, float %34
  36 = fadd float %28, float %35
  br bb %while.cond
while.cond:
  c.phi = phi [bb %entry22, i32 10, bb %while.body, i32 %51]
  t.phi = phi [bb %entry22, float %36, bb %while.body, float %49]
  42 = icmp ne i32 %c.phi, i32 0
  br i1 %42, bb %while.body, bb %while.exit
while.body:
  46 = fdiv float %x, float %t.phi
  47 = fadd float %t.phi, float %46
  49 = fdiv float %47, float %30
  51 = sub i32 %c.phi, i32 1
  br bb %while.cond
while.exit:
  ret float %t.phi
}

float circle_sdf(float x, float y, float cx, float cy, float r) {
entry134:
  143 = fsub float %x, float %cx
  147 = fsub float %y, float %cy
  150 = fmul float %143, float %143
  153 = fmul float %147, float %147
  154 = fadd float %150, float %153
  155 = call float my_sqrt(float %154)
  157 = fsub float %155, float %r
  ret float %157
}

float my_fabs(float x) {
entry12:
  15 = si2f i32 0 to float
  16 = fcmp ogt float %x, float %15
  br i1 %16, bb %then17, bb %if.exit18
then17:
  ret float %x
if.exit18:
  21 = fneg float %x
  ret float %21
}

float my_sin(float x) {
entry79:
  83 = fcmp ogt float %x, float 6.283185
  br i1 %83, bb %select.then, bb %select.else
select.then:
  br bb %select.exit
select.else:
  90 = fneg float 6.283185
  91 = fcmp olt float %x, float %90
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %91, bb %select.then, i1 1]
  br i1 %select.phi, bb %then94, bb %if.exit95
then94:
  99 = fdiv float %x, float 6.283185
  100 = f2si float %99 to i32
  104 = si2f i32 %100 to float
  105 = fmul float %104, float 6.283185
  106 = fsub float %x, float %105
  br bb %if.exit95
if.exit95:
  x.stack80.phi351 = phi [bb %select.exit, float %x, bb %then94, float %106]
  109 = fcmp ogt float %x.stack80.phi351, float 3.141593
  br i1 %109, bb %then110, bb %if.exit111
then110:
  114 = fsub float %x.stack80.phi351, float 6.283185
  br bb %if.exit111
if.exit111:
  x.stack80.phi350 = phi [bb %if.exit95, float %x.stack80.phi351, bb %then110, float %114]
  117 = fneg float 3.141593
  118 = fcmp olt float %x.stack80.phi350, float %117
  br i1 %118, bb %then119, bb %if.exit120
then119:
  123 = fadd float %x.stack80.phi350, float 6.283185
  br bb %if.exit120
if.exit120:
  x.stack80.phi = phi [bb %if.exit111, float %x.stack80.phi350, bb %then119, float %123]
  125 = call float my_sin_impl(float %x.stack80.phi)
  ret float %125
}

external i32 getint()

external i32 getch()

external void putint(i32 )

i32 rand() {
entry:
  seed.load = load i32 from ptr @seed
  2 = mul i32 %seed.load, i32 19980130
  3 = add i32 %2, i32 23333
  4 = srem i32 %3, i32 100000007
  store i32 %4 to ptr @seed
  6 = icmp slt i32 %4, i32 0
  br i1 %6, bb %then, bb %if.exit
then:
  seed.load9 = load i32 from ptr @seed
  10 = add i32 %seed.load9, i32 100000007
  store i32 %10 to ptr @seed
  br bb %if.exit
if.exit:
  seed.load11 = load i32 from ptr @seed
  ret i32 %seed.load11
}

void scene(float x, float y, ptr ret) {
entry158:
  164 = call float circle_sdf(float %x, float %y, float 0.400000, float 0.400000, float 0.100000)
  168 = call float circle_sdf(float %x, float %y, float 0.600000, float 0.600000, float 0.050000)
  171 = fcmp olt float %164, float %168
  br i1 %171, bb %then172, bb %else
then172:
  store float %164 to ptr %ret
  179 = ptradd ptr %ret, i32 4
  store float 3.000000 to ptr %179
  br bb %if.exit173
if.exit173:
  ret 
else:
  store float %168 to ptr %ret
  184 = ptradd ptr %ret, i32 4
  store float 0.000000 to ptr %184
  br bb %if.exit173
}

external i32 getarray(ptr )

float my_cos(float x) {
entry126:
  130 = si2f i32 2 to float
  131 = fdiv float 3.141593, float %130
  132 = fadd float %x, float %131
  133 = call float my_sin(float %132)
  ret float %133
}

external i32 getfarray(ptr )

i32 main() {
entry337:
  call void write_pgm()
  ret i32 0
}

external float getfloat()

external void putfloat(float )

void write_pgm() {
entry279:
  call void putch(i32 80)
  call void putch(i32 50)
  call void putch(i32 10)
  call void putint(i32 192)
  call void putch(i32 32)
  call void putint(i32 192)
  call void putch(i32 32)
  call void putint(i32 255)
  call void putch(i32 10)
  br bb %while.cond292
while.cond292:
  p.phi363 = phi [bb %entry279, i32 ub, bb %while.exit302, i32 %p.phi362]
  yy.phi360 = phi [bb %entry279, float ub, bb %while.exit302, float %yy.phi]
  xx307.phi358 = phi [bb %entry279, float ub, bb %while.exit302, float %xx307.phi]
  y.phi = phi [bb %entry279, i32 0, bb %while.exit302, i32 %336]
  297 = icmp slt i32 %y.phi, i32 192
  br i1 %297, bb %while.body293, bb %while.exit294
while.body293:
  br bb %while.cond300
while.exit294:
  ret 
while.cond300:
  p.phi362 = phi [bb %while.body293, i32 %p.phi363, bb %if.exit328, i32 %p.phi]
  yy.phi = phi [bb %while.body293, float %yy.phi360, bb %if.exit328, float %312]
  xx307.phi = phi [bb %while.body293, float %xx307.phi358, bb %if.exit328, float %309]
  x.phi = phi [bb %while.body293, i32 0, bb %if.exit328, i32 %333]
  305 = icmp slt i32 %x.phi, i32 192
  br i1 %305, bb %while.body301, bb %while.exit302
while.body301:
  309 = si2f i32 %x.phi to float
  312 = si2f i32 %y.phi to float
  316 = si2f i32 192 to float
  317 = fdiv float %309, float %316
  321 = fdiv float %312, float %316
  322 = call float sample(float %317, float %321)
  323 = fmul float %322, float 255.000000
  324 = f2si float %323 to i32
  326 = icmp sgt i32 %324, i32 255
  br i1 %326, bb %then327, bb %if.exit328
while.exit302:
  call void putch(i32 10)
  336 = add i32 %y.phi, i32 1
  br bb %while.cond292
then327:
  br bb %if.exit328
if.exit328:
  p.phi = phi [bb %while.body301, i32 %324, bb %then327, i32 255]
  call void putint(i32 %p.phi)
  call void putch(i32 32)
  333 = add i32 %x.phi, i32 1
  br bb %while.cond300
}

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )


