global ptr array init with 20 x i32 zeros
global ptr sum init with i32 0
i32 h(i32 i) {
entry68:
  sum.load70 = load i32 from ptr @sum
  71 = add i32 %sum.load70, i32 3
  store i32 %71 to ptr @sum
  73 = icmp slt i32 %i, i32 0
  br i1 %73, bb %select.then74, bb %select.else75
select.then74:
  br bb %select.exit76
select.else75:
  79 = icmp sge i32 %i, i32 20
  80 = icmp ne i1 %79, i1 0
  br bb %select.exit76
select.exit76:
  select77.phi = phi [bb %select.else75, i1 %80, bb %select.then74, i1 1]
  br i1 %select77.phi, bb %then82, bb %if.exit83
then82:
  ret i32 0
if.exit83:
  85 = mul i32 %i, i32 4
  86 = ptradd ptr @array, i32 %85
  86.load = load i32 from ptr %86
  ret i32 %86.load
}

i32 g(i32 i, i32 j) {
entry34:
  sum.load37 = load i32 from ptr @sum
  38 = add i32 %sum.load37, i32 2
  store i32 %38 to ptr @sum
  41 = icmp sge i32 %i, i32 %j
  br i1 %41, bb %select.then42, bb %select.else43
select.then42:
  br bb %select.exit44
select.else43:
  47 = icmp sge i32 %i, i32 20
  48 = icmp ne i1 %47, i1 0
  br bb %select.exit44
select.exit44:
  select45.phi = phi [bb %select.else43, i1 %48, bb %select.then42, i1 1]
  br i1 %select45.phi, bb %then50, bb %if.exit51
then50:
  ret i32 1
if.exit51:
  53 = mul i32 %i, i32 4
  54 = ptradd ptr @array, i32 %53
  store i32 0 to ptr %54
  56 = icmp eq i32 %i, i32 0
  br i1 %56, bb %then57, bb %else59
then57:
  61 = ptradd ptr @array, i32 0
  61.load = load i32 from ptr %61
  ret i32 %61.load
if.exit58:
  unreachable
else59:
  64 = sub i32 %i, i32 1
  65 = mul i32 %64, i32 4
  66 = ptradd ptr @array, i32 %65
  66.load = load i32 from ptr %66
  ret i32 %66.load
}

external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry88:
  br bb %while.cond
while.cond:
  i.phi675 = phi [bb %entry88, i32 0, bb %if.exit252, i32 %254]
  94 = icmp slt i32 %i.phi675, i32 20
  95 = icmp ne i1 %94, i1 0
  br i1 %95, bb %while.body, bb %while.exit
while.body:
  97 = call i32 f(i32 0, i32 %i.phi675)
  98 = icmp ne i32 %97, i32 0
  br i1 %98, bb %select.then99, bb %select.else100
while.exit:
  br bb %while.cond255
select.then99:
  104 = call i32 f(i32 1, i32 %i.phi675)
  105 = icmp ne i32 %104, i32 0
  br bb %select.exit101
select.else100:
  br bb %select.exit101
select.exit101:
  select102.phi = phi [bb %select.else100, i1 0, bb %select.then99, i1 %105]
  br i1 %select102.phi, bb %select.then107, bb %select.else108
select.then107:
  112 = call i32 f(i32 2, i32 %i.phi675)
  113 = icmp ne i32 %112, i32 0
  br bb %select.exit109
select.else108:
  br bb %select.exit109
select.exit109:
  select110.phi = phi [bb %select.else108, i1 0, bb %select.then107, i1 %113]
  br i1 %select110.phi, bb %select.then115, bb %select.else116
select.then115:
  120 = call i32 f(i32 3, i32 %i.phi675)
  121 = icmp ne i32 %120, i32 0
  br bb %select.exit117
select.else116:
  br bb %select.exit117
select.exit117:
  select118.phi = phi [bb %select.else116, i1 0, bb %select.then115, i1 %121]
  br i1 %select118.phi, bb %select.then123, bb %select.else124
select.then123:
  128 = call i32 f(i32 4, i32 %i.phi675)
  129 = icmp ne i32 %128, i32 0
  br bb %select.exit125
select.else124:
  br bb %select.exit125
select.exit125:
  select126.phi = phi [bb %select.else124, i1 0, bb %select.then123, i1 %129]
  br i1 %select126.phi, bb %select.then131, bb %select.else132
select.then131:
  136 = call i32 f(i32 5, i32 %i.phi675)
  137 = icmp ne i32 %136, i32 0
  br bb %select.exit133
select.else132:
  br bb %select.exit133
select.exit133:
  select134.phi = phi [bb %select.else132, i1 0, bb %select.then131, i1 %137]
  br i1 %select134.phi, bb %select.then139, bb %select.else140
select.then139:
  144 = call i32 f(i32 6, i32 %i.phi675)
  145 = icmp ne i32 %144, i32 0
  br bb %select.exit141
select.else140:
  br bb %select.exit141
select.exit141:
  select142.phi = phi [bb %select.else140, i1 0, bb %select.then139, i1 %145]
  br i1 %select142.phi, bb %select.then147, bb %select.else148
select.then147:
  152 = call i32 f(i32 7, i32 %i.phi675)
  153 = icmp ne i32 %152, i32 0
  br bb %select.exit149
select.else148:
  br bb %select.exit149
select.exit149:
  select150.phi = phi [bb %select.else148, i1 0, bb %select.then147, i1 %153]
  br i1 %select150.phi, bb %select.then155, bb %select.else156
select.then155:
  160 = call i32 f(i32 8, i32 %i.phi675)
  161 = icmp ne i32 %160, i32 0
  br bb %select.exit157
select.else156:
  br bb %select.exit157
select.exit157:
  select158.phi = phi [bb %select.else156, i1 0, bb %select.then155, i1 %161]
  br i1 %select158.phi, bb %select.then163, bb %select.else164
select.then163:
  168 = call i32 f(i32 9, i32 %i.phi675)
  169 = icmp ne i32 %168, i32 0
  br bb %select.exit165
select.else164:
  br bb %select.exit165
select.exit165:
  select166.phi = phi [bb %select.else164, i1 0, bb %select.then163, i1 %169]
  br i1 %select166.phi, bb %select.then171, bb %select.else172
select.then171:
  176 = call i32 f(i32 10, i32 %i.phi675)
  177 = icmp ne i32 %176, i32 0
  br bb %select.exit173
select.else172:
  br bb %select.exit173
select.exit173:
  select174.phi = phi [bb %select.else172, i1 0, bb %select.then171, i1 %177]
  br i1 %select174.phi, bb %select.then179, bb %select.else180
select.then179:
  184 = call i32 f(i32 11, i32 %i.phi675)
  185 = icmp ne i32 %184, i32 0
  br bb %select.exit181
select.else180:
  br bb %select.exit181
select.exit181:
  select182.phi = phi [bb %select.else180, i1 0, bb %select.then179, i1 %185]
  br i1 %select182.phi, bb %select.then187, bb %select.else188
select.then187:
  192 = call i32 f(i32 12, i32 %i.phi675)
  193 = icmp ne i32 %192, i32 0
  br bb %select.exit189
select.else188:
  br bb %select.exit189
select.exit189:
  select190.phi = phi [bb %select.else188, i1 0, bb %select.then187, i1 %193]
  br i1 %select190.phi, bb %select.then195, bb %select.else196
select.then195:
  200 = call i32 f(i32 13, i32 %i.phi675)
  201 = icmp ne i32 %200, i32 0
  br bb %select.exit197
select.else196:
  br bb %select.exit197
select.exit197:
  select198.phi = phi [bb %select.else196, i1 0, bb %select.then195, i1 %201]
  br i1 %select198.phi, bb %select.then203, bb %select.else204
select.then203:
  208 = call i32 f(i32 14, i32 %i.phi675)
  209 = icmp ne i32 %208, i32 0
  br bb %select.exit205
select.else204:
  br bb %select.exit205
select.exit205:
  select206.phi = phi [bb %select.else204, i1 0, bb %select.then203, i1 %209]
  br i1 %select206.phi, bb %select.then211, bb %select.else212
select.then211:
  216 = call i32 f(i32 15, i32 %i.phi675)
  217 = icmp ne i32 %216, i32 0
  br bb %select.exit213
select.else212:
  br bb %select.exit213
select.exit213:
  select214.phi = phi [bb %select.else212, i1 0, bb %select.then211, i1 %217]
  br i1 %select214.phi, bb %select.then219, bb %select.else220
select.then219:
  224 = call i32 f(i32 16, i32 %i.phi675)
  225 = icmp ne i32 %224, i32 0
  br bb %select.exit221
select.else220:
  br bb %select.exit221
select.exit221:
  select222.phi = phi [bb %select.else220, i1 0, bb %select.then219, i1 %225]
  br i1 %select222.phi, bb %select.then227, bb %select.else228
select.then227:
  232 = call i32 f(i32 17, i32 %i.phi675)
  233 = icmp ne i32 %232, i32 0
  br bb %select.exit229
select.else228:
  br bb %select.exit229
select.exit229:
  select230.phi = phi [bb %select.else228, i1 0, bb %select.then227, i1 %233]
  br i1 %select230.phi, bb %select.then235, bb %select.else236
select.then235:
  240 = call i32 f(i32 18, i32 %i.phi675)
  241 = icmp ne i32 %240, i32 0
  br bb %select.exit237
select.else236:
  br bb %select.exit237
select.exit237:
  select238.phi = phi [bb %select.else236, i1 0, bb %select.then235, i1 %241]
  br i1 %select238.phi, bb %select.then243, bb %select.else244
select.then243:
  248 = call i32 f(i32 19, i32 %i.phi675)
  249 = icmp ne i32 %248, i32 0
  br bb %select.exit245
select.else244:
  br bb %select.exit245
select.exit245:
  select246.phi = phi [bb %select.else244, i1 0, bb %select.then243, i1 %249]
  br i1 %select246.phi, bb %then251, bb %if.exit252
then251:
  br bb %if.exit252
if.exit252:
  254 = add i32 %i.phi675, i32 1
  br bb %while.cond
while.cond255:
  i.phi674 = phi [bb %while.exit, i32 0, bb %if.exit436, i32 %438]
  259 = icmp slt i32 %i.phi674, i32 20
  260 = icmp ne i1 %259, i1 0
  br i1 %260, bb %while.body256, bb %while.exit257
while.body256:
  262 = call i32 g(i32 0, i32 %i.phi674)
  263 = icmp ne i32 %262, i32 0
  br i1 %263, bb %select.then264, bb %select.else265
while.exit257:
  br bb %while.cond439
select.then264:
  br bb %select.exit266
select.else265:
  269 = call i32 g(i32 1, i32 %i.phi674)
  270 = icmp ne i32 %269, i32 0
  271 = icmp ne i1 %270, i1 0
  br bb %select.exit266
select.exit266:
  select267.phi = phi [bb %select.else265, i1 %271, bb %select.then264, i1 1]
  br i1 %select267.phi, bb %select.then273, bb %select.else274
select.then273:
  br bb %select.exit275
select.else274:
  278 = call i32 g(i32 2, i32 %i.phi674)
  279 = icmp ne i32 %278, i32 0
  280 = icmp ne i1 %279, i1 0
  br bb %select.exit275
select.exit275:
  select276.phi = phi [bb %select.else274, i1 %280, bb %select.then273, i1 1]
  br i1 %select276.phi, bb %select.then282, bb %select.else283
select.then282:
  br bb %select.exit284
select.else283:
  287 = call i32 g(i32 3, i32 %i.phi674)
  288 = icmp ne i32 %287, i32 0
  289 = icmp ne i1 %288, i1 0
  br bb %select.exit284
select.exit284:
  select285.phi = phi [bb %select.else283, i1 %289, bb %select.then282, i1 1]
  br i1 %select285.phi, bb %select.then291, bb %select.else292
select.then291:
  br bb %select.exit293
select.else292:
  296 = call i32 g(i32 4, i32 %i.phi674)
  297 = icmp ne i32 %296, i32 0
  298 = icmp ne i1 %297, i1 0
  br bb %select.exit293
select.exit293:
  select294.phi = phi [bb %select.else292, i1 %298, bb %select.then291, i1 1]
  br i1 %select294.phi, bb %select.then300, bb %select.else301
select.then300:
  br bb %select.exit302
select.else301:
  305 = call i32 g(i32 5, i32 %i.phi674)
  306 = icmp ne i32 %305, i32 0
  307 = icmp ne i1 %306, i1 0
  br bb %select.exit302
select.exit302:
  select303.phi = phi [bb %select.else301, i1 %307, bb %select.then300, i1 1]
  br i1 %select303.phi, bb %select.then309, bb %select.else310
select.then309:
  br bb %select.exit311
select.else310:
  314 = call i32 g(i32 6, i32 %i.phi674)
  315 = icmp ne i32 %314, i32 0
  316 = icmp ne i1 %315, i1 0
  br bb %select.exit311
select.exit311:
  select312.phi = phi [bb %select.else310, i1 %316, bb %select.then309, i1 1]
  br i1 %select312.phi, bb %select.then318, bb %select.else319
select.then318:
  br bb %select.exit320
select.else319:
  323 = call i32 g(i32 7, i32 %i.phi674)
  324 = icmp ne i32 %323, i32 0
  325 = icmp ne i1 %324, i1 0
  br bb %select.exit320
select.exit320:
  select321.phi = phi [bb %select.else319, i1 %325, bb %select.then318, i1 1]
  br i1 %select321.phi, bb %select.then327, bb %select.else328
select.then327:
  br bb %select.exit329
select.else328:
  332 = call i32 g(i32 8, i32 %i.phi674)
  333 = icmp ne i32 %332, i32 0
  334 = icmp ne i1 %333, i1 0
  br bb %select.exit329
select.exit329:
  select330.phi = phi [bb %select.else328, i1 %334, bb %select.then327, i1 1]
  br i1 %select330.phi, bb %select.then336, bb %select.else337
select.then336:
  br bb %select.exit338
select.else337:
  341 = call i32 g(i32 9, i32 %i.phi674)
  342 = icmp ne i32 %341, i32 0
  343 = icmp ne i1 %342, i1 0
  br bb %select.exit338
select.exit338:
  select339.phi = phi [bb %select.else337, i1 %343, bb %select.then336, i1 1]
  br i1 %select339.phi, bb %select.then345, bb %select.else346
select.then345:
  br bb %select.exit347
select.else346:
  350 = call i32 g(i32 10, i32 %i.phi674)
  351 = icmp ne i32 %350, i32 0
  352 = icmp ne i1 %351, i1 0
  br bb %select.exit347
select.exit347:
  select348.phi = phi [bb %select.else346, i1 %352, bb %select.then345, i1 1]
  br i1 %select348.phi, bb %select.then354, bb %select.else355
select.then354:
  br bb %select.exit356
select.else355:
  359 = call i32 g(i32 11, i32 %i.phi674)
  360 = icmp ne i32 %359, i32 0
  361 = icmp ne i1 %360, i1 0
  br bb %select.exit356
select.exit356:
  select357.phi = phi [bb %select.else355, i1 %361, bb %select.then354, i1 1]
  br i1 %select357.phi, bb %select.then363, bb %select.else364
select.then363:
  br bb %select.exit365
select.else364:
  368 = call i32 g(i32 12, i32 %i.phi674)
  369 = icmp ne i32 %368, i32 0
  370 = icmp ne i1 %369, i1 0
  br bb %select.exit365
select.exit365:
  select366.phi = phi [bb %select.else364, i1 %370, bb %select.then363, i1 1]
  br i1 %select366.phi, bb %select.then372, bb %select.else373
select.then372:
  br bb %select.exit374
select.else373:
  377 = call i32 g(i32 13, i32 %i.phi674)
  378 = icmp ne i32 %377, i32 0
  379 = icmp ne i1 %378, i1 0
  br bb %select.exit374
select.exit374:
  select375.phi = phi [bb %select.else373, i1 %379, bb %select.then372, i1 1]
  br i1 %select375.phi, bb %select.then381, bb %select.else382
select.then381:
  br bb %select.exit383
select.else382:
  386 = call i32 g(i32 14, i32 %i.phi674)
  387 = icmp ne i32 %386, i32 0
  388 = icmp ne i1 %387, i1 0
  br bb %select.exit383
select.exit383:
  select384.phi = phi [bb %select.else382, i1 %388, bb %select.then381, i1 1]
  br i1 %select384.phi, bb %select.then390, bb %select.else391
select.then390:
  br bb %select.exit392
select.else391:
  395 = call i32 g(i32 15, i32 %i.phi674)
  396 = icmp ne i32 %395, i32 0
  397 = icmp ne i1 %396, i1 0
  br bb %select.exit392
select.exit392:
  select393.phi = phi [bb %select.else391, i1 %397, bb %select.then390, i1 1]
  br i1 %select393.phi, bb %select.then399, bb %select.else400
select.then399:
  br bb %select.exit401
select.else400:
  404 = call i32 g(i32 16, i32 %i.phi674)
  405 = icmp ne i32 %404, i32 0
  406 = icmp ne i1 %405, i1 0
  br bb %select.exit401
select.exit401:
  select402.phi = phi [bb %select.else400, i1 %406, bb %select.then399, i1 1]
  br i1 %select402.phi, bb %select.then408, bb %select.else409
select.then408:
  br bb %select.exit410
select.else409:
  413 = call i32 g(i32 17, i32 %i.phi674)
  414 = icmp ne i32 %413, i32 0
  415 = icmp ne i1 %414, i1 0
  br bb %select.exit410
select.exit410:
  select411.phi = phi [bb %select.else409, i1 %415, bb %select.then408, i1 1]
  br i1 %select411.phi, bb %select.then417, bb %select.else418
select.then417:
  br bb %select.exit419
select.else418:
  422 = call i32 g(i32 18, i32 %i.phi674)
  423 = icmp ne i32 %422, i32 0
  424 = icmp ne i1 %423, i1 0
  br bb %select.exit419
select.exit419:
  select420.phi = phi [bb %select.else418, i1 %424, bb %select.then417, i1 1]
  br i1 %select420.phi, bb %select.then426, bb %select.else427
select.then426:
  br bb %select.exit428
select.else427:
  431 = call i32 g(i32 19, i32 %i.phi674)
  432 = icmp ne i32 %431, i32 0
  433 = icmp ne i1 %432, i1 0
  br bb %select.exit428
select.exit428:
  select429.phi = phi [bb %select.else427, i1 %433, bb %select.then426, i1 1]
  br i1 %select429.phi, bb %then435, bb %if.exit436
then435:
  br bb %if.exit436
if.exit436:
  438 = add i32 %i.phi674, i32 1
  br bb %while.cond255
while.cond439:
  i.phi = phi [bb %while.exit257, i32 1, bb %while.body440, i32 %456]
  443 = icmp slt i32 %i.phi, i32 20
  br i1 %443, bb %select.then444, bb %select.else445
while.body440:
  456 = add i32 %i.phi, i32 1
  br bb %while.cond439
while.exit441:
  458 = call i32 h(i32 0)
  459 = icmp ne i32 %458, i32 0
  br i1 %459, bb %select.then460, bb %select.else461
select.then444:
  449 = sub i32 %i.phi, i32 1
  451 = call i32 f(i32 %449, i32 %i.phi)
  452 = icmp ne i32 %451, i32 0
  br bb %select.exit446
select.else445:
  br bb %select.exit446
select.exit446:
  select447.phi = phi [bb %select.else445, i1 0, bb %select.then444, i1 %452]
  454 = icmp ne i1 %select447.phi, i1 0
  br i1 %454, bb %while.body440, bb %while.exit441
select.then460:
  464 = call i32 h(i32 1)
  465 = icmp ne i32 %464, i32 0
  br bb %select.exit462
select.else461:
  br bb %select.exit462
select.exit462:
  select463.phi = phi [bb %select.else461, i1 0, bb %select.then460, i1 %465]
  br i1 %select463.phi, bb %select.then467, bb %select.else468
select.then467:
  br bb %select.exit469
select.else468:
  471 = call i32 h(i32 2)
  472 = icmp ne i32 %471, i32 0
  473 =  i1 %472, i1 1
  474 = zext i1 %473 to i32
  475 = icmp ne i32 %474, i32 0
  476 = icmp ne i1 %475, i1 0
  br bb %select.exit469
select.exit469:
  select470.phi = phi [bb %select.else468, i1 %476, bb %select.then467, i1 1]
  br i1 %select470.phi, bb %select.then478, bb %select.else479
select.then478:
  br bb %select.exit480
select.else479:
  482 = call i32 h(i32 3)
  483 = icmp ne i32 %482, i32 0
  484 = icmp ne i1 %483, i1 0
  br bb %select.exit480
select.exit480:
  select481.phi = phi [bb %select.else479, i1 %484, bb %select.then478, i1 1]
  br i1 %select481.phi, bb %then486, bb %if.exit487
then486:
  br bb %if.exit487
if.exit487:
  491 = call i32 h(i32 4)
  492 = icmp ne i32 %491, i32 0
  493 =  i1 %492, i1 1
  494 = zext i1 %493 to i32
  495 = icmp ne i32 %494, i32 0
  br i1 %495, bb %select.then496, bb %select.else497
select.then496:
  br bb %select.exit498
select.else497:
  500 = call i32 h(i32 5)
  501 = icmp ne i32 %500, i32 0
  br i1 %501, bb %select.then502, bb %select.else503
select.exit498:
  select499.phi = phi [bb %select.exit514, i1 %519, bb %select.then496, i1 1]
  br i1 %select499.phi, bb %select.then521, bb %select.else522
select.then502:
  506 = call i32 h(i32 6)
  507 = icmp ne i32 %506, i32 0
  508 =  i1 %507, i1 1
  509 = zext i1 %508 to i32
  510 = icmp ne i32 %509, i32 0
  br bb %select.exit504
select.else503:
  br bb %select.exit504
select.exit504:
  select505.phi = phi [bb %select.else503, i1 0, bb %select.then502, i1 %510]
  br i1 %select505.phi, bb %select.then512, bb %select.else513
select.then512:
  516 = call i32 h(i32 7)
  517 = icmp ne i32 %516, i32 0
  br bb %select.exit514
select.else513:
  br bb %select.exit514
select.exit514:
  select515.phi = phi [bb %select.else513, i1 0, bb %select.then512, i1 %517]
  519 = icmp ne i1 %select515.phi, i1 0
  br bb %select.exit498
select.then521:
  br bb %select.exit523
select.else522:
  525 = call i32 h(i32 8)
  526 = icmp ne i32 %525, i32 0
  527 =  i1 %526, i1 1
  528 = zext i1 %527 to i32
  529 = icmp ne i32 %528, i32 0
  530 = icmp ne i1 %529, i1 0
  br bb %select.exit523
select.exit523:
  select524.phi = phi [bb %select.else522, i1 %530, bb %select.then521, i1 1]
  br i1 %select524.phi, bb %then532, bb %if.exit533
then532:
  br bb %if.exit533
if.exit533:
  537 = call i32 h(i32 9)
  538 = icmp ne i32 %537, i32 0
  br i1 %538, bb %select.then539, bb %select.else540
select.then539:
  543 = call i32 h(i32 10)
  544 = icmp ne i32 %543, i32 0
  545 =  i1 %544, i1 1
  546 = zext i1 %545 to i32
  547 = icmp ne i32 %546, i32 0
  br bb %select.exit541
select.else540:
  br bb %select.exit541
select.exit541:
  select542.phi = phi [bb %select.else540, i1 0, bb %select.then539, i1 %547]
  br i1 %select542.phi, bb %select.then549, bb %select.else550
select.then549:
  br bb %select.exit551
select.else550:
  553 = call i32 h(i32 11)
  554 = icmp ne i32 %553, i32 0
  555 =  i1 %554, i1 1
  556 = zext i1 %555 to i32
  557 = icmp ne i32 %556, i32 0
  558 = icmp ne i1 %557, i1 0
  br bb %select.exit551
select.exit551:
  select552.phi = phi [bb %select.else550, i1 %558, bb %select.then549, i1 1]
  br i1 %select552.phi, bb %select.then560, bb %select.else561
select.then560:
  br bb %select.exit562
select.else561:
  564 = call i32 h(i32 12)
  565 = icmp ne i32 %564, i32 0
  566 =  i1 %565, i1 1
  567 = zext i1 %566 to i32
  568 = icmp ne i32 %567, i32 0
  569 = icmp ne i1 %568, i1 0
  br bb %select.exit562
select.exit562:
  select563.phi = phi [bb %select.else561, i1 %569, bb %select.then560, i1 1]
  br i1 %select563.phi, bb %select.then571, bb %select.else572
select.then571:
  br bb %select.exit573
select.else572:
  575 = call i32 h(i32 13)
  576 = icmp ne i32 %575, i32 0
  577 =  i1 %576, i1 1
  578 = zext i1 %577 to i32
  579 = icmp ne i32 %578, i32 0
  580 = icmp ne i1 %579, i1 0
  br bb %select.exit573
select.exit573:
  select574.phi = phi [bb %select.else572, i1 %580, bb %select.then571, i1 1]
  br i1 %select574.phi, bb %select.then582, bb %select.else583
select.then582:
  br bb %select.exit584
select.else583:
  586 = call i32 h(i32 14)
  587 = icmp ne i32 %586, i32 0
  br i1 %587, bb %select.then588, bb %select.else589
select.exit584:
  select585.phi = phi [bb %select.exit590, i1 %595, bb %select.then582, i1 1]
  br i1 %select585.phi, bb %then597, bb %if.exit598
select.then588:
  592 = call i32 h(i32 15)
  593 = icmp ne i32 %592, i32 0
  br bb %select.exit590
select.else589:
  br bb %select.exit590
select.exit590:
  select591.phi = phi [bb %select.else589, i1 0, bb %select.then588, i1 %593]
  595 = icmp ne i1 %select591.phi, i1 0
  br bb %select.exit584
then597:
  br bb %if.exit598
if.exit598:
  602 = call i32 h(i32 0)
  603 = icmp ne i32 %602, i32 0
  br i1 %603, bb %select.then604, bb %select.else605
select.then604:
  608 = call i32 h(i32 2)
  609 = icmp ne i32 %608, i32 0
  br bb %select.exit606
select.else605:
  br bb %select.exit606
select.exit606:
  select607.phi = phi [bb %select.else605, i1 0, bb %select.then604, i1 %609]
  br i1 %select607.phi, bb %select.then611, bb %select.else612
select.then611:
  615 = call i32 h(i32 3)
  616 = icmp ne i32 %615, i32 0
  617 =  i1 %616, i1 1
  618 = zext i1 %617 to i32
  619 = icmp ne i32 %618, i32 0
  br bb %select.exit613
select.else612:
  br bb %select.exit613
select.exit613:
  select614.phi = phi [bb %select.else612, i1 0, bb %select.then611, i1 %619]
  br i1 %select614.phi, bb %select.then621, bb %select.else622
select.then621:
  625 = call i32 h(i32 4)
  626 = icmp ne i32 %625, i32 0
  627 =  i1 %626, i1 1
  628 = zext i1 %627 to i32
  629 = icmp ne i32 %628, i32 0
  br bb %select.exit623
select.else622:
  br bb %select.exit623
select.exit623:
  select624.phi = phi [bb %select.else622, i1 0, bb %select.then621, i1 %629]
  br i1 %select624.phi, bb %select.then631, bb %select.else632
select.then631:
  br bb %select.exit633
select.else632:
  635 = call i32 h(i32 5)
  636 = icmp ne i32 %635, i32 0
  637 = icmp ne i1 %636, i1 0
  br bb %select.exit633
select.exit633:
  select634.phi = phi [bb %select.else632, i1 %637, bb %select.then631, i1 1]
  br i1 %select634.phi, bb %select.then639, bb %select.else640
select.then639:
  br bb %select.exit641
select.else640:
  643 = call i32 h(i32 6)
  644 = icmp ne i32 %643, i32 0
  br i1 %644, bb %select.then645, bb %select.else646
select.exit641:
  select642.phi = phi [bb %select.exit647, i1 %655, bb %select.then639, i1 1]
  br i1 %select642.phi, bb %select.then657, bb %select.else658
select.then645:
  649 = call i32 h(i32 7)
  650 = icmp ne i32 %649, i32 0
  651 =  i1 %650, i1 1
  652 = zext i1 %651 to i32
  653 = icmp ne i32 %652, i32 0
  br bb %select.exit647
select.else646:
  br bb %select.exit647
select.exit647:
  select648.phi = phi [bb %select.else646, i1 0, bb %select.then645, i1 %653]
  655 = icmp ne i1 %select648.phi, i1 0
  br bb %select.exit641
select.then657:
  br bb %select.exit659
select.else658:
  661 = call i32 h(i32 8)
  662 = icmp ne i32 %661, i32 0
  663 = icmp ne i1 %662, i1 0
  br bb %select.exit659
select.exit659:
  select660.phi = phi [bb %select.else658, i1 %663, bb %select.then657, i1 1]
  br i1 %select660.phi, bb %then665, bb %if.exit666
then665:
  br bb %if.exit666
if.exit666:
  ans.phi = phi [bb %select.exit659, i32 0, bb %then665, i32 1]
  sum.load667 = load i32 from ptr @sum
  669 = add i32 %sum.load667, i32 %ans.phi
  call void putint(i32 %669)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

external void putarray(i32 , ptr )

i32 f(i32 i, i32 j) {
entry:
  sum.load = load i32 from ptr @sum
  4 = add i32 %sum.load, i32 1
  store i32 %4 to ptr @sum
  7 = icmp sge i32 %i, i32 %j
  br i1 %7, bb %select.then, bb %select.else
select.then:
  br bb %select.exit
select.else:
  13 = icmp sge i32 %i, i32 20
  14 = icmp ne i1 %13, i1 0
  br bb %select.exit
select.exit:
  select.phi = phi [bb %select.else, i1 %14, bb %select.then, i1 1]
  br i1 %select.phi, bb %then, bb %if.exit
then:
  ret i32 0
if.exit:
  19 = mul i32 %i, i32 4
  20 = ptradd ptr @array, i32 %19
  store i32 1 to ptr %20
  22 = icmp eq i32 %i, i32 0
  br i1 %22, bb %then23, bb %else
then23:
  27 = ptradd ptr @array, i32 0
  27.load = load i32 from ptr %27
  ret i32 %27.load
if.exit24:
  unreachable
else:
  30 = sub i32 %i, i32 1
  31 = mul i32 %30, i32 4
  32 = ptradd ptr @array, i32 %31
  32.load = load i32 from ptr %32
  ret i32 %32.load
}


