global ptr B init with 2010 x i32 zeros
global ptr C init with 2010 x i32 zeros
global ptr A init with 4040100 x i32 zeros
immutable global ptr N init with i32 2010
global ptr x init with i32 0
external i32 getint()

external i32 getch()

external void putint(i32 )

external i32 getarray(ptr )

external i32 getfarray(ptr )

i32 main() {
entry81:
  83 = call i32 getint()
  br bb %while.cond86
while.cond86:
  i84.phi142 = phi [bb %entry81, i32 0, bb %while.exit95, i32 %110]
  91 = icmp slt i32 %i84.phi142, i32 %83
  br i1 %91, bb %while.body87, bb %while.exit88
while.body87:
  br bb %while.cond93
while.exit88:
  br bb %while.cond111
while.cond93:
  j85.phi = phi [bb %while.body87, i32 0, bb %while.body94, i32 %108]
  98 = icmp slt i32 %j85.phi, i32 %83
  br i1 %98, bb %while.body94, bb %while.exit95
while.body94:
  101 = mul i32 %i84.phi142, i32 8040
  102 = ptradd ptr @A, i32 %101
  104 = mul i32 %j85.phi, i32 4
  105 = ptradd ptr %102, i32 %104
  106 = call i32 getint()
  store i32 %106 to ptr %105
  108 = add i32 %j85.phi, i32 1
  br bb %while.cond93
while.exit95:
  110 = add i32 %i84.phi142, i32 1
  br bb %while.cond86
while.cond111:
  i84.phi141 = phi [bb %while.exit88, i32 0, bb %while.body112, i32 %123]
  116 = icmp slt i32 %i84.phi141, i32 %83
  br i1 %116, bb %while.body112, bb %while.exit113
while.body112:
  119 = mul i32 %i84.phi141, i32 4
  120 = ptradd ptr @B, i32 %119
  121 = call i32 getint()
  store i32 %121 to ptr %120
  123 = add i32 %i84.phi141, i32 1
  br bb %while.cond111
while.exit113:
  call void _sysy_starttime(i32 59)
  br bb %while.cond125
while.cond125:
  i84.phi = phi [bb %while.exit113, i32 0, bb %while.body126, i32 %136]
  129 = icmp slt i32 %i84.phi, i32 50
  br i1 %129, bb %while.body126, bb %while.exit127
while.body126:
  call void mv(i32 %83, ptr @A, ptr @B, ptr @C)
  call void mv(i32 %83, ptr @A, ptr @C, ptr @B)
  136 = add i32 %i84.phi, i32 1
  br bb %while.cond125
while.exit127:
  call void _sysy_stoptime(i32 67)
  call void putarray(i32 %83, ptr @C)
  ret i32 0
}

external float getfloat()

external void putfloat(float )

external void putch(i32 )

external void _sysy_stoptime(i32 )

external void putarray(i32 , ptr )

external void _sysy_starttime(i32 )

external void putfarray(i32 , ptr )

void mv(i32 n, ptr A, ptr b, ptr res) {
entry:
  br bb %while.cond
while.cond:
  i.phi152 = phi [bb %entry, i32 0, bb %while.body, i32 %17]
  11 = icmp slt i32 %i.phi152, i32 %n
  br i1 %11, bb %while.body, bb %while.exit
while.body:
  14 = mul i32 %i.phi152, i32 4
  15 = ptradd ptr %res, i32 %14
  store i32 0 to ptr %15
  17 = add i32 %i.phi152, i32 1
  br bb %while.cond
while.exit:
  br bb %while.cond18
while.cond18:
  i.phi = phi [bb %while.exit, i32 0, bb %while.exit27, i32 %80]
  y.phi150 = phi [bb %while.exit, i32 0, bb %while.exit27, i32 %y.phi149]
  x.phi147 = phi [bb %while.exit, i32 11, bb %while.exit27, i32 %x.phi146]
  23 = icmp slt i32 %i.phi, i32 %n
  br i1 %23, bb %while.body19, bb %while.exit20
while.body19:
  br bb %while.cond25
while.exit20:
  ret 
while.cond25:
  j.phi = phi [bb %while.body19, i32 0, bb %if.exit, i32 %78]
  y.phi149 = phi [bb %while.body19, i32 %y.phi150, bb %if.exit, i32 %y.phi]
  x.phi146 = phi [bb %while.body19, i32 %x.phi147, bb %if.exit, i32 %x.phi]
  30 = icmp slt i32 %j.phi, i32 %n
  br i1 %30, bb %while.body26, bb %while.exit27
while.body26:
  33 = mul i32 %i.phi, i32 8040
  34 = ptradd ptr %A, i32 %33
  36 = mul i32 %j.phi, i32 4
  37 = ptradd ptr %34, i32 %36
  37.load = load i32 from ptr %37
  39 = icmp eq i32 %37.load, i32 0
  br i1 %39, bb %then, bb %else
while.exit27:
  80 = add i32 %i.phi, i32 1
  br bb %while.cond18
then:
  45 = mul i32 %i.phi, i32 4
  46 = ptradd ptr %b, i32 %45
  46.load = load i32 from ptr %46
  48 = mul i32 %x.phi146, i32 %46.load
  51 = ptradd ptr %b, i32 %36
  51.load = load i32 from ptr %51
  53 = add i32 %48, i32 %51.load
  56 = sub i32 %y.phi149, i32 %53
  br bb %if.exit
if.exit:
  y.phi = phi [bb %else, i32 %y.phi149, bb %then, i32 %56]
  x.phi = phi [bb %else, i32 %x.phi146, bb %then, i32 %53]
  78 = add i32 %j.phi, i32 1
  br bb %while.cond25
else:
  58 = mul i32 %i.phi, i32 4
  59 = ptradd ptr %res, i32 %58
  62.load = load i32 from ptr %59
  69.load = load i32 from ptr %37
  73 = ptradd ptr %b, i32 %36
  73.load = load i32 from ptr %73
  75 = mul i32 %69.load, i32 %73.load
  76 = add i32 %62.load, i32 %75
  store i32 %76 to ptr %59
  br bb %if.exit
}


