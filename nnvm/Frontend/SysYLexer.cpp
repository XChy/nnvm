
// Generated from ./nnvm/Frontend/SysYLexer.g4 by ANTLR 4.12.0


#include "SysYLexer.h"


using namespace antlr4;

using namespace nnvm;


using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "CONST", "INT", "FLOAT", "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", 
      "CONTINUE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "MOD", "ASSIGN", 
      "EQ", "NEQ", "LT", "GT", "LE", "GE", "NOT", "AND", "OR", "BITAND", 
      "BITOR", "BITXOR", "BITNOT", "BITSHL", "BITSHR", "L_PAREN", "R_PAREN", 
      "L_BRACE", "R_BRACE", "L_BRACKT", "R_BRACKT", "COMMA", "SEMICOLON", 
      "IDENT", "INTEGER_CONST", "FLOAT_CONST", "DecimalFloatingConstant", 
      "HexadecimalFloatingConstant", "FractionalConstant", "ExponentPart", 
      "Sign", "DigitSequence", "HexadecimalDigit", "HexadecimalPrefix", 
      "HexadecimalFractionalConstant", "HexadecimalDigitSequence", "BinaryExponentPart", 
      "DIGIT", "WS", "LINE_COMMENT", "MULTILINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "'int'", "'float'", "'void'", "'if'", "'else'", "'while'", 
      "'for'", "'break'", "'continue'", "'return'", "'+'", "'-'", "'*'", 
      "'/'", "'%'", "'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
      "'!'", "'&&'", "'||'", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", 
      "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'"
    },
    std::vector<std::string>{
      "", "CONST", "INT", "FLOAT", "VOID", "IF", "ELSE", "WHILE", "FOR", 
      "BREAK", "CONTINUE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
      "ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", "NOT", "AND", "OR", 
      "BITAND", "BITOR", "BITXOR", "BITNOT", "BITSHL", "BITSHR", "L_PAREN", 
      "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKT", "R_BRACKT", "COMMA", 
      "SEMICOLON", "IDENT", "INTEGER_CONST", "FLOAT_CONST", "DecimalFloatingConstant", 
      "HexadecimalFloatingConstant", "WS", "LINE_COMMENT", "MULTILINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,48,403,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
  	1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
  	9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
  	12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,
  	18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,
  	24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
  	30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,
  	36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,5,40,247,8,40,10,40,12,
  	40,250,9,40,1,41,1,41,1,41,5,41,255,8,41,10,41,12,41,258,9,41,1,41,1,
  	41,5,41,262,8,41,10,41,12,41,265,9,41,1,41,1,41,1,41,1,41,3,41,271,8,
  	41,1,41,4,41,274,8,41,11,41,12,41,275,3,41,278,8,41,1,42,1,42,3,42,282,
  	8,42,1,43,1,43,3,43,286,8,43,1,43,1,43,1,43,3,43,291,8,43,1,44,1,44,1,
  	44,1,44,1,44,1,44,1,44,1,44,3,44,301,8,44,1,45,3,45,304,8,45,1,45,1,45,
  	1,45,1,45,1,45,3,45,311,8,45,1,46,1,46,3,46,315,8,46,1,46,1,46,1,46,3,
  	46,320,8,46,1,46,3,46,323,8,46,1,47,1,47,1,48,4,48,328,8,48,11,48,12,
  	48,329,1,49,1,49,1,50,1,50,1,50,1,50,3,50,338,8,50,1,51,3,51,341,8,51,
  	1,51,1,51,1,51,1,51,1,51,3,51,348,8,51,1,52,4,52,351,8,52,11,52,12,52,
  	352,1,53,1,53,3,53,357,8,53,1,53,1,53,1,53,3,53,362,8,53,1,53,3,53,365,
  	8,53,1,54,1,54,1,55,4,55,370,8,55,11,55,12,55,371,1,55,1,55,1,56,1,56,
  	1,56,1,56,5,56,380,8,56,10,56,12,56,383,9,56,1,56,3,56,386,8,56,1,56,
  	1,56,1,57,1,57,1,57,1,57,5,57,394,8,57,10,57,12,57,397,9,57,1,57,1,57,
  	1,57,1,57,1,57,2,381,395,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
  	19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
  	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
  	65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
  	44,89,45,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,46,
  	113,47,115,48,1,0,9,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
  	1,0,49,57,1,0,48,57,1,0,48,55,3,0,48,57,65,70,97,102,2,0,43,43,45,45,
  	3,0,9,10,13,13,32,32,1,1,10,10,420,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
  	0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
  	1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
  	0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
  	0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
  	1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
  	0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
  	0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
  	1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,111,1,0,
  	0,0,0,113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,123,1,0,0,0,5,127,1,0,
  	0,0,7,133,1,0,0,0,9,138,1,0,0,0,11,141,1,0,0,0,13,146,1,0,0,0,15,152,
  	1,0,0,0,17,156,1,0,0,0,19,162,1,0,0,0,21,171,1,0,0,0,23,178,1,0,0,0,25,
  	180,1,0,0,0,27,182,1,0,0,0,29,184,1,0,0,0,31,186,1,0,0,0,33,188,1,0,0,
  	0,35,190,1,0,0,0,37,193,1,0,0,0,39,196,1,0,0,0,41,198,1,0,0,0,43,200,
  	1,0,0,0,45,203,1,0,0,0,47,206,1,0,0,0,49,208,1,0,0,0,51,211,1,0,0,0,53,
  	214,1,0,0,0,55,216,1,0,0,0,57,218,1,0,0,0,59,220,1,0,0,0,61,222,1,0,0,
  	0,63,225,1,0,0,0,65,228,1,0,0,0,67,230,1,0,0,0,69,232,1,0,0,0,71,234,
  	1,0,0,0,73,236,1,0,0,0,75,238,1,0,0,0,77,240,1,0,0,0,79,242,1,0,0,0,81,
  	244,1,0,0,0,83,277,1,0,0,0,85,281,1,0,0,0,87,290,1,0,0,0,89,300,1,0,0,
  	0,91,310,1,0,0,0,93,322,1,0,0,0,95,324,1,0,0,0,97,327,1,0,0,0,99,331,
  	1,0,0,0,101,337,1,0,0,0,103,347,1,0,0,0,105,350,1,0,0,0,107,364,1,0,0,
  	0,109,366,1,0,0,0,111,369,1,0,0,0,113,375,1,0,0,0,115,389,1,0,0,0,117,
  	118,5,99,0,0,118,119,5,111,0,0,119,120,5,110,0,0,120,121,5,115,0,0,121,
  	122,5,116,0,0,122,2,1,0,0,0,123,124,5,105,0,0,124,125,5,110,0,0,125,126,
  	5,116,0,0,126,4,1,0,0,0,127,128,5,102,0,0,128,129,5,108,0,0,129,130,5,
  	111,0,0,130,131,5,97,0,0,131,132,5,116,0,0,132,6,1,0,0,0,133,134,5,118,
  	0,0,134,135,5,111,0,0,135,136,5,105,0,0,136,137,5,100,0,0,137,8,1,0,0,
  	0,138,139,5,105,0,0,139,140,5,102,0,0,140,10,1,0,0,0,141,142,5,101,0,
  	0,142,143,5,108,0,0,143,144,5,115,0,0,144,145,5,101,0,0,145,12,1,0,0,
  	0,146,147,5,119,0,0,147,148,5,104,0,0,148,149,5,105,0,0,149,150,5,108,
  	0,0,150,151,5,101,0,0,151,14,1,0,0,0,152,153,5,102,0,0,153,154,5,111,
  	0,0,154,155,5,114,0,0,155,16,1,0,0,0,156,157,5,98,0,0,157,158,5,114,0,
  	0,158,159,5,101,0,0,159,160,5,97,0,0,160,161,5,107,0,0,161,18,1,0,0,0,
  	162,163,5,99,0,0,163,164,5,111,0,0,164,165,5,110,0,0,165,166,5,116,0,
  	0,166,167,5,105,0,0,167,168,5,110,0,0,168,169,5,117,0,0,169,170,5,101,
  	0,0,170,20,1,0,0,0,171,172,5,114,0,0,172,173,5,101,0,0,173,174,5,116,
  	0,0,174,175,5,117,0,0,175,176,5,114,0,0,176,177,5,110,0,0,177,22,1,0,
  	0,0,178,179,5,43,0,0,179,24,1,0,0,0,180,181,5,45,0,0,181,26,1,0,0,0,182,
  	183,5,42,0,0,183,28,1,0,0,0,184,185,5,47,0,0,185,30,1,0,0,0,186,187,5,
  	37,0,0,187,32,1,0,0,0,188,189,5,61,0,0,189,34,1,0,0,0,190,191,5,61,0,
  	0,191,192,5,61,0,0,192,36,1,0,0,0,193,194,5,33,0,0,194,195,5,61,0,0,195,
  	38,1,0,0,0,196,197,5,60,0,0,197,40,1,0,0,0,198,199,5,62,0,0,199,42,1,
  	0,0,0,200,201,5,60,0,0,201,202,5,61,0,0,202,44,1,0,0,0,203,204,5,62,0,
  	0,204,205,5,61,0,0,205,46,1,0,0,0,206,207,5,33,0,0,207,48,1,0,0,0,208,
  	209,5,38,0,0,209,210,5,38,0,0,210,50,1,0,0,0,211,212,5,124,0,0,212,213,
  	5,124,0,0,213,52,1,0,0,0,214,215,5,38,0,0,215,54,1,0,0,0,216,217,5,124,
  	0,0,217,56,1,0,0,0,218,219,5,94,0,0,219,58,1,0,0,0,220,221,5,126,0,0,
  	221,60,1,0,0,0,222,223,5,60,0,0,223,224,5,60,0,0,224,62,1,0,0,0,225,226,
  	5,62,0,0,226,227,5,62,0,0,227,64,1,0,0,0,228,229,5,40,0,0,229,66,1,0,
  	0,0,230,231,5,41,0,0,231,68,1,0,0,0,232,233,5,123,0,0,233,70,1,0,0,0,
  	234,235,5,125,0,0,235,72,1,0,0,0,236,237,5,91,0,0,237,74,1,0,0,0,238,
  	239,5,93,0,0,239,76,1,0,0,0,240,241,5,44,0,0,241,78,1,0,0,0,242,243,5,
  	59,0,0,243,80,1,0,0,0,244,248,7,0,0,0,245,247,7,1,0,0,246,245,1,0,0,0,
  	247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,82,1,0,0,0,250,248,
  	1,0,0,0,251,278,5,48,0,0,252,256,7,2,0,0,253,255,7,3,0,0,254,253,1,0,
  	0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,278,1,0,0,0,258,
  	256,1,0,0,0,259,263,5,48,0,0,260,262,7,4,0,0,261,260,1,0,0,0,262,265,
  	1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,278,1,0,0,0,265,263,1,0,0,
  	0,266,267,5,48,0,0,267,271,5,120,0,0,268,269,5,48,0,0,269,271,5,88,0,
  	0,270,266,1,0,0,0,270,268,1,0,0,0,271,273,1,0,0,0,272,274,7,5,0,0,273,
  	272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,
  	0,0,0,277,251,1,0,0,0,277,252,1,0,0,0,277,259,1,0,0,0,277,270,1,0,0,0,
  	278,84,1,0,0,0,279,282,3,87,43,0,280,282,3,89,44,0,281,279,1,0,0,0,281,
  	280,1,0,0,0,282,86,1,0,0,0,283,285,3,91,45,0,284,286,3,93,46,0,285,284,
  	1,0,0,0,285,286,1,0,0,0,286,291,1,0,0,0,287,288,3,97,48,0,288,289,3,93,
  	46,0,289,291,1,0,0,0,290,283,1,0,0,0,290,287,1,0,0,0,291,88,1,0,0,0,292,
  	293,3,101,50,0,293,294,3,103,51,0,294,295,3,107,53,0,295,301,1,0,0,0,
  	296,297,3,101,50,0,297,298,3,105,52,0,298,299,3,107,53,0,299,301,1,0,
  	0,0,300,292,1,0,0,0,300,296,1,0,0,0,301,90,1,0,0,0,302,304,3,97,48,0,
  	303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,306,5,46,0,0,306,
  	311,3,97,48,0,307,308,3,97,48,0,308,309,5,46,0,0,309,311,1,0,0,0,310,
  	303,1,0,0,0,310,307,1,0,0,0,311,92,1,0,0,0,312,314,5,101,0,0,313,315,
  	3,95,47,0,314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,323,3,97,
  	48,0,317,319,5,69,0,0,318,320,3,95,47,0,319,318,1,0,0,0,319,320,1,0,0,
  	0,320,321,1,0,0,0,321,323,3,97,48,0,322,312,1,0,0,0,322,317,1,0,0,0,323,
  	94,1,0,0,0,324,325,7,6,0,0,325,96,1,0,0,0,326,328,3,109,54,0,327,326,
  	1,0,0,0,328,329,1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,98,1,0,0,
  	0,331,332,7,5,0,0,332,100,1,0,0,0,333,334,5,48,0,0,334,338,5,120,0,0,
  	335,336,5,48,0,0,336,338,5,88,0,0,337,333,1,0,0,0,337,335,1,0,0,0,338,
  	102,1,0,0,0,339,341,3,105,52,0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,
  	1,0,0,0,342,343,5,46,0,0,343,348,3,105,52,0,344,345,3,105,52,0,345,346,
  	5,46,0,0,346,348,1,0,0,0,347,340,1,0,0,0,347,344,1,0,0,0,348,104,1,0,
  	0,0,349,351,3,99,49,0,350,349,1,0,0,0,351,352,1,0,0,0,352,350,1,0,0,0,
  	352,353,1,0,0,0,353,106,1,0,0,0,354,356,5,80,0,0,355,357,3,95,47,0,356,
  	355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,365,3,97,48,0,359,361,
  	5,112,0,0,360,362,3,95,47,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,
  	0,0,0,363,365,3,97,48,0,364,354,1,0,0,0,364,359,1,0,0,0,365,108,1,0,0,
  	0,366,367,7,3,0,0,367,110,1,0,0,0,368,370,7,7,0,0,369,368,1,0,0,0,370,
  	371,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,6,
  	55,0,0,374,112,1,0,0,0,375,376,5,47,0,0,376,377,5,47,0,0,377,381,1,0,
  	0,0,378,380,9,0,0,0,379,378,1,0,0,0,380,383,1,0,0,0,381,382,1,0,0,0,381,
  	379,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,384,386,7,8,0,0,385,384,1,
  	0,0,0,386,387,1,0,0,0,387,388,6,56,0,0,388,114,1,0,0,0,389,390,5,47,0,
  	0,390,391,5,42,0,0,391,395,1,0,0,0,392,394,9,0,0,0,393,392,1,0,0,0,394,
  	397,1,0,0,0,395,396,1,0,0,0,395,393,1,0,0,0,396,398,1,0,0,0,397,395,1,
  	0,0,0,398,399,5,42,0,0,399,400,5,47,0,0,400,401,1,0,0,0,401,402,6,57,
  	0,0,402,116,1,0,0,0,28,0,248,256,263,270,275,277,281,285,290,300,303,
  	310,314,319,322,329,337,340,347,352,356,361,364,371,381,385,395,1,6,0,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysYLexer.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
