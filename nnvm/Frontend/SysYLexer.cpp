
// Generated from ./nnvm/Frontend/SysYLexer.g4 by ANTLR 4.12.0


#include "SysYLexer.h"


using namespace antlr4;

using namespace nnvm;


using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "CONST", "INT", "FLOAT", "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", 
      "CONTINUE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "MOD", "ASSIGN", 
      "PLUS_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "SHL_ASSIGN", "SHR_ASSIGN", 
      "EQ", "NEQ", "LT", "GT", "LE", "GE", "NOT", "AND", "OR", "BITAND", 
      "BITOR", "BITXOR", "BITNOT", "BITSHL", "BITSHR", "L_PAREN", "R_PAREN", 
      "L_BRACE", "R_BRACE", "L_BRACKT", "R_BRACKT", "COMMA", "SEMICOLON", 
      "IDENT", "INTEGER_CONST", "FLOAT_CONST", "DecimalFloatingConstant", 
      "HexadecimalFloatingConstant", "FractionalConstant", "ExponentPart", 
      "Sign", "DigitSequence", "HexadecimalDigit", "HexadecimalPrefix", 
      "HexadecimalFractionalConstant", "HexadecimalDigitSequence", "BinaryExponentPart", 
      "DIGIT", "WS", "LINE_COMMENT", "MULTILINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "'int'", "'float'", "'void'", "'if'", "'else'", "'while'", 
      "'for'", "'break'", "'continue'", "'return'", "'+'", "'-'", "'*'", 
      "'/'", "'%'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
      "'|='", "'^='", "'<<='", "'>>='", "'=='", "'!='", "'<'", "'>'", "'<='", 
      "'>='", "'!'", "'&&'", "'||'", "'&'", "'|'", "'^'", "'~'", "'<<'", 
      "'>>'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'"
    },
    std::vector<std::string>{
      "", "CONST", "INT", "FLOAT", "VOID", "IF", "ELSE", "WHILE", "FOR", 
      "BREAK", "CONTINUE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
      "ASSIGN", "PLUS_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "SHL_ASSIGN", 
      "SHR_ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", "NOT", "AND", "OR", 
      "BITAND", "BITOR", "BITXOR", "BITNOT", "BITSHL", "BITSHR", "L_PAREN", 
      "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKT", "R_BRACKT", "COMMA", 
      "SEMICOLON", "IDENT", "INTEGER_CONST", "FLOAT_CONST", "DecimalFloatingConstant", 
      "HexadecimalFloatingConstant", "WS", "LINE_COMMENT", "MULTILINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,58,455,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
  	4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
  	10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
  	16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,
  	21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
  	25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
  	30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,
  	35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,
  	41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,
  	48,1,48,1,49,1,49,1,50,1,50,5,50,299,8,50,10,50,12,50,302,9,50,1,51,1,
  	51,1,51,5,51,307,8,51,10,51,12,51,310,9,51,1,51,1,51,5,51,314,8,51,10,
  	51,12,51,317,9,51,1,51,1,51,1,51,1,51,3,51,323,8,51,1,51,4,51,326,8,51,
  	11,51,12,51,327,3,51,330,8,51,1,52,1,52,3,52,334,8,52,1,53,1,53,3,53,
  	338,8,53,1,53,1,53,1,53,3,53,343,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,3,54,353,8,54,1,55,3,55,356,8,55,1,55,1,55,1,55,1,55,1,55,3,55,
  	363,8,55,1,56,1,56,3,56,367,8,56,1,56,1,56,1,56,3,56,372,8,56,1,56,3,
  	56,375,8,56,1,57,1,57,1,58,4,58,380,8,58,11,58,12,58,381,1,59,1,59,1,
  	60,1,60,1,60,1,60,3,60,390,8,60,1,61,3,61,393,8,61,1,61,1,61,1,61,1,61,
  	1,61,3,61,400,8,61,1,62,4,62,403,8,62,11,62,12,62,404,1,63,1,63,3,63,
  	409,8,63,1,63,1,63,1,63,3,63,414,8,63,1,63,3,63,417,8,63,1,64,1,64,1,
  	65,4,65,422,8,65,11,65,12,65,423,1,65,1,65,1,66,1,66,1,66,1,66,5,66,432,
  	8,66,10,66,12,66,435,9,66,1,66,3,66,438,8,66,1,66,1,66,1,67,1,67,1,67,
  	1,67,5,67,446,8,67,10,67,12,67,449,9,67,1,67,1,67,1,67,1,67,1,67,2,433,
  	447,0,68,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
  	13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
  	49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
  	36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
  	95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,0,113,0,115,
  	0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,56,133,57,135,58,1,0,
  	9,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,
  	57,1,0,48,55,3,0,48,57,65,70,97,102,2,0,43,43,45,45,3,0,9,10,13,13,32,
  	32,1,1,10,10,472,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
  	1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
  	0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
  	0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
  	1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
  	0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
  	0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
  	1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
  	0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
  	0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
  	105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
  	135,1,0,0,0,1,137,1,0,0,0,3,143,1,0,0,0,5,147,1,0,0,0,7,153,1,0,0,0,9,
  	158,1,0,0,0,11,161,1,0,0,0,13,166,1,0,0,0,15,172,1,0,0,0,17,176,1,0,0,
  	0,19,182,1,0,0,0,21,191,1,0,0,0,23,198,1,0,0,0,25,200,1,0,0,0,27,202,
  	1,0,0,0,29,204,1,0,0,0,31,206,1,0,0,0,33,208,1,0,0,0,35,210,1,0,0,0,37,
  	213,1,0,0,0,39,216,1,0,0,0,41,219,1,0,0,0,43,222,1,0,0,0,45,225,1,0,0,
  	0,47,228,1,0,0,0,49,231,1,0,0,0,51,234,1,0,0,0,53,238,1,0,0,0,55,242,
  	1,0,0,0,57,245,1,0,0,0,59,248,1,0,0,0,61,250,1,0,0,0,63,252,1,0,0,0,65,
  	255,1,0,0,0,67,258,1,0,0,0,69,260,1,0,0,0,71,263,1,0,0,0,73,266,1,0,0,
  	0,75,268,1,0,0,0,77,270,1,0,0,0,79,272,1,0,0,0,81,274,1,0,0,0,83,277,
  	1,0,0,0,85,280,1,0,0,0,87,282,1,0,0,0,89,284,1,0,0,0,91,286,1,0,0,0,93,
  	288,1,0,0,0,95,290,1,0,0,0,97,292,1,0,0,0,99,294,1,0,0,0,101,296,1,0,
  	0,0,103,329,1,0,0,0,105,333,1,0,0,0,107,342,1,0,0,0,109,352,1,0,0,0,111,
  	362,1,0,0,0,113,374,1,0,0,0,115,376,1,0,0,0,117,379,1,0,0,0,119,383,1,
  	0,0,0,121,389,1,0,0,0,123,399,1,0,0,0,125,402,1,0,0,0,127,416,1,0,0,0,
  	129,418,1,0,0,0,131,421,1,0,0,0,133,427,1,0,0,0,135,441,1,0,0,0,137,138,
  	5,99,0,0,138,139,5,111,0,0,139,140,5,110,0,0,140,141,5,115,0,0,141,142,
  	5,116,0,0,142,2,1,0,0,0,143,144,5,105,0,0,144,145,5,110,0,0,145,146,5,
  	116,0,0,146,4,1,0,0,0,147,148,5,102,0,0,148,149,5,108,0,0,149,150,5,111,
  	0,0,150,151,5,97,0,0,151,152,5,116,0,0,152,6,1,0,0,0,153,154,5,118,0,
  	0,154,155,5,111,0,0,155,156,5,105,0,0,156,157,5,100,0,0,157,8,1,0,0,0,
  	158,159,5,105,0,0,159,160,5,102,0,0,160,10,1,0,0,0,161,162,5,101,0,0,
  	162,163,5,108,0,0,163,164,5,115,0,0,164,165,5,101,0,0,165,12,1,0,0,0,
  	166,167,5,119,0,0,167,168,5,104,0,0,168,169,5,105,0,0,169,170,5,108,0,
  	0,170,171,5,101,0,0,171,14,1,0,0,0,172,173,5,102,0,0,173,174,5,111,0,
  	0,174,175,5,114,0,0,175,16,1,0,0,0,176,177,5,98,0,0,177,178,5,114,0,0,
  	178,179,5,101,0,0,179,180,5,97,0,0,180,181,5,107,0,0,181,18,1,0,0,0,182,
  	183,5,99,0,0,183,184,5,111,0,0,184,185,5,110,0,0,185,186,5,116,0,0,186,
  	187,5,105,0,0,187,188,5,110,0,0,188,189,5,117,0,0,189,190,5,101,0,0,190,
  	20,1,0,0,0,191,192,5,114,0,0,192,193,5,101,0,0,193,194,5,116,0,0,194,
  	195,5,117,0,0,195,196,5,114,0,0,196,197,5,110,0,0,197,22,1,0,0,0,198,
  	199,5,43,0,0,199,24,1,0,0,0,200,201,5,45,0,0,201,26,1,0,0,0,202,203,5,
  	42,0,0,203,28,1,0,0,0,204,205,5,47,0,0,205,30,1,0,0,0,206,207,5,37,0,
  	0,207,32,1,0,0,0,208,209,5,61,0,0,209,34,1,0,0,0,210,211,5,43,0,0,211,
  	212,5,61,0,0,212,36,1,0,0,0,213,214,5,45,0,0,214,215,5,61,0,0,215,38,
  	1,0,0,0,216,217,5,42,0,0,217,218,5,61,0,0,218,40,1,0,0,0,219,220,5,47,
  	0,0,220,221,5,61,0,0,221,42,1,0,0,0,222,223,5,37,0,0,223,224,5,61,0,0,
  	224,44,1,0,0,0,225,226,5,38,0,0,226,227,5,61,0,0,227,46,1,0,0,0,228,229,
  	5,124,0,0,229,230,5,61,0,0,230,48,1,0,0,0,231,232,5,94,0,0,232,233,5,
  	61,0,0,233,50,1,0,0,0,234,235,5,60,0,0,235,236,5,60,0,0,236,237,5,61,
  	0,0,237,52,1,0,0,0,238,239,5,62,0,0,239,240,5,62,0,0,240,241,5,61,0,0,
  	241,54,1,0,0,0,242,243,5,61,0,0,243,244,5,61,0,0,244,56,1,0,0,0,245,246,
  	5,33,0,0,246,247,5,61,0,0,247,58,1,0,0,0,248,249,5,60,0,0,249,60,1,0,
  	0,0,250,251,5,62,0,0,251,62,1,0,0,0,252,253,5,60,0,0,253,254,5,61,0,0,
  	254,64,1,0,0,0,255,256,5,62,0,0,256,257,5,61,0,0,257,66,1,0,0,0,258,259,
  	5,33,0,0,259,68,1,0,0,0,260,261,5,38,0,0,261,262,5,38,0,0,262,70,1,0,
  	0,0,263,264,5,124,0,0,264,265,5,124,0,0,265,72,1,0,0,0,266,267,5,38,0,
  	0,267,74,1,0,0,0,268,269,5,124,0,0,269,76,1,0,0,0,270,271,5,94,0,0,271,
  	78,1,0,0,0,272,273,5,126,0,0,273,80,1,0,0,0,274,275,5,60,0,0,275,276,
  	5,60,0,0,276,82,1,0,0,0,277,278,5,62,0,0,278,279,5,62,0,0,279,84,1,0,
  	0,0,280,281,5,40,0,0,281,86,1,0,0,0,282,283,5,41,0,0,283,88,1,0,0,0,284,
  	285,5,123,0,0,285,90,1,0,0,0,286,287,5,125,0,0,287,92,1,0,0,0,288,289,
  	5,91,0,0,289,94,1,0,0,0,290,291,5,93,0,0,291,96,1,0,0,0,292,293,5,44,
  	0,0,293,98,1,0,0,0,294,295,5,59,0,0,295,100,1,0,0,0,296,300,7,0,0,0,297,
  	299,7,1,0,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,
  	0,0,0,301,102,1,0,0,0,302,300,1,0,0,0,303,330,5,48,0,0,304,308,7,2,0,
  	0,305,307,7,3,0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,
  	309,1,0,0,0,309,330,1,0,0,0,310,308,1,0,0,0,311,315,5,48,0,0,312,314,
  	7,4,0,0,313,312,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,
  	0,316,330,1,0,0,0,317,315,1,0,0,0,318,319,5,48,0,0,319,323,5,120,0,0,
  	320,321,5,48,0,0,321,323,5,88,0,0,322,318,1,0,0,0,322,320,1,0,0,0,323,
  	325,1,0,0,0,324,326,7,5,0,0,325,324,1,0,0,0,326,327,1,0,0,0,327,325,1,
  	0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,303,1,0,0,0,329,304,1,0,0,0,
  	329,311,1,0,0,0,329,322,1,0,0,0,330,104,1,0,0,0,331,334,3,107,53,0,332,
  	334,3,109,54,0,333,331,1,0,0,0,333,332,1,0,0,0,334,106,1,0,0,0,335,337,
  	3,111,55,0,336,338,3,113,56,0,337,336,1,0,0,0,337,338,1,0,0,0,338,343,
  	1,0,0,0,339,340,3,117,58,0,340,341,3,113,56,0,341,343,1,0,0,0,342,335,
  	1,0,0,0,342,339,1,0,0,0,343,108,1,0,0,0,344,345,3,121,60,0,345,346,3,
  	123,61,0,346,347,3,127,63,0,347,353,1,0,0,0,348,349,3,121,60,0,349,350,
  	3,125,62,0,350,351,3,127,63,0,351,353,1,0,0,0,352,344,1,0,0,0,352,348,
  	1,0,0,0,353,110,1,0,0,0,354,356,3,117,58,0,355,354,1,0,0,0,355,356,1,
  	0,0,0,356,357,1,0,0,0,357,358,5,46,0,0,358,363,3,117,58,0,359,360,3,117,
  	58,0,360,361,5,46,0,0,361,363,1,0,0,0,362,355,1,0,0,0,362,359,1,0,0,0,
  	363,112,1,0,0,0,364,366,5,101,0,0,365,367,3,115,57,0,366,365,1,0,0,0,
  	366,367,1,0,0,0,367,368,1,0,0,0,368,375,3,117,58,0,369,371,5,69,0,0,370,
  	372,3,115,57,0,371,370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,375,
  	3,117,58,0,374,364,1,0,0,0,374,369,1,0,0,0,375,114,1,0,0,0,376,377,7,
  	6,0,0,377,116,1,0,0,0,378,380,3,129,64,0,379,378,1,0,0,0,380,381,1,0,
  	0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,118,1,0,0,0,383,384,7,5,0,0,384,
  	120,1,0,0,0,385,386,5,48,0,0,386,390,5,120,0,0,387,388,5,48,0,0,388,390,
  	5,88,0,0,389,385,1,0,0,0,389,387,1,0,0,0,390,122,1,0,0,0,391,393,3,125,
  	62,0,392,391,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,5,46,0,0,
  	395,400,3,125,62,0,396,397,3,125,62,0,397,398,5,46,0,0,398,400,1,0,0,
  	0,399,392,1,0,0,0,399,396,1,0,0,0,400,124,1,0,0,0,401,403,3,119,59,0,
  	402,401,1,0,0,0,403,404,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,126,
  	1,0,0,0,406,408,5,80,0,0,407,409,3,115,57,0,408,407,1,0,0,0,408,409,1,
  	0,0,0,409,410,1,0,0,0,410,417,3,117,58,0,411,413,5,112,0,0,412,414,3,
  	115,57,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,417,3,117,
  	58,0,416,406,1,0,0,0,416,411,1,0,0,0,417,128,1,0,0,0,418,419,7,3,0,0,
  	419,130,1,0,0,0,420,422,7,7,0,0,421,420,1,0,0,0,422,423,1,0,0,0,423,421,
  	1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,6,65,0,0,426,132,1,0,
  	0,0,427,428,5,47,0,0,428,429,5,47,0,0,429,433,1,0,0,0,430,432,9,0,0,0,
  	431,430,1,0,0,0,432,435,1,0,0,0,433,434,1,0,0,0,433,431,1,0,0,0,434,437,
  	1,0,0,0,435,433,1,0,0,0,436,438,7,8,0,0,437,436,1,0,0,0,438,439,1,0,0,
  	0,439,440,6,66,0,0,440,134,1,0,0,0,441,442,5,47,0,0,442,443,5,42,0,0,
  	443,447,1,0,0,0,444,446,9,0,0,0,445,444,1,0,0,0,446,449,1,0,0,0,447,448,
  	1,0,0,0,447,445,1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,451,5,42,
  	0,0,451,452,5,47,0,0,452,453,1,0,0,0,453,454,6,67,0,0,454,136,1,0,0,0,
  	28,0,300,308,315,322,327,329,333,337,342,352,355,362,366,371,374,381,
  	389,392,399,404,408,413,416,423,433,437,447,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysYLexer.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
