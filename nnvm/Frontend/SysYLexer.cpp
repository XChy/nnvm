
// Generated from ./nnvm/Frontend/SysYLexer.g4 by ANTLR 4.12.0


#include "SysYLexer.h"


using namespace antlr4;

using namespace nnvm;


using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "CONST", "INT", "FLOAT", "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", 
      "CONTINUE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "MOD", "ASSIGN", 
      "SELF_PLUS", "SELF_MINUS", "PLUS_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", 
      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
      "SHL_ASSIGN", "SHR_ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", "NOT", 
      "AND", "OR", "BITAND", "BITOR", "BITXOR", "BITNOT", "BITSHL", "BITSHR", 
      "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKT", "R_BRACKT", 
      "COMMA", "SEMICOLON", "IDENT", "INTEGER_CONST", "FLOAT_CONST", "FLOAT_SUFFIX", 
      "DecimalFloatingConstant", "HexadecimalFloatingConstant", "FractionalConstant", 
      "ExponentPart", "Sign", "DigitSequence", "HexadecimalDigit", "HexadecimalPrefix", 
      "HexadecimalFractionalConstant", "HexadecimalDigitSequence", "BinaryExponentPart", 
      "DIGIT", "WS", "LINE_COMMENT", "MULTILINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "'int'", "'float'", "'void'", "'if'", "'else'", "'while'", 
      "'for'", "'break'", "'continue'", "'return'", "'+'", "'-'", "'*'", 
      "'/'", "'%'", "'='", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", 
      "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'=='", "'!='", 
      "'<'", "'>'", "'<='", "'>='", "'!'", "'&&'", "'||'", "'&'", "'|'", 
      "'^'", "'~'", "'<<'", "'>>'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
      "','", "';'", "", "", "", "'f'"
    },
    std::vector<std::string>{
      "", "CONST", "INT", "FLOAT", "VOID", "IF", "ELSE", "WHILE", "FOR", 
      "BREAK", "CONTINUE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
      "ASSIGN", "SELF_PLUS", "SELF_MINUS", "PLUS_ASSIGN", "SUB_ASSIGN", 
      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
      "XOR_ASSIGN", "SHL_ASSIGN", "SHR_ASSIGN", "EQ", "NEQ", "LT", "GT", 
      "LE", "GE", "NOT", "AND", "OR", "BITAND", "BITOR", "BITXOR", "BITNOT", 
      "BITSHL", "BITSHR", "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKT", 
      "R_BRACKT", "COMMA", "SEMICOLON", "IDENT", "INTEGER_CONST", "FLOAT_CONST", 
      "FLOAT_SUFFIX", "DecimalFloatingConstant", "HexadecimalFloatingConstant", 
      "WS", "LINE_COMMENT", "MULTILINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,61,472,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
  	6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
  	1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,
  	13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
  	19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,
  	23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
  	28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,
  	33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,
  	38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,
  	44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,
  	51,1,51,1,52,1,52,5,52,311,8,52,10,52,12,52,314,9,52,1,53,1,53,1,53,5,
  	53,319,8,53,10,53,12,53,322,9,53,1,53,1,53,5,53,326,8,53,10,53,12,53,
  	329,9,53,1,53,1,53,1,53,1,53,3,53,335,8,53,1,53,4,53,338,8,53,11,53,12,
  	53,339,3,53,342,8,53,1,54,1,54,3,54,346,8,54,1,54,3,54,349,8,54,1,55,
  	1,55,1,56,1,56,3,56,355,8,56,1,56,1,56,1,56,3,56,360,8,56,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,3,57,370,8,57,1,58,3,58,373,8,58,1,58,1,58,
  	1,58,1,58,1,58,3,58,380,8,58,1,59,1,59,3,59,384,8,59,1,59,1,59,1,59,3,
  	59,389,8,59,1,59,3,59,392,8,59,1,60,1,60,1,61,4,61,397,8,61,11,61,12,
  	61,398,1,62,1,62,1,63,1,63,1,63,1,63,3,63,407,8,63,1,64,3,64,410,8,64,
  	1,64,1,64,1,64,1,64,1,64,3,64,417,8,64,1,65,4,65,420,8,65,11,65,12,65,
  	421,1,66,1,66,3,66,426,8,66,1,66,1,66,1,66,3,66,431,8,66,1,66,3,66,434,
  	8,66,1,67,1,67,1,68,4,68,439,8,68,11,68,12,68,440,1,68,1,68,1,69,1,69,
  	1,69,1,69,5,69,449,8,69,10,69,12,69,452,9,69,1,69,3,69,455,8,69,1,69,
  	1,69,1,70,1,70,1,70,1,70,5,70,463,8,70,10,70,12,70,466,9,70,1,70,1,70,
  	1,70,1,70,1,70,2,450,464,0,71,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
  	19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
  	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
  	65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
  	44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
  	55,111,56,113,57,115,58,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,
  	0,133,0,135,0,137,59,139,60,141,61,1,0,9,3,0,65,90,95,95,97,122,4,0,48,
  	57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,1,0,48,55,3,0,48,57,65,70,97,
  	102,2,0,43,43,45,45,3,0,9,10,13,13,32,32,1,1,10,10,490,0,1,1,0,0,0,0,
  	3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
  	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
  	25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
  	0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
  	0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
  	57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
  	0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
  	0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,
  	89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
  	0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,
  	0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,137,1,0,0,0,0,139,1,
  	0,0,0,0,141,1,0,0,0,1,143,1,0,0,0,3,149,1,0,0,0,5,153,1,0,0,0,7,159,1,
  	0,0,0,9,164,1,0,0,0,11,167,1,0,0,0,13,172,1,0,0,0,15,178,1,0,0,0,17,182,
  	1,0,0,0,19,188,1,0,0,0,21,197,1,0,0,0,23,204,1,0,0,0,25,206,1,0,0,0,27,
  	208,1,0,0,0,29,210,1,0,0,0,31,212,1,0,0,0,33,214,1,0,0,0,35,216,1,0,0,
  	0,37,219,1,0,0,0,39,222,1,0,0,0,41,225,1,0,0,0,43,228,1,0,0,0,45,231,
  	1,0,0,0,47,234,1,0,0,0,49,237,1,0,0,0,51,240,1,0,0,0,53,243,1,0,0,0,55,
  	246,1,0,0,0,57,250,1,0,0,0,59,254,1,0,0,0,61,257,1,0,0,0,63,260,1,0,0,
  	0,65,262,1,0,0,0,67,264,1,0,0,0,69,267,1,0,0,0,71,270,1,0,0,0,73,272,
  	1,0,0,0,75,275,1,0,0,0,77,278,1,0,0,0,79,280,1,0,0,0,81,282,1,0,0,0,83,
  	284,1,0,0,0,85,286,1,0,0,0,87,289,1,0,0,0,89,292,1,0,0,0,91,294,1,0,0,
  	0,93,296,1,0,0,0,95,298,1,0,0,0,97,300,1,0,0,0,99,302,1,0,0,0,101,304,
  	1,0,0,0,103,306,1,0,0,0,105,308,1,0,0,0,107,341,1,0,0,0,109,345,1,0,0,
  	0,111,350,1,0,0,0,113,359,1,0,0,0,115,369,1,0,0,0,117,379,1,0,0,0,119,
  	391,1,0,0,0,121,393,1,0,0,0,123,396,1,0,0,0,125,400,1,0,0,0,127,406,1,
  	0,0,0,129,416,1,0,0,0,131,419,1,0,0,0,133,433,1,0,0,0,135,435,1,0,0,0,
  	137,438,1,0,0,0,139,444,1,0,0,0,141,458,1,0,0,0,143,144,5,99,0,0,144,
  	145,5,111,0,0,145,146,5,110,0,0,146,147,5,115,0,0,147,148,5,116,0,0,148,
  	2,1,0,0,0,149,150,5,105,0,0,150,151,5,110,0,0,151,152,5,116,0,0,152,4,
  	1,0,0,0,153,154,5,102,0,0,154,155,5,108,0,0,155,156,5,111,0,0,156,157,
  	5,97,0,0,157,158,5,116,0,0,158,6,1,0,0,0,159,160,5,118,0,0,160,161,5,
  	111,0,0,161,162,5,105,0,0,162,163,5,100,0,0,163,8,1,0,0,0,164,165,5,105,
  	0,0,165,166,5,102,0,0,166,10,1,0,0,0,167,168,5,101,0,0,168,169,5,108,
  	0,0,169,170,5,115,0,0,170,171,5,101,0,0,171,12,1,0,0,0,172,173,5,119,
  	0,0,173,174,5,104,0,0,174,175,5,105,0,0,175,176,5,108,0,0,176,177,5,101,
  	0,0,177,14,1,0,0,0,178,179,5,102,0,0,179,180,5,111,0,0,180,181,5,114,
  	0,0,181,16,1,0,0,0,182,183,5,98,0,0,183,184,5,114,0,0,184,185,5,101,0,
  	0,185,186,5,97,0,0,186,187,5,107,0,0,187,18,1,0,0,0,188,189,5,99,0,0,
  	189,190,5,111,0,0,190,191,5,110,0,0,191,192,5,116,0,0,192,193,5,105,0,
  	0,193,194,5,110,0,0,194,195,5,117,0,0,195,196,5,101,0,0,196,20,1,0,0,
  	0,197,198,5,114,0,0,198,199,5,101,0,0,199,200,5,116,0,0,200,201,5,117,
  	0,0,201,202,5,114,0,0,202,203,5,110,0,0,203,22,1,0,0,0,204,205,5,43,0,
  	0,205,24,1,0,0,0,206,207,5,45,0,0,207,26,1,0,0,0,208,209,5,42,0,0,209,
  	28,1,0,0,0,210,211,5,47,0,0,211,30,1,0,0,0,212,213,5,37,0,0,213,32,1,
  	0,0,0,214,215,5,61,0,0,215,34,1,0,0,0,216,217,5,43,0,0,217,218,5,43,0,
  	0,218,36,1,0,0,0,219,220,5,45,0,0,220,221,5,45,0,0,221,38,1,0,0,0,222,
  	223,5,43,0,0,223,224,5,61,0,0,224,40,1,0,0,0,225,226,5,45,0,0,226,227,
  	5,61,0,0,227,42,1,0,0,0,228,229,5,42,0,0,229,230,5,61,0,0,230,44,1,0,
  	0,0,231,232,5,47,0,0,232,233,5,61,0,0,233,46,1,0,0,0,234,235,5,37,0,0,
  	235,236,5,61,0,0,236,48,1,0,0,0,237,238,5,38,0,0,238,239,5,61,0,0,239,
  	50,1,0,0,0,240,241,5,124,0,0,241,242,5,61,0,0,242,52,1,0,0,0,243,244,
  	5,94,0,0,244,245,5,61,0,0,245,54,1,0,0,0,246,247,5,60,0,0,247,248,5,60,
  	0,0,248,249,5,61,0,0,249,56,1,0,0,0,250,251,5,62,0,0,251,252,5,62,0,0,
  	252,253,5,61,0,0,253,58,1,0,0,0,254,255,5,61,0,0,255,256,5,61,0,0,256,
  	60,1,0,0,0,257,258,5,33,0,0,258,259,5,61,0,0,259,62,1,0,0,0,260,261,5,
  	60,0,0,261,64,1,0,0,0,262,263,5,62,0,0,263,66,1,0,0,0,264,265,5,60,0,
  	0,265,266,5,61,0,0,266,68,1,0,0,0,267,268,5,62,0,0,268,269,5,61,0,0,269,
  	70,1,0,0,0,270,271,5,33,0,0,271,72,1,0,0,0,272,273,5,38,0,0,273,274,5,
  	38,0,0,274,74,1,0,0,0,275,276,5,124,0,0,276,277,5,124,0,0,277,76,1,0,
  	0,0,278,279,5,38,0,0,279,78,1,0,0,0,280,281,5,124,0,0,281,80,1,0,0,0,
  	282,283,5,94,0,0,283,82,1,0,0,0,284,285,5,126,0,0,285,84,1,0,0,0,286,
  	287,5,60,0,0,287,288,5,60,0,0,288,86,1,0,0,0,289,290,5,62,0,0,290,291,
  	5,62,0,0,291,88,1,0,0,0,292,293,5,40,0,0,293,90,1,0,0,0,294,295,5,41,
  	0,0,295,92,1,0,0,0,296,297,5,123,0,0,297,94,1,0,0,0,298,299,5,125,0,0,
  	299,96,1,0,0,0,300,301,5,91,0,0,301,98,1,0,0,0,302,303,5,93,0,0,303,100,
  	1,0,0,0,304,305,5,44,0,0,305,102,1,0,0,0,306,307,5,59,0,0,307,104,1,0,
  	0,0,308,312,7,0,0,0,309,311,7,1,0,0,310,309,1,0,0,0,311,314,1,0,0,0,312,
  	310,1,0,0,0,312,313,1,0,0,0,313,106,1,0,0,0,314,312,1,0,0,0,315,342,5,
  	48,0,0,316,320,7,2,0,0,317,319,7,3,0,0,318,317,1,0,0,0,319,322,1,0,0,
  	0,320,318,1,0,0,0,320,321,1,0,0,0,321,342,1,0,0,0,322,320,1,0,0,0,323,
  	327,5,48,0,0,324,326,7,4,0,0,325,324,1,0,0,0,326,329,1,0,0,0,327,325,
  	1,0,0,0,327,328,1,0,0,0,328,342,1,0,0,0,329,327,1,0,0,0,330,331,5,48,
  	0,0,331,335,5,120,0,0,332,333,5,48,0,0,333,335,5,88,0,0,334,330,1,0,0,
  	0,334,332,1,0,0,0,335,337,1,0,0,0,336,338,7,5,0,0,337,336,1,0,0,0,338,
  	339,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,315,1,
  	0,0,0,341,316,1,0,0,0,341,323,1,0,0,0,341,334,1,0,0,0,342,108,1,0,0,0,
  	343,346,3,113,56,0,344,346,3,115,57,0,345,343,1,0,0,0,345,344,1,0,0,0,
  	346,348,1,0,0,0,347,349,3,111,55,0,348,347,1,0,0,0,348,349,1,0,0,0,349,
  	110,1,0,0,0,350,351,5,102,0,0,351,112,1,0,0,0,352,354,3,117,58,0,353,
  	355,3,119,59,0,354,353,1,0,0,0,354,355,1,0,0,0,355,360,1,0,0,0,356,357,
  	3,123,61,0,357,358,3,119,59,0,358,360,1,0,0,0,359,352,1,0,0,0,359,356,
  	1,0,0,0,360,114,1,0,0,0,361,362,3,127,63,0,362,363,3,129,64,0,363,364,
  	3,133,66,0,364,370,1,0,0,0,365,366,3,127,63,0,366,367,3,131,65,0,367,
  	368,3,133,66,0,368,370,1,0,0,0,369,361,1,0,0,0,369,365,1,0,0,0,370,116,
  	1,0,0,0,371,373,3,123,61,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,
  	0,0,0,374,375,5,46,0,0,375,380,3,123,61,0,376,377,3,123,61,0,377,378,
  	5,46,0,0,378,380,1,0,0,0,379,372,1,0,0,0,379,376,1,0,0,0,380,118,1,0,
  	0,0,381,383,5,101,0,0,382,384,3,121,60,0,383,382,1,0,0,0,383,384,1,0,
  	0,0,384,385,1,0,0,0,385,392,3,123,61,0,386,388,5,69,0,0,387,389,3,121,
  	60,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,392,3,123,61,
  	0,391,381,1,0,0,0,391,386,1,0,0,0,392,120,1,0,0,0,393,394,7,6,0,0,394,
  	122,1,0,0,0,395,397,3,135,67,0,396,395,1,0,0,0,397,398,1,0,0,0,398,396,
  	1,0,0,0,398,399,1,0,0,0,399,124,1,0,0,0,400,401,7,5,0,0,401,126,1,0,0,
  	0,402,403,5,48,0,0,403,407,5,120,0,0,404,405,5,48,0,0,405,407,5,88,0,
  	0,406,402,1,0,0,0,406,404,1,0,0,0,407,128,1,0,0,0,408,410,3,131,65,0,
  	409,408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,5,46,0,0,412,
  	417,3,131,65,0,413,414,3,131,65,0,414,415,5,46,0,0,415,417,1,0,0,0,416,
  	409,1,0,0,0,416,413,1,0,0,0,417,130,1,0,0,0,418,420,3,125,62,0,419,418,
  	1,0,0,0,420,421,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,132,1,0,0,
  	0,423,425,5,80,0,0,424,426,3,121,60,0,425,424,1,0,0,0,425,426,1,0,0,0,
  	426,427,1,0,0,0,427,434,3,123,61,0,428,430,5,112,0,0,429,431,3,121,60,
  	0,430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,434,3,123,61,0,
  	433,423,1,0,0,0,433,428,1,0,0,0,434,134,1,0,0,0,435,436,7,3,0,0,436,136,
  	1,0,0,0,437,439,7,7,0,0,438,437,1,0,0,0,439,440,1,0,0,0,440,438,1,0,0,
  	0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,6,68,0,0,443,138,1,0,0,0,444,
  	445,5,47,0,0,445,446,5,47,0,0,446,450,1,0,0,0,447,449,9,0,0,0,448,447,
  	1,0,0,0,449,452,1,0,0,0,450,451,1,0,0,0,450,448,1,0,0,0,451,454,1,0,0,
  	0,452,450,1,0,0,0,453,455,7,8,0,0,454,453,1,0,0,0,455,456,1,0,0,0,456,
  	457,6,69,0,0,457,140,1,0,0,0,458,459,5,47,0,0,459,460,5,42,0,0,460,464,
  	1,0,0,0,461,463,9,0,0,0,462,461,1,0,0,0,463,466,1,0,0,0,464,465,1,0,0,
  	0,464,462,1,0,0,0,465,467,1,0,0,0,466,464,1,0,0,0,467,468,5,42,0,0,468,
  	469,5,47,0,0,469,470,1,0,0,0,470,471,6,70,0,0,471,142,1,0,0,0,29,0,312,
  	320,327,334,339,341,345,348,354,359,369,372,379,383,388,391,398,406,409,
  	416,421,425,430,433,440,450,454,464,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysYLexer.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
