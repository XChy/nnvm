
// Generated from ./SysYLexer.g4 by ANTLR 4.12.0


#include "SysYLexer.h"


using namespace antlr4;

using namespace nnvm;


using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "CONST", "INT", "FLOAT", "VOID", "IF", "ELSE", "WHILE", "BREAK", "CONTINUE", 
      "RETURN", "PLUS", "MINUS", "MUL", "DIV", "MOD", "ASSIGN", "EQ", "NEQ", 
      "LT", "GT", "LE", "GE", "NOT", "AND", "OR", "BITAND", "BITOR", "BITXOR", 
      "BITNOT", "BITSHL", "BITSHR", "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", 
      "L_BRACKT", "R_BRACKT", "COMMA", "SEMICOLON", "IDENT", "INTEGER_CONST", 
      "FLOAT_CONST", "DecimalFloatingConstant", "HexadecimalFloatingConstant", 
      "FractionalConstant", "ExponentPart", "Sign", "DigitSequence", "HexadecimalDigit", 
      "HexadecimalPrefix", "HexadecimalFractionalConstant", "HexadecimalDigitSequence", 
      "BinaryExponentPart", "DIGIT", "WS", "LINE_COMMENT", "MULTILINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "'int'", "'float'", "'void'", "'if'", "'else'", "'while'", 
      "'break'", "'continue'", "'return'", "'+'", "'-'", "'*'", "'/'", "'%'", 
      "'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'!'", "'&&'", 
      "'||'", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", "'('", "')'", 
      "'{'", "'}'", "'['", "']'", "','", "';'"
    },
    std::vector<std::string>{
      "", "CONST", "INT", "FLOAT", "VOID", "IF", "ELSE", "WHILE", "BREAK", 
      "CONTINUE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "MOD", "ASSIGN", 
      "EQ", "NEQ", "LT", "GT", "LE", "GE", "NOT", "AND", "OR", "BITAND", 
      "BITOR", "BITXOR", "BITNOT", "BITSHL", "BITSHR", "L_PAREN", "R_PAREN", 
      "L_BRACE", "R_BRACE", "L_BRACKT", "R_BRACKT", "COMMA", "SEMICOLON", 
      "IDENT", "INTEGER_CONST", "FLOAT_CONST", "DecimalFloatingConstant", 
      "HexadecimalFloatingConstant", "WS", "LINE_COMMENT", "MULTILINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,47,397,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
  	6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,
  	1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
  	1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
  	1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,
  	1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
  	1,38,1,39,1,39,5,39,241,8,39,10,39,12,39,244,9,39,1,40,1,40,1,40,5,40,
  	249,8,40,10,40,12,40,252,9,40,1,40,1,40,5,40,256,8,40,10,40,12,40,259,
  	9,40,1,40,1,40,1,40,1,40,3,40,265,8,40,1,40,4,40,268,8,40,11,40,12,40,
  	269,3,40,272,8,40,1,41,1,41,3,41,276,8,41,1,42,1,42,3,42,280,8,42,1,42,
  	1,42,1,42,3,42,285,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,
  	295,8,43,1,44,3,44,298,8,44,1,44,1,44,1,44,1,44,1,44,3,44,305,8,44,1,
  	45,1,45,3,45,309,8,45,1,45,1,45,1,45,3,45,314,8,45,1,45,3,45,317,8,45,
  	1,46,1,46,1,47,4,47,322,8,47,11,47,12,47,323,1,48,1,48,1,49,1,49,1,49,
  	1,49,3,49,332,8,49,1,50,3,50,335,8,50,1,50,1,50,1,50,1,50,1,50,3,50,342,
  	8,50,1,51,4,51,345,8,51,11,51,12,51,346,1,52,1,52,3,52,351,8,52,1,52,
  	1,52,1,52,3,52,356,8,52,1,52,3,52,359,8,52,1,53,1,53,1,54,4,54,364,8,
  	54,11,54,12,54,365,1,54,1,54,1,55,1,55,1,55,1,55,5,55,374,8,55,10,55,
  	12,55,377,9,55,1,55,3,55,380,8,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,
  	388,8,56,10,56,12,56,391,9,56,1,56,1,56,1,56,1,56,1,56,2,375,389,0,57,
  	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
  	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
  	26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
  	75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,0,91,0,93,0,95,0,97,0,99,
  	0,101,0,103,0,105,0,107,0,109,45,111,46,113,47,1,0,9,3,0,65,90,95,95,
  	97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,1,0,48,55,3,0,
  	48,57,65,70,97,102,2,0,43,43,45,45,3,0,9,10,13,13,32,32,1,1,10,10,414,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,1,115,1,0,0,0,
  	3,121,1,0,0,0,5,125,1,0,0,0,7,131,1,0,0,0,9,136,1,0,0,0,11,139,1,0,0,
  	0,13,144,1,0,0,0,15,150,1,0,0,0,17,156,1,0,0,0,19,165,1,0,0,0,21,172,
  	1,0,0,0,23,174,1,0,0,0,25,176,1,0,0,0,27,178,1,0,0,0,29,180,1,0,0,0,31,
  	182,1,0,0,0,33,184,1,0,0,0,35,187,1,0,0,0,37,190,1,0,0,0,39,192,1,0,0,
  	0,41,194,1,0,0,0,43,197,1,0,0,0,45,200,1,0,0,0,47,202,1,0,0,0,49,205,
  	1,0,0,0,51,208,1,0,0,0,53,210,1,0,0,0,55,212,1,0,0,0,57,214,1,0,0,0,59,
  	216,1,0,0,0,61,219,1,0,0,0,63,222,1,0,0,0,65,224,1,0,0,0,67,226,1,0,0,
  	0,69,228,1,0,0,0,71,230,1,0,0,0,73,232,1,0,0,0,75,234,1,0,0,0,77,236,
  	1,0,0,0,79,238,1,0,0,0,81,271,1,0,0,0,83,275,1,0,0,0,85,284,1,0,0,0,87,
  	294,1,0,0,0,89,304,1,0,0,0,91,316,1,0,0,0,93,318,1,0,0,0,95,321,1,0,0,
  	0,97,325,1,0,0,0,99,331,1,0,0,0,101,341,1,0,0,0,103,344,1,0,0,0,105,358,
  	1,0,0,0,107,360,1,0,0,0,109,363,1,0,0,0,111,369,1,0,0,0,113,383,1,0,0,
  	0,115,116,5,99,0,0,116,117,5,111,0,0,117,118,5,110,0,0,118,119,5,115,
  	0,0,119,120,5,116,0,0,120,2,1,0,0,0,121,122,5,105,0,0,122,123,5,110,0,
  	0,123,124,5,116,0,0,124,4,1,0,0,0,125,126,5,102,0,0,126,127,5,108,0,0,
  	127,128,5,111,0,0,128,129,5,97,0,0,129,130,5,116,0,0,130,6,1,0,0,0,131,
  	132,5,118,0,0,132,133,5,111,0,0,133,134,5,105,0,0,134,135,5,100,0,0,135,
  	8,1,0,0,0,136,137,5,105,0,0,137,138,5,102,0,0,138,10,1,0,0,0,139,140,
  	5,101,0,0,140,141,5,108,0,0,141,142,5,115,0,0,142,143,5,101,0,0,143,12,
  	1,0,0,0,144,145,5,119,0,0,145,146,5,104,0,0,146,147,5,105,0,0,147,148,
  	5,108,0,0,148,149,5,101,0,0,149,14,1,0,0,0,150,151,5,98,0,0,151,152,5,
  	114,0,0,152,153,5,101,0,0,153,154,5,97,0,0,154,155,5,107,0,0,155,16,1,
  	0,0,0,156,157,5,99,0,0,157,158,5,111,0,0,158,159,5,110,0,0,159,160,5,
  	116,0,0,160,161,5,105,0,0,161,162,5,110,0,0,162,163,5,117,0,0,163,164,
  	5,101,0,0,164,18,1,0,0,0,165,166,5,114,0,0,166,167,5,101,0,0,167,168,
  	5,116,0,0,168,169,5,117,0,0,169,170,5,114,0,0,170,171,5,110,0,0,171,20,
  	1,0,0,0,172,173,5,43,0,0,173,22,1,0,0,0,174,175,5,45,0,0,175,24,1,0,0,
  	0,176,177,5,42,0,0,177,26,1,0,0,0,178,179,5,47,0,0,179,28,1,0,0,0,180,
  	181,5,37,0,0,181,30,1,0,0,0,182,183,5,61,0,0,183,32,1,0,0,0,184,185,5,
  	61,0,0,185,186,5,61,0,0,186,34,1,0,0,0,187,188,5,33,0,0,188,189,5,61,
  	0,0,189,36,1,0,0,0,190,191,5,60,0,0,191,38,1,0,0,0,192,193,5,62,0,0,193,
  	40,1,0,0,0,194,195,5,60,0,0,195,196,5,61,0,0,196,42,1,0,0,0,197,198,5,
  	62,0,0,198,199,5,61,0,0,199,44,1,0,0,0,200,201,5,33,0,0,201,46,1,0,0,
  	0,202,203,5,38,0,0,203,204,5,38,0,0,204,48,1,0,0,0,205,206,5,124,0,0,
  	206,207,5,124,0,0,207,50,1,0,0,0,208,209,5,38,0,0,209,52,1,0,0,0,210,
  	211,5,124,0,0,211,54,1,0,0,0,212,213,5,94,0,0,213,56,1,0,0,0,214,215,
  	5,126,0,0,215,58,1,0,0,0,216,217,5,60,0,0,217,218,5,60,0,0,218,60,1,0,
  	0,0,219,220,5,62,0,0,220,221,5,62,0,0,221,62,1,0,0,0,222,223,5,40,0,0,
  	223,64,1,0,0,0,224,225,5,41,0,0,225,66,1,0,0,0,226,227,5,123,0,0,227,
  	68,1,0,0,0,228,229,5,125,0,0,229,70,1,0,0,0,230,231,5,91,0,0,231,72,1,
  	0,0,0,232,233,5,93,0,0,233,74,1,0,0,0,234,235,5,44,0,0,235,76,1,0,0,0,
  	236,237,5,59,0,0,237,78,1,0,0,0,238,242,7,0,0,0,239,241,7,1,0,0,240,239,
  	1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,80,1,0,0,
  	0,244,242,1,0,0,0,245,272,5,48,0,0,246,250,7,2,0,0,247,249,7,3,0,0,248,
  	247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,272,1,
  	0,0,0,252,250,1,0,0,0,253,257,5,48,0,0,254,256,7,4,0,0,255,254,1,0,0,
  	0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,272,1,0,0,0,259,
  	257,1,0,0,0,260,261,5,48,0,0,261,265,5,120,0,0,262,263,5,48,0,0,263,265,
  	5,88,0,0,264,260,1,0,0,0,264,262,1,0,0,0,265,267,1,0,0,0,266,268,7,5,
  	0,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,
  	272,1,0,0,0,271,245,1,0,0,0,271,246,1,0,0,0,271,253,1,0,0,0,271,264,1,
  	0,0,0,272,82,1,0,0,0,273,276,3,85,42,0,274,276,3,87,43,0,275,273,1,0,
  	0,0,275,274,1,0,0,0,276,84,1,0,0,0,277,279,3,89,44,0,278,280,3,91,45,
  	0,279,278,1,0,0,0,279,280,1,0,0,0,280,285,1,0,0,0,281,282,3,95,47,0,282,
  	283,3,91,45,0,283,285,1,0,0,0,284,277,1,0,0,0,284,281,1,0,0,0,285,86,
  	1,0,0,0,286,287,3,99,49,0,287,288,3,101,50,0,288,289,3,105,52,0,289,295,
  	1,0,0,0,290,291,3,99,49,0,291,292,3,103,51,0,292,293,3,105,52,0,293,295,
  	1,0,0,0,294,286,1,0,0,0,294,290,1,0,0,0,295,88,1,0,0,0,296,298,3,95,47,
  	0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,5,46,0,0,300,
  	305,3,95,47,0,301,302,3,95,47,0,302,303,5,46,0,0,303,305,1,0,0,0,304,
  	297,1,0,0,0,304,301,1,0,0,0,305,90,1,0,0,0,306,308,5,101,0,0,307,309,
  	3,93,46,0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,317,3,95,
  	47,0,311,313,5,69,0,0,312,314,3,93,46,0,313,312,1,0,0,0,313,314,1,0,0,
  	0,314,315,1,0,0,0,315,317,3,95,47,0,316,306,1,0,0,0,316,311,1,0,0,0,317,
  	92,1,0,0,0,318,319,7,6,0,0,319,94,1,0,0,0,320,322,3,107,53,0,321,320,
  	1,0,0,0,322,323,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,96,1,0,0,
  	0,325,326,7,5,0,0,326,98,1,0,0,0,327,328,5,48,0,0,328,332,5,120,0,0,329,
  	330,5,48,0,0,330,332,5,88,0,0,331,327,1,0,0,0,331,329,1,0,0,0,332,100,
  	1,0,0,0,333,335,3,103,51,0,334,333,1,0,0,0,334,335,1,0,0,0,335,336,1,
  	0,0,0,336,337,5,46,0,0,337,342,3,103,51,0,338,339,3,103,51,0,339,340,
  	5,46,0,0,340,342,1,0,0,0,341,334,1,0,0,0,341,338,1,0,0,0,342,102,1,0,
  	0,0,343,345,3,97,48,0,344,343,1,0,0,0,345,346,1,0,0,0,346,344,1,0,0,0,
  	346,347,1,0,0,0,347,104,1,0,0,0,348,350,5,80,0,0,349,351,3,93,46,0,350,
  	349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,359,3,95,47,0,353,355,
  	5,112,0,0,354,356,3,93,46,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,
  	0,0,0,357,359,3,95,47,0,358,348,1,0,0,0,358,353,1,0,0,0,359,106,1,0,0,
  	0,360,361,7,3,0,0,361,108,1,0,0,0,362,364,7,7,0,0,363,362,1,0,0,0,364,
  	365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,368,6,
  	54,0,0,368,110,1,0,0,0,369,370,5,47,0,0,370,371,5,47,0,0,371,375,1,0,
  	0,0,372,374,9,0,0,0,373,372,1,0,0,0,374,377,1,0,0,0,375,376,1,0,0,0,375,
  	373,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,378,380,7,8,0,0,379,378,1,
  	0,0,0,380,381,1,0,0,0,381,382,6,55,0,0,382,112,1,0,0,0,383,384,5,47,0,
  	0,384,385,5,42,0,0,385,389,1,0,0,0,386,388,9,0,0,0,387,386,1,0,0,0,388,
  	391,1,0,0,0,389,390,1,0,0,0,389,387,1,0,0,0,390,392,1,0,0,0,391,389,1,
  	0,0,0,392,393,5,42,0,0,393,394,5,47,0,0,394,395,1,0,0,0,395,396,6,56,
  	0,0,396,114,1,0,0,0,28,0,242,250,257,264,269,271,275,279,284,294,297,
  	304,308,313,316,323,331,334,341,346,350,355,358,365,375,379,389,1,6,0,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysYLexer.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
